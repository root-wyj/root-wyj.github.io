{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/icon.png","path":"icon.png","modified":1,"renderable":0},{"_id":"source/images/springboot启动流程-1.png","path":"images/springboot启动流程-1.png","modified":1,"renderable":0},{"_id":"source/images/common/icon.png","path":"images/common/icon.png","modified":1,"renderable":0},{"_id":"source/images/springboot启动流程-4.png","path":"images/springboot启动流程-4.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"source/images/springboot-environment-1.png","path":"images/springboot-environment-1.png","modified":1,"renderable":0},{"_id":"source/images/springboot启动流程-3.png","path":"images/springboot启动流程-3.png","modified":1,"renderable":0},{"_id":"source/images/common/avatar.jpeg","path":"images/common/avatar.jpeg","modified":1,"renderable":0},{"_id":"source/images/common/wx_pay.jpg","path":"images/common/wx_pay.jpg","modified":1,"renderable":0},{"_id":"source/images/springboot启动流程-2.png","path":"images/springboot启动流程-2.png","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"source/images/springboot-environment-2.png","path":"images/springboot-environment-2.png","modified":1,"renderable":0},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"source/images/springboot-environment-3.png","path":"images/springboot-environment-3.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/icon.png","hash":"6bcb01f785c25f54f05f4346e5ae3bd86a8ecf44","modified":1550130786166},{"_id":"source/404.html","hash":"d6cd47ba4ab178269d9e7be773e521a3f74a738b","modified":1550131825439},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1501628194000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1501628194000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1501628194000},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1501628194000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1501628194000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1501628194000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1501628194000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1501628194000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1501628194000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1501628194000},{"_id":"themes/next/README.en.md","hash":"32d6cdfec1447f54aae1d7f1365ce6733dfcec8f","modified":1501628194000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1501628194000},{"_id":"themes/next/bower.json","hash":"7d7938f9da896fe710aa0e9120140e528bf058df","modified":1501628194000},{"_id":"themes/next/_config.yml","hash":"ca8a38bdce77ef83e46d83c8ddf1bb06ef1234cc","modified":1550135174741},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1501628194000},{"_id":"themes/next/package.json","hash":"193dad6f59a588908fac082cc46fe067dac1b84d","modified":1501628194000},{"_id":"source/_drafts/mysql存储引擎.md","hash":"45d0caa6b5034e885e90acbb722d03c9733f39f8","modified":1550560560957},{"_id":"source/_drafts/B树以其应用.md","hash":"909ca87aecf820676f88e2634a306ecd083a0d35","modified":1552648136458},{"_id":"source/_posts/hello-world.md","hash":"fbda7cd54753585dbebae9c95fcd110fd05e4840","modified":1550128550614},{"_id":"source/_posts/environment.md","hash":"c2deeb647badb849fec213c1789242338acbbe86","modified":1550133265181},{"_id":"source/_posts/beandefination和createbean.md","hash":"4711431ee9e46944b64c193608e1498ad053acf8","modified":1550138255620},{"_id":"source/categories/index.md","hash":"e74dfceab1988c564dd2a3c0e2b8d38260416111","modified":1550128626012},{"_id":"source/_posts/springboot启动流程.md","hash":"1a6eaea6f94c81e4afce4000633f0cb82d33fa2a","modified":1550138361324},{"_id":"source/tags/index.md","hash":"0f2b8d9c3ae30d8c84202207cbb62db944d27d0d","modified":1550128131867},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1501628194000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"b56c01cdfc6ee7ffea8a8a9fa149263f368caef6","modified":1501628194000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"37bd0ec1d655c601946fc5f5ac2fe8ed1e529b77","modified":1501628194000},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1501628194000},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1501628194000},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1501628194000},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1501628194000},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1501628194000},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1501628194000},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1501628194000},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1501628194000},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1501628194000},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1501628194000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"9a40f256e99ccc0a18cf58a9dd34484db86ecaae","modified":1550138657327},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1501628194000},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1501628194000},{"_id":"themes/next/layout/_layout.swig","hash":"06b1eab2e00273e0b94bd32dc682bd92c1e0a747","modified":1501628194000},{"_id":"themes/next/layout/archive.swig","hash":"383f64deab105724fd5512371963bd9e9aafbffd","modified":1501628194000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1501628194000},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1501628194000},{"_id":"themes/next/layout/page.swig","hash":"37c874cd720acf0eda8d26e063278f2b6ae8d3a6","modified":1501628194000},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1501628194000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1501628194000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1501628194000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1501628194000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1501628194000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1501628194000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1501628194000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1501628194000},{"_id":"source/images/springboot启动流程-1.png","hash":"38b7ad6f1cb198d57d04b1210eeebfff2750afa9","modified":1550133116708},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"source/images/common/icon.png","hash":"6bcb01f785c25f54f05f4346e5ae3bd86a8ecf44","modified":1550132993761},{"_id":"source/images/springboot启动流程-4.png","hash":"3fe64cbe967d12f6e6c738c599841e6e6eca6ef2","modified":1550133116709},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1501628194000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1501628194000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1501628194000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"53d4f83b2b7fb4387dfc9fe81519abd56fbce4ae","modified":1501628194000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"5d5f70deb6074cb4dd0438463e14ccf89213c282","modified":1501628194000},{"_id":"themes/next/layout/_macro/post.swig","hash":"911363776867d9523a3e322cdf591d49cd166403","modified":1501628194000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1501628194000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"faa7886ccf986890cd776f4e9d70cb89fe9fda5f","modified":1501628194000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1501628194000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1501628194000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"ce7094ee05878161e7568a6dfae5b56ff3fbd6e1","modified":1501628194000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"2a43861f2b901357cc443b7de74563427f8ebd1b","modified":1550131112856},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1501628194000},{"_id":"themes/next/layout/_partials/head.swig","hash":"1f14d3f494b2dbbcee802fd6f6d1abd5b7e2304c","modified":1501628194000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1501628194000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1501628194000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1501628194000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1501628194000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1501628194000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1501628194000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1501628194000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1501628194000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1501628194000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1501628194000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1501628194000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1501628194000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1501628194000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1501628194000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1501628194000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1501628194000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1501628194000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1501628194000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1501628194000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1501628194000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1501628194000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1501628194000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1501628194000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1501628194000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1501628194000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1501628194000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1501628194000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1501628194000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1501628194000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1501628194000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1501628194000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1501628194000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1501628194000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1501628194000},{"_id":"source/images/springboot-environment-1.png","hash":"d9d763c9737ca77457d1460fca9bb4af626b0796","modified":1550133116710},{"_id":"source/images/springboot启动流程-3.png","hash":"01e18a7013aed4ebb7d1daf7dd147a72e70784f8","modified":1550133116711},{"_id":"source/images/common/avatar.jpeg","hash":"b98e5ae0cffc8e3450e043c740a683677d3c11bd","modified":1550132993761},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"source/images/common/wx_pay.jpg","hash":"1c6332fac484061ac639ac68e34924811a07165f","modified":1550132993761},{"_id":"source/images/springboot启动流程-2.png","hash":"f5b3410ae427d4f5f9b168ba34ec5a66d44426b9","modified":1550133116711},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1501628194000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1501628194000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1501628194000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1501628194000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1501628194000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1501628194000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1501628194000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1501628194000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1501628194000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1501628194000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1501628194000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"ee63aa2e49507b884a2d56778479cf01c723d751","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1501628194000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1501628194000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1501628194000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1501628194000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1501628194000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1501628194000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"eaedfaf06dae94ba77a8f4893e2e434bf8859bac","modified":1501628194000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1501628194000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1501628194000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"49b5210fa62d6cbc6a98f57d89d5067a06ab3561","modified":1501628194000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1501628194000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"cfee25d790e4f9b7d57f0dc7e2ea9c1649f08f11","modified":1501628194000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d477196c5699c8261b08e993a77ef67054d86166","modified":1501628194000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1501628194000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1501628194000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1501628194000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1501628194000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1501628194000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1501628194000},{"_id":"themes/next/source/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1501628194000},{"_id":"themes/next/source/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1501628194000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1501628194000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1501628194000},{"_id":"themes/next/source/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1501628194000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1501628194000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1501628194000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1501628194000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1501628194000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1501628194000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1501628194000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1501628194000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1501628194000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1501628194000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1501628194000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1501628194000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1501628194000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1501628194000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1501628194000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1501628194000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1501628194000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1501628194000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1501628194000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1501628194000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1501628194000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1501628194000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1501628194000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1501628194000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1501628194000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d026c8489f66ab6c12ad04bd37f1d5b6f2f3f0d1","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1501628194000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1501628194000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"2915df7152ea095a6290ef69157fd67669e0e793","modified":1501628194000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1501628194000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"86b6fd7f1b1be3ae98f8af6b23a6b1299c670ce9","modified":1501628194000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1501628194000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1501628194000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"bc8c388553bbcf95897459a466ba35bffd5ec5f0","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1501628194000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1501628194000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1501628194000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1501628194000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1501628194000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1501628194000},{"_id":"source/images/springboot-environment-2.png","hash":"c9630f14bc6510e5f66be08e8065944a917f9387","modified":1550133116772},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1501628194000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ed88c8b51d0517759c777e71a6bfbe2907bcd994","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ee554b1031ef0070a5916477939021800e3c9d27","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"51eca243220cf57133a4becae9b78514bcfdc723","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"65a64d5662637b66e2f039a5f58217afe7a6e800","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"4fda5d38c6c8d910e3bf5c74a48a8d4a3f3dc73d","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"57d2c8a060f5e4e1a0aef9aae11a0016cf7ac5ba","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"45df0cf4c97b47e05573bcd41028ee50f3fdf432","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"aeff0e6e23725e8baea27c890ccbbf466024f767","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1501628194000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1501628194000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1501628194000},{"_id":"source/images/springboot-environment-3.png","hash":"3b254876d6079c4bf34eb6b5424d7ef540c75a5c","modified":1550133117015}],"Category":[{"name":"mysql","_id":"cjt9ymrug0005lf6vehzs7wkz"},{"name":"Hello World","_id":"cjt9ymrui0007lf6v653oxbfr"},{"name":"树","_id":"cjt9ymrvf000elf6v311zrfzq"},{"name":"SpringBoot","_id":"cjt9ymrwz000jlf6v6g2f0wyv"},{"name":"Spring","_id":"cjt9ymryp000ulf6vbpl6aka7"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","date":"2019-02-14T08:10:25.439Z","updated":"2019-02-14T08:10:25.439Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cjt9ymrpq0000lf6vh4im6of5","content":"<!DOCTYPE HTML>\n<html>\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>"},{"title":"categories","date":"2019-02-14T07:11:12.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-02-14 15:11:12\ntype: \"categories\"\n---\n","updated":"2019-02-14T07:17:06.012Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjt9ymrua0002lf6vjvyqokii","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-02-14T07:08:18.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-02-14 15:08:18\ntype: tags\n---\n","updated":"2019-02-14T07:08:51.867Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjt9ymrue0004lf6vimhceudf","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"mysql存储引擎","_content":"\n\n`show engines \\G`查看所有引擎。\n\n可以在创建表的时候指定`engine=InnoDB`来指定该表要用的引擎。\n\n\n\n[innodb数据库 OPTIMIZE TABLE 提示Table does not support optimize](https://blog.csdn.net/langkeziju/article/details/44977017)\n\n","source":"_drafts/mysql存储引擎.md","raw":"---\ntitle: mysql存储引擎\ncategories:\n  - mysql\ntags: mysql\n---\n\n\n`show engines \\G`查看所有引擎。\n\n可以在创建表的时候指定`engine=InnoDB`来指定该表要用的引擎。\n\n\n\n[innodb数据库 OPTIMIZE TABLE 提示Table does not support optimize](https://blog.csdn.net/langkeziju/article/details/44977017)\n\n","slug":"mysql存储引擎","published":0,"date":"2019-02-19T02:40:03.350Z","updated":"2019-02-19T07:16:00.957Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt9ymru70001lf6v3trcejl4","content":"<p><code>show engines \\G</code>查看所有引擎。</p>\n<p>可以在创建表的时候指定<code>engine=InnoDB</code>来指定该表要用的引擎。</p>\n<p><a href=\"https://blog.csdn.net/langkeziju/article/details/44977017\" target=\"_blank\" rel=\"noopener\">innodb数据库 OPTIMIZE TABLE 提示Table does not support optimize</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>show engines \\G</code>查看所有引擎。</p>\n<p>可以在创建表的时候指定<code>engine=InnoDB</code>来指定该表要用的引擎。</p>\n<p><a href=\"https://blog.csdn.net/langkeziju/article/details/44977017\" target=\"_blank\" rel=\"noopener\">innodb数据库 OPTIMIZE TABLE 提示Table does not support optimize</a></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ncategories:\n  - \"Hello World\"\ntags:\n  - test\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2019-02-13T10:49:48.058Z","updated":"2019-02-14T07:15:50.614Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt9ymruc0003lf6v8mcaqf93","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"SpringBoot启动流程","_content":"\n\n# SpringBoot 启动流程\n\n<br>\n\n- [SpringBoot 启动流程](#springboot-启动流程)\n  - [初始化](#初始化)\n  - [run](#run)\n\n<br>\n\n启动从`SpringApplication.run(MyServiceApplication.class, args);`开始，然后到SpringApplication的静态run方法中new 一个 `SpringApplication`对象并调用它的run方法\n\n```java\n/* SpringApplication */\npublic static ConfigurableApplicationContext run(Class<?>[] primarySources,\n        String[] args) {\n    return new SpringApplication(primarySources).run(args);\n}\n\n```\n\n启动流程可以主要分为两大部分，一部分是初始化 就是创建`SpringApplication`对象，一部分是run。\n\n首先分析初始化的过程.\n\n<br>\n\n-------------\n\n## 初始化\n\n```java\n// resourceLoader = null, primarySource 就是一个class数组，里面存了我们的MyServiceApplication.class\npublic SpringApplication(ResourceLoader resourceLoader, Class<?>... primarySources) {\n    this.resourceLoader = resourceLoader;\n    Assert.notNull(primarySources, \"PrimarySources must not be null\");\n    //将我们启动类（其实是注解类，将来用来扫面该类注解，解析该类）类放在 primarySource 中保存起来\n    this.primarySources = new LinkedHashSet<>(Arrays.asList(primarySources));\n    // 推断WebApplicationType 这里返回SERVLET\n    this.webApplicationType = WebApplicationType.deduceFromClasspath();\n    // 初始化 并设置 initializers\n    setInitializers((Collection) getSpringFactoriesInstances(\n            ApplicationContextInitializer.class));\n    // 初始化 并设置 listeners\n    setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));\n    // 推断 主应用程序的类 也就是我们的main 函数所在的类\n    this.mainApplicationClass = deduceMainApplicationClass();\n}\n\n```\n\n<br>\n\n**推断WebApplicationType**\n\n这里返回的是`SERVLET`，共有以下几种：\n\n- `NONE` The application should not run as a web application and should not start an embedded web server.\n- `SERVLET` The application should run as a servlet-based web application and should start an embedded servlet web server.\n- `REACTIVE` The application should run as a reactive web application and should start an embedded reactive web server.\n\n在我们初始化完成之后，调用run方法之前，也可以去手动指定该type：`setWebApplicationType(webApplicationType)`\n\n<br>\n\n**初始化 并设置 initializers**\n\n根据`META-INF/spring.factories`中存储的映射关系，找到对应类型`org.springframework.context.ApplicationContextInitializer`的类的名字数组，完成初始化并返回。\n\n```java\n/* SpringApplication */\nprivate <T> Collection<T> getSpringFactoriesInstances(Class<T> type,\n        Class<?>[] parameterTypes, Object... args) {\n    ClassLoader classLoader = getClassLoader();\n    // Use names and ensure unique to protect against duplicates\n    // 获取 type 对应的类名数组\n    Set<String> names = new LinkedHashSet<>(\n            SpringFactoriesLoader.loadFactoryNames(type, classLoader));\n    // 实例化\n    List<T> instances = createSpringFactoriesInstances(type, parameterTypes,\n            classLoader, args, names);\n    AnnotationAwareOrderComparator.sort(instances);\n    return instances;\n}\n\n/* \n SpringFactoriesLoader\n 该类就是专门加载 所有 META-INF/spring.factories 配置文件，并将结果缓存起来，并提供了根据类的类型返回类名数组的方法\n */\n\npublic static List<String> loadFactoryNames(Class<?> factoryClass, @Nullable ClassLoader classLoader) {\n    String factoryClassName = factoryClass.getName();\n    // 获取该classloader对应的所有资源中的属性对，并获取 该factoryClass对应的类名组\n    return loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList());\n}\n\n/**\n * 根据classloader 返回该classloader加载的所有资源中 属性对\n */\nprivate static Map<String, List<String>> loadSpringFactories(@Nullable ClassLoader classLoader) {\n    // cache 是用来缓存 扫面出来的结果的\n    // 如果cache 中没找到，也就是该classloader的第一次扫描， 就去扫描\n    MultiValueMap<String, String> result = cache.get(classLoader);\n    if (result != null) {\n        return result;\n    }\n\n    try {\n        // 获取所有的url\n        Enumeration<URL> urls = (classLoader != null ?\n                classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :\n                ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));\n        result = new LinkedMultiValueMap<>();\n        while (urls.hasMoreElements()) {\n            URL url = urls.nextElement();\n            UrlResource resource = new UrlResource(url);\n            Properties properties = PropertiesLoaderUtils.loadProperties(resource);\n            for (Map.Entry<?, ?> entry : properties.entrySet()) {\n                String factoryClassName = ((String) entry.getKey()).trim();\n                for (String factoryName : StringUtils.commaDelimitedListToStringArray((String) entry.getValue())) {\n                    result.add(factoryClassName, factoryName.trim());\n                }\n            }\n        }\n        cache.put(classLoader, result);\n        return result;\n    }\n    catch (IOException ex) {\n        throw new IllegalArgumentException(\"Unable to load factories from location [\" +\n                FACTORIES_RESOURCE_LOCATION + \"]\", ex);\n    }\n}\n\n\n```\n\n比如其中的一个 `META-INFO/spring.factories` 如下：`jar:file:/Users/wuyingjie/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/2.1.0.RELEASE/spring-boot-autoconfigure-2.1.0.RELEASE.jar!/META-INF/spring.factories`\n\n![|center](/note_all/blob/master/images/springboot启动流程-1.png)\n\nresult 也就是扫描出来的所有key和类名数组如下：\n\n![|center](/note_all/blob/master/images/springboot启动流程-2.png)\n\n`org.springframework.context.ApplicationContextInitializer`对应的类有：\n\n![|center](/note_all/blob/master/images/springboot启动流程-3.png)\n\n\n<br>\n\n**初始化 并设置 applicationlisteners**\n\n`org.springframework.context.ApplicationListener` 对应的类有：\n\n![|center](/note_all/blob/master/images/springboot启动流程-4.png)\n\n<br>\n\n**推断 主应用程序的类 也就是我们的main 函数所在的类**\n\n就是根据栈的调用信息，获取main函数所在的栈帧，最后得到类信息\n\n```java\nprivate Class<?> deduceMainApplicationClass() {\n    try {\n        StackTraceElement[] stackTrace = new RuntimeException().getStackTrace();\n        for (StackTraceElement stackTraceElement : stackTrace) {\n            if (\"main\".equals(stackTraceElement.getMethodName())) {\n                return Class.forName(stackTraceElement.getClassName());\n            }\n        }\n    }\n    catch (ClassNotFoundException ex) {\n        // Swallow and continue\n    }\n    return null;\n}\n```\n\n<br>\n\nSpringApplication的初始化到这里也就结束了。\n\n其实也就是在为WebApplicationContext的初始化 做一些准备工作。\n\n<br>\n\n-------------\n\n## run\n\nrun方法代码如下，而且结构非常清晰。\n\n```java\npublic ConfigurableApplicationContext run(String... args) {\n    StopWatch stopWatch = new StopWatch();\n    stopWatch.start();\n    ConfigurableApplicationContext context = null;\n    Collection<SpringBootExceptionReporter> exceptionReporters = new ArrayList<>();\n    configureHeadlessProperty();\n    // 获取 刚刚初始化时 得到的所有listeners\n    SpringApplicationRunListeners listeners = getRunListeners(args);\n    // 发送 ApplicationStartingEvent 事件\n    listeners.starting();\n    try {\n        // 包装 main方法中的传递的参数 \n        ApplicationArguments applicationArguments = new DefaultApplicationArguments(\n                args);\n        // 初始化 环境，并发送 ApplicationEnvironmentPreparedEvent 事件\n        ConfigurableEnvironment environment = prepareEnvironment(listeners,\n                applicationArguments);\n        configureIgnoreBeanInfo(environment);\n        // 打印 banner\n        Banner printedBanner = printBanner(environment);\n        // 根据不同的 WebApplicationType（我们的是SERVLET）创建不同的ApplicationContext对象实例\n        context = createApplicationContext();\n        // 使用 SpringFactoriesLoader 获取 org.springframework.boot.SpringBootExceptionReporter 对应的 exceptionReporters\n        exceptionReporters = getSpringFactoriesInstances(\n                SpringBootExceptionReporter.class,\n                new Class[] { ConfigurableApplicationContext.class }, context);\n        /**\n         * 1. 准备一下context的环境\n         * 2. 调用上文所有 ApplicationContextInitializer.initialize 方法，趁 context 还没有 refresh\n         * 3. 发送 ApplicationContextInitializedEvent 事件\n         * 4. load allResource=resources+primaryResources 这里主要就是 加载主类 MyServiceAppliction\n         * 5. 做了一些 contextLoaded 的工作，主要是 发送 ApplicationPreparedEvent 事件\n         */\n        prepareContext(context, environment, listeners, applicationArguments,\n                printedBanner);\n        // 调用 ApplicationContext 的 refresh 方法\n        refreshContext(context);\n        // 调用 afterRefresh 但其实是个空方法，啥都没干\n        afterRefresh(context, applicationArguments);\n        stopWatch.stop();\n        if (this.logStartupInfo) {\n            new StartupInfoLogger(this.mainApplicationClass)\n                    .logStarted(getApplicationLog(), stopWatch);\n        }\n        // 发送 ApplicationStartedEvent 事件\n        listeners.started(context);\n        callRunners(context, applicationArguments);\n    }\n    catch (Throwable ex) {\n        handleRunFailure(context, ex, exceptionReporters, listeners);\n        throw new IllegalStateException(ex);\n    }\n\n    try {\n        // 发送 ApplicationReadyEvent 事件\n        listeners.running(context);\n    }\n    catch (Throwable ex) {\n        handleRunFailure(context, ex, exceptionReporters, null);\n        throw new IllegalStateException(ex);\n    }\n    return context;\n}\n\n```\n\n整个启动流程 就完成了。\n\n<br>\n\n----------\n\n\n那么下面就仔细的分析每一步具体做了什么。\n\n<br>\n\n**获取listeners 并通知listeners事件**\n\n获取`SpringApplicationRunListeners`的方法如下：\n\n```java\nprivate SpringApplicationRunListeners getRunListeners(String[] args) {\n    Class<?>[] types = new Class<?>[] { SpringApplication.class, String[].class };\n    return new SpringApplicationRunListeners(logger, getSpringFactoriesInstances(\n            SpringApplicationRunListener.class, types, this, args));\n}\n```\n\n还是使用`SpringFactoriesLoader`类从各个 `spring.factories`配置文件中获取。得到的是`SpringApplicationRunListener`所有配置在`spring.factories`中的子类的数组，这里该数组只有一个元素`org.springframework.boot.context.event.EventPublishingRunListener`\n\n首先，我们看下`SpringApplicationRunListener`，该接口提供了Application运行期各个事件的回调，也就是上面所有的事件其实都是这里发的\n\n\n```java\npackage org.springframework.boot;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.core.env.ConfigurableEnvironment;\nimport org.springframework.core.io.support.SpringFactoriesLoader;\n\n/**\n * Listener for the {@link SpringApplication} {@code run} method.\n * {@link SpringApplicationRunListener}s are loaded via the {@link SpringFactoriesLoader}\n * and should declare a public constructor that accepts a {@link SpringApplication}\n * instance and a {@code String[]} of arguments. A new\n * {@link SpringApplicationRunListener} instance will be created for each run.\n *\n * @author Phillip Webb\n * @author Dave Syer\n * @author Andy Wilkinson\n */\npublic interface SpringApplicationRunListener {\n\n\t/**\n\t * Called immediately when the run method has first started. Can be used for very\n\t * early initialization.\n\t */\n\tvoid starting();\n\n\t/**\n\t * Called once the environment has been prepared, but before the\n\t * {@link ApplicationContext} has been created.\n\t * @param environment the environment\n\t */\n\tvoid environmentPrepared(ConfigurableEnvironment environment);\n\n\t/**\n\t * Called once the {@link ApplicationContext} has been created and prepared, but\n\t * before sources have been loaded.\n\t * @param context the application context\n\t */\n\tvoid contextPrepared(ConfigurableApplicationContext context);\n\n\t/**\n\t * Called once the application context has been loaded but before it has been\n\t * refreshed.\n\t * @param context the application context\n\t */\n\tvoid contextLoaded(ConfigurableApplicationContext context);\n\n\t/**\n\t * The context has been refreshed and the application has started but\n\t * {@link CommandLineRunner CommandLineRunners} and {@link ApplicationRunner\n\t * ApplicationRunners} have not been called.\n\t * @param context the application context.\n\t * @since 2.0.0\n\t */\n\tvoid started(ConfigurableApplicationContext context);\n\n\t/**\n\t * Called immediately before the run method finishes, when the application context has\n\t * been refreshed and all {@link CommandLineRunner CommandLineRunners} and\n\t * {@link ApplicationRunner ApplicationRunners} have been called.\n\t * @param context the application context.\n\t * @since 2.0.0\n\t */\n\tvoid running(ConfigurableApplicationContext context);\n\n\t/**\n\t * Called when a failure occurs when running the application.\n\t * @param context the application context or {@code null} if a failure occurred before\n\t * the context was created\n\t * @param exception the failure\n\t * @since 2.0.0\n\t */\n\tvoid failed(ConfigurableApplicationContext context, Throwable exception);\n\n}\n\n```\n\n比如说，我们看看`listeners.starting();`方法\n\n```java\n// SpringApplicationRunListeners\npublic void starting() {\n    for (SpringApplicationRunListener listener : this.listeners) {\n        // 这里就像上面说的 listeners 只有 EventPublishingRunListener 一个对象\n        listener.starting();\n    }\n}\n\n// 我们看EventPublishingRunListener 的starting 方法\n// EventPublishingRunListener\n@Override\npublic void starting() {\n    // 调用初始化广播器 将 事件 ApplicationStartingEvent 广播到所有 listeners\n    this.initialMulticaster.multicastEvent(\n            new ApplicationStartingEvent(this.application, this.args));\n}\n\n// 那么我们再看一下 这个 初始化广播器 initialMulticaster 到底是什么，并广播向了哪些listeners\n// EventPublishingRunListener 的构造方法\npublic EventPublishingRunListener(SpringApplication application, String[] args) {\n    this.application = application;\n    this.args = args;\n    // new 一个新的 SimpleApplicationEventMulticaster\n    this.initialMulticaster = new SimpleApplicationEventMulticaster();\n    // 并将ApplicationContext中所有的listeners 放到 该 广播器中\n    // 这些listeners 就是从 spring.factories中加载的 所有 ApplicationListener.class的子类\n    for (ApplicationListener<?> listener : application.getListeners()) {\n        this.initialMulticaster.addApplicationListener(listener);\n    }\n}\n\n```\n\n广播逻辑，大致就是在所有的listeners中根据event找到合适的能处理该event的listeners，并调用该listener的onApplicationEvent方法\n\n具体的广播逻辑实现方式就不分析了，可以看我的另一篇介绍**`springboot 事件机制`**的文章，\n\n所以，如果我们想要监听SpringApplication运行期间的各种事件，我们就可以实现`SpringApplicationRunListener`，并仔细看接口的注释。\n\n这里主要涉及到三个类：\n\n- `SpringApplicationRunListeners` 类，包含了所有实现了`SpringApplicationRunListener`接口并通过`spring.factories`注册的类。\n- `SpringApplicationRunListener` 接口，定义监听`SpringApplication`运行的回调接口\n- `EventPublishingRunListener` 类，实现了`SpringApplicationRunListener`接口，是通过`SpringFactoriesLoader`加载的唯一实现类。\n\n> 另外，这里的`SpringApplicationRunListeners`中的`SimpleApplicationEventMulticaster`只负责SpringApplication启动过程中的事件发送，也只发送给通过`SpringFactoriesLoader`加载并放在它里面的listeners。我们写的自己的listeners和这些listeners都放在`ApplicationContext`中的listeners，并且由`ApplicationContext`中的`SimpleApplicationEventMulticaster`负责通知（他俩并不是同一个）。\n\n<br>\n\n**创建Environment 和 context**\n\n创建`ConfigurableEnvironment`和`ApplicationContext` 都会根据之前得到的`WebApplicationType`。\n\n```java\nprotected ConfigurableApplicationContext createApplicationContext() {\n    Class<?> contextClass = this.applicationContextClass;\n    if (contextClass == null) {\n        try {\n            switch (this.webApplicationType) {\n            case SERVLET:\n                // AnnotationConfigServletWebServerApplicationContext\n                contextClass = Class.forName(DEFAULT_SERVLET_WEB_CONTEXT_CLASS); \n                break;\n            case REACTIVE:\n                // AnnotationConfigReactiveWebServerApplicationContext\n                contextClass = Class.forName(DEFAULT_REACTIVE_WEB_CONTEXT_CLASS);\n                break;\n            default:\n                // AnnotationConfigApplicationContext\n                contextClass = Class.forName(DEFAULT_CONTEXT_CLASS);\n            }\n        }\n        catch (ClassNotFoundException ex) {\n            throw new IllegalStateException(\n                    \"Unable create a default ApplicationContext, \"\n                            + \"please specify an ApplicationContextClass\",\n                    ex);\n        }\n    }\n    return (ConfigurableApplicationContext) BeanUtils.instantiateClass(contextClass);\n}\n```\n\n<br>\n\n**prepareContext**\n\n```java\nprivate void prepareContext(ConfigurableApplicationContext context,\n        ConfigurableEnvironment environment, SpringApplicationRunListeners listeners,\n        ApplicationArguments applicationArguments, Banner printedBanner) {\n    context.setEnvironment(environment);\n    // 注入基本的类 如，ConversionService\n    postProcessApplicationContext(context);\n    // 调用各个由 SpringFactoriesLoader 加载的 ApplicationContextInitializer 的 initialize方法\n    applyInitializers(context);\n    // 发布ApplicationContextInitializedEvent 事件\n    listeners.contextPrepared(context);\n    if (this.logStartupInfo) {\n        logStartupInfo(context.getParent() == null);\n        logStartupProfileInfo(context);\n    }\n    // Add boot specific singleton beans\n    ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();\n    beanFactory.registerSingleton(\"springApplicationArguments\", applicationArguments);\n    if (printedBanner != null) {\n        beanFactory.registerSingleton(\"springBootBanner\", printedBanner);\n    }\n    if (beanFactory instanceof DefaultListableBeanFactory) {\n        ((DefaultListableBeanFactory) beanFactory)\n                .setAllowBeanDefinitionOverriding(this.allowBeanDefinitionOverriding);\n    }\n    // Load the sources\n    Set<Object> sources = getAllSources();\n    Assert.notEmpty(sources, \"Sources must not be empty\");\n    // 这里只加载了 我们的主类 MyServiceApplication\n    load(context, sources.toArray(new Object[0]));\n    //1. 如果这些listeners 实现了 ApplicationContextAware 接口，则将ApplicationContext set进去，因为这时候ApplicationContext已经准备好了，而且 这些已经实例化过了，之后也不会收到通知了。\n    //2. 发送 ApplicationPreparedEvent 事件\n    listeners.contextLoaded(context);\n}\n```\n\n<br>\n\n**refresh**\n\n这里还需要着重说一下refresh方法。\n\n上面的load方法只加载了根类 `MyServiceApplication`，而该类下的所有有注解的并没有加载，实际的加载是在refresh的过程中实现的。\n```java\n// AbstractApplicationContext\npublic void refresh() throws BeansException, IllegalStateException {\n    synchronized (this.startupShutdownMonitor) {\n        // Prepare this context for refreshing.\n        prepareRefresh();\n        ...\n        invokeBeanFactoryPostProcessors(beanFactory);\n        ...\n    }\n}\n\n// 最后委托给了 PostProcessorRegistrationDelegate \npublic static void invokeBeanFactoryPostProcessors(\n    ConfigurableListableBeanFactory beanFactory, List<BeanFactoryPostProcessor> beanFactoryPostProcessors) {\n\n    // 首先，需要明白，BeanFactoryPostProcessor 有两个来源，一个是 传进来的，另外一个是 从BeanFactory中拿到的。\n\n    // 代码就省了 写下大致逻辑，也是比较简单的\n\n    if (beanFactory instanceof BeanDefinitionRegistry) {\n        // 如果是一个可以注册的BeanFactory，\n        \n        /*\n         1. 从参数中的 beanFactoryPostProcessors 中找实现 BeanDefinitionRegistryPostProcessor接口的 并调用该方法\n         2. 调用BeanFactory中的BeanDefinitionRegistryPostProcessor接口\n         3. 调用 BeanDefinitionRegistryPostProcessor接口的 BeanFactoryPostProcessors 的接口方法\n         4. 调用 参数中的 BeanFactoryPostProcessors 接口的方法\n        */\n\n    } else {\n        // 如果不可以注册bean\n\n        // 调用所有参数的 BeanFactoryPostProcessors 接口方法\n    }\n\n    //调用 beanFactory中的 BeanFactoryPostProcessors 接口方法\n}\n```\n\n而 SpringBoot 自动装配，去解析根类中的注解并注入bean的过程就发生在 `BeanDefinitionRegistryPostProcessor`的调用过程中。\n\n具体实现的类是`ConfigurationClassPostProcessor`。 具体过程还是挺复杂的，之后可以详细分析。\n\nrefresh 方法也是非常重要的，但是不是本文的重点，具体可以去百度。\n\n> 这里是主要的`BeanFactoryPostProcessor`的来源，但是还有一些来自 `ApplicationContextInitializer`实现类，在调用回调方法时注入的几个（他这么着急注入是要早点用？可是哪里都没有调用啊。。 可能是一些需要提前获取的bean在getBean方法的时候会回调这些早早就初始化好的`BeanFactoryPostProcessor`）。\n\n> 另外，`BeanPostProcessor`也是有一些需要提前注册好的。\b还有一些Bean，比如说`spring.factories`中注册的bean，还有回调或者初始化其他类的时候增加的一些BeanDefinition。如在实例化`AnnotationConfigServletWebServerApplicationContext`会创建`AnnotatedBeanDefinitionReader`对象，在实例化该对象的时候，会像BeanFactory中注册Annotion方式的BeanRegistry所必须用到的几个类，比如说`ConfigurationClassPostProcessor`，`AutowiredAnnotationBeanPostProcessor`，`CommonAnnotationBeanPostProcessor`等等吧。\n\n\n<br>\n\n再之后，除了还是`SpringApplicationRunListeners`的回调，还有一个`callRunners`方法。\n\n<br>\n\n**callRunners**\n\n```java\nprivate void callRunners(ApplicationContext context, ApplicationArguments args) {\n    List<Object> runners = new ArrayList<>();\n    runners.addAll(context.getBeansOfType(ApplicationRunner.class).values());\n    runners.addAll(context.getBeansOfType(CommandLineRunner.class).values());\n    AnnotationAwareOrderComparator.sort(runners);\n    for (Object runner : new LinkedHashSet<>(runners)) {\n        if (runner instanceof ApplicationRunner) {\n            callRunner((ApplicationRunner) runner, args);\n        }\n        if (runner instanceof CommandLineRunner) {\n            callRunner((CommandLineRunner) runner, args);\n        }\n    }\n}   \n```\n\n主要就是回调以下两个接口，对我们运行时传入的参数 加上自己的处理（如果有需要的话）：\n- `ApplicationRunner` 接收由`ApplicationArguments`包装之后的参数\n- `CommandLineRunner` 接收原始运行程序传入的参数\n\n例子 网上一百度 就有了。比如说：[CommandLineRunner或者ApplicationRunner接口](https://www.jianshu.com/p/5d4ffe267596)","source":"_posts/springboot启动流程.md","raw":"---\ntitle: SpringBoot启动流程\ncategories:\n  - SpringBoot\ntags:\n  - springboot\n  - 源码分析\n---\n\n\n# SpringBoot 启动流程\n\n<br>\n\n- [SpringBoot 启动流程](#springboot-启动流程)\n  - [初始化](#初始化)\n  - [run](#run)\n\n<br>\n\n启动从`SpringApplication.run(MyServiceApplication.class, args);`开始，然后到SpringApplication的静态run方法中new 一个 `SpringApplication`对象并调用它的run方法\n\n```java\n/* SpringApplication */\npublic static ConfigurableApplicationContext run(Class<?>[] primarySources,\n        String[] args) {\n    return new SpringApplication(primarySources).run(args);\n}\n\n```\n\n启动流程可以主要分为两大部分，一部分是初始化 就是创建`SpringApplication`对象，一部分是run。\n\n首先分析初始化的过程.\n\n<br>\n\n-------------\n\n## 初始化\n\n```java\n// resourceLoader = null, primarySource 就是一个class数组，里面存了我们的MyServiceApplication.class\npublic SpringApplication(ResourceLoader resourceLoader, Class<?>... primarySources) {\n    this.resourceLoader = resourceLoader;\n    Assert.notNull(primarySources, \"PrimarySources must not be null\");\n    //将我们启动类（其实是注解类，将来用来扫面该类注解，解析该类）类放在 primarySource 中保存起来\n    this.primarySources = new LinkedHashSet<>(Arrays.asList(primarySources));\n    // 推断WebApplicationType 这里返回SERVLET\n    this.webApplicationType = WebApplicationType.deduceFromClasspath();\n    // 初始化 并设置 initializers\n    setInitializers((Collection) getSpringFactoriesInstances(\n            ApplicationContextInitializer.class));\n    // 初始化 并设置 listeners\n    setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));\n    // 推断 主应用程序的类 也就是我们的main 函数所在的类\n    this.mainApplicationClass = deduceMainApplicationClass();\n}\n\n```\n\n<br>\n\n**推断WebApplicationType**\n\n这里返回的是`SERVLET`，共有以下几种：\n\n- `NONE` The application should not run as a web application and should not start an embedded web server.\n- `SERVLET` The application should run as a servlet-based web application and should start an embedded servlet web server.\n- `REACTIVE` The application should run as a reactive web application and should start an embedded reactive web server.\n\n在我们初始化完成之后，调用run方法之前，也可以去手动指定该type：`setWebApplicationType(webApplicationType)`\n\n<br>\n\n**初始化 并设置 initializers**\n\n根据`META-INF/spring.factories`中存储的映射关系，找到对应类型`org.springframework.context.ApplicationContextInitializer`的类的名字数组，完成初始化并返回。\n\n```java\n/* SpringApplication */\nprivate <T> Collection<T> getSpringFactoriesInstances(Class<T> type,\n        Class<?>[] parameterTypes, Object... args) {\n    ClassLoader classLoader = getClassLoader();\n    // Use names and ensure unique to protect against duplicates\n    // 获取 type 对应的类名数组\n    Set<String> names = new LinkedHashSet<>(\n            SpringFactoriesLoader.loadFactoryNames(type, classLoader));\n    // 实例化\n    List<T> instances = createSpringFactoriesInstances(type, parameterTypes,\n            classLoader, args, names);\n    AnnotationAwareOrderComparator.sort(instances);\n    return instances;\n}\n\n/* \n SpringFactoriesLoader\n 该类就是专门加载 所有 META-INF/spring.factories 配置文件，并将结果缓存起来，并提供了根据类的类型返回类名数组的方法\n */\n\npublic static List<String> loadFactoryNames(Class<?> factoryClass, @Nullable ClassLoader classLoader) {\n    String factoryClassName = factoryClass.getName();\n    // 获取该classloader对应的所有资源中的属性对，并获取 该factoryClass对应的类名组\n    return loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList());\n}\n\n/**\n * 根据classloader 返回该classloader加载的所有资源中 属性对\n */\nprivate static Map<String, List<String>> loadSpringFactories(@Nullable ClassLoader classLoader) {\n    // cache 是用来缓存 扫面出来的结果的\n    // 如果cache 中没找到，也就是该classloader的第一次扫描， 就去扫描\n    MultiValueMap<String, String> result = cache.get(classLoader);\n    if (result != null) {\n        return result;\n    }\n\n    try {\n        // 获取所有的url\n        Enumeration<URL> urls = (classLoader != null ?\n                classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :\n                ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));\n        result = new LinkedMultiValueMap<>();\n        while (urls.hasMoreElements()) {\n            URL url = urls.nextElement();\n            UrlResource resource = new UrlResource(url);\n            Properties properties = PropertiesLoaderUtils.loadProperties(resource);\n            for (Map.Entry<?, ?> entry : properties.entrySet()) {\n                String factoryClassName = ((String) entry.getKey()).trim();\n                for (String factoryName : StringUtils.commaDelimitedListToStringArray((String) entry.getValue())) {\n                    result.add(factoryClassName, factoryName.trim());\n                }\n            }\n        }\n        cache.put(classLoader, result);\n        return result;\n    }\n    catch (IOException ex) {\n        throw new IllegalArgumentException(\"Unable to load factories from location [\" +\n                FACTORIES_RESOURCE_LOCATION + \"]\", ex);\n    }\n}\n\n\n```\n\n比如其中的一个 `META-INFO/spring.factories` 如下：`jar:file:/Users/wuyingjie/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/2.1.0.RELEASE/spring-boot-autoconfigure-2.1.0.RELEASE.jar!/META-INF/spring.factories`\n\n![|center](/note_all/blob/master/images/springboot启动流程-1.png)\n\nresult 也就是扫描出来的所有key和类名数组如下：\n\n![|center](/note_all/blob/master/images/springboot启动流程-2.png)\n\n`org.springframework.context.ApplicationContextInitializer`对应的类有：\n\n![|center](/note_all/blob/master/images/springboot启动流程-3.png)\n\n\n<br>\n\n**初始化 并设置 applicationlisteners**\n\n`org.springframework.context.ApplicationListener` 对应的类有：\n\n![|center](/note_all/blob/master/images/springboot启动流程-4.png)\n\n<br>\n\n**推断 主应用程序的类 也就是我们的main 函数所在的类**\n\n就是根据栈的调用信息，获取main函数所在的栈帧，最后得到类信息\n\n```java\nprivate Class<?> deduceMainApplicationClass() {\n    try {\n        StackTraceElement[] stackTrace = new RuntimeException().getStackTrace();\n        for (StackTraceElement stackTraceElement : stackTrace) {\n            if (\"main\".equals(stackTraceElement.getMethodName())) {\n                return Class.forName(stackTraceElement.getClassName());\n            }\n        }\n    }\n    catch (ClassNotFoundException ex) {\n        // Swallow and continue\n    }\n    return null;\n}\n```\n\n<br>\n\nSpringApplication的初始化到这里也就结束了。\n\n其实也就是在为WebApplicationContext的初始化 做一些准备工作。\n\n<br>\n\n-------------\n\n## run\n\nrun方法代码如下，而且结构非常清晰。\n\n```java\npublic ConfigurableApplicationContext run(String... args) {\n    StopWatch stopWatch = new StopWatch();\n    stopWatch.start();\n    ConfigurableApplicationContext context = null;\n    Collection<SpringBootExceptionReporter> exceptionReporters = new ArrayList<>();\n    configureHeadlessProperty();\n    // 获取 刚刚初始化时 得到的所有listeners\n    SpringApplicationRunListeners listeners = getRunListeners(args);\n    // 发送 ApplicationStartingEvent 事件\n    listeners.starting();\n    try {\n        // 包装 main方法中的传递的参数 \n        ApplicationArguments applicationArguments = new DefaultApplicationArguments(\n                args);\n        // 初始化 环境，并发送 ApplicationEnvironmentPreparedEvent 事件\n        ConfigurableEnvironment environment = prepareEnvironment(listeners,\n                applicationArguments);\n        configureIgnoreBeanInfo(environment);\n        // 打印 banner\n        Banner printedBanner = printBanner(environment);\n        // 根据不同的 WebApplicationType（我们的是SERVLET）创建不同的ApplicationContext对象实例\n        context = createApplicationContext();\n        // 使用 SpringFactoriesLoader 获取 org.springframework.boot.SpringBootExceptionReporter 对应的 exceptionReporters\n        exceptionReporters = getSpringFactoriesInstances(\n                SpringBootExceptionReporter.class,\n                new Class[] { ConfigurableApplicationContext.class }, context);\n        /**\n         * 1. 准备一下context的环境\n         * 2. 调用上文所有 ApplicationContextInitializer.initialize 方法，趁 context 还没有 refresh\n         * 3. 发送 ApplicationContextInitializedEvent 事件\n         * 4. load allResource=resources+primaryResources 这里主要就是 加载主类 MyServiceAppliction\n         * 5. 做了一些 contextLoaded 的工作，主要是 发送 ApplicationPreparedEvent 事件\n         */\n        prepareContext(context, environment, listeners, applicationArguments,\n                printedBanner);\n        // 调用 ApplicationContext 的 refresh 方法\n        refreshContext(context);\n        // 调用 afterRefresh 但其实是个空方法，啥都没干\n        afterRefresh(context, applicationArguments);\n        stopWatch.stop();\n        if (this.logStartupInfo) {\n            new StartupInfoLogger(this.mainApplicationClass)\n                    .logStarted(getApplicationLog(), stopWatch);\n        }\n        // 发送 ApplicationStartedEvent 事件\n        listeners.started(context);\n        callRunners(context, applicationArguments);\n    }\n    catch (Throwable ex) {\n        handleRunFailure(context, ex, exceptionReporters, listeners);\n        throw new IllegalStateException(ex);\n    }\n\n    try {\n        // 发送 ApplicationReadyEvent 事件\n        listeners.running(context);\n    }\n    catch (Throwable ex) {\n        handleRunFailure(context, ex, exceptionReporters, null);\n        throw new IllegalStateException(ex);\n    }\n    return context;\n}\n\n```\n\n整个启动流程 就完成了。\n\n<br>\n\n----------\n\n\n那么下面就仔细的分析每一步具体做了什么。\n\n<br>\n\n**获取listeners 并通知listeners事件**\n\n获取`SpringApplicationRunListeners`的方法如下：\n\n```java\nprivate SpringApplicationRunListeners getRunListeners(String[] args) {\n    Class<?>[] types = new Class<?>[] { SpringApplication.class, String[].class };\n    return new SpringApplicationRunListeners(logger, getSpringFactoriesInstances(\n            SpringApplicationRunListener.class, types, this, args));\n}\n```\n\n还是使用`SpringFactoriesLoader`类从各个 `spring.factories`配置文件中获取。得到的是`SpringApplicationRunListener`所有配置在`spring.factories`中的子类的数组，这里该数组只有一个元素`org.springframework.boot.context.event.EventPublishingRunListener`\n\n首先，我们看下`SpringApplicationRunListener`，该接口提供了Application运行期各个事件的回调，也就是上面所有的事件其实都是这里发的\n\n\n```java\npackage org.springframework.boot;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.core.env.ConfigurableEnvironment;\nimport org.springframework.core.io.support.SpringFactoriesLoader;\n\n/**\n * Listener for the {@link SpringApplication} {@code run} method.\n * {@link SpringApplicationRunListener}s are loaded via the {@link SpringFactoriesLoader}\n * and should declare a public constructor that accepts a {@link SpringApplication}\n * instance and a {@code String[]} of arguments. A new\n * {@link SpringApplicationRunListener} instance will be created for each run.\n *\n * @author Phillip Webb\n * @author Dave Syer\n * @author Andy Wilkinson\n */\npublic interface SpringApplicationRunListener {\n\n\t/**\n\t * Called immediately when the run method has first started. Can be used for very\n\t * early initialization.\n\t */\n\tvoid starting();\n\n\t/**\n\t * Called once the environment has been prepared, but before the\n\t * {@link ApplicationContext} has been created.\n\t * @param environment the environment\n\t */\n\tvoid environmentPrepared(ConfigurableEnvironment environment);\n\n\t/**\n\t * Called once the {@link ApplicationContext} has been created and prepared, but\n\t * before sources have been loaded.\n\t * @param context the application context\n\t */\n\tvoid contextPrepared(ConfigurableApplicationContext context);\n\n\t/**\n\t * Called once the application context has been loaded but before it has been\n\t * refreshed.\n\t * @param context the application context\n\t */\n\tvoid contextLoaded(ConfigurableApplicationContext context);\n\n\t/**\n\t * The context has been refreshed and the application has started but\n\t * {@link CommandLineRunner CommandLineRunners} and {@link ApplicationRunner\n\t * ApplicationRunners} have not been called.\n\t * @param context the application context.\n\t * @since 2.0.0\n\t */\n\tvoid started(ConfigurableApplicationContext context);\n\n\t/**\n\t * Called immediately before the run method finishes, when the application context has\n\t * been refreshed and all {@link CommandLineRunner CommandLineRunners} and\n\t * {@link ApplicationRunner ApplicationRunners} have been called.\n\t * @param context the application context.\n\t * @since 2.0.0\n\t */\n\tvoid running(ConfigurableApplicationContext context);\n\n\t/**\n\t * Called when a failure occurs when running the application.\n\t * @param context the application context or {@code null} if a failure occurred before\n\t * the context was created\n\t * @param exception the failure\n\t * @since 2.0.0\n\t */\n\tvoid failed(ConfigurableApplicationContext context, Throwable exception);\n\n}\n\n```\n\n比如说，我们看看`listeners.starting();`方法\n\n```java\n// SpringApplicationRunListeners\npublic void starting() {\n    for (SpringApplicationRunListener listener : this.listeners) {\n        // 这里就像上面说的 listeners 只有 EventPublishingRunListener 一个对象\n        listener.starting();\n    }\n}\n\n// 我们看EventPublishingRunListener 的starting 方法\n// EventPublishingRunListener\n@Override\npublic void starting() {\n    // 调用初始化广播器 将 事件 ApplicationStartingEvent 广播到所有 listeners\n    this.initialMulticaster.multicastEvent(\n            new ApplicationStartingEvent(this.application, this.args));\n}\n\n// 那么我们再看一下 这个 初始化广播器 initialMulticaster 到底是什么，并广播向了哪些listeners\n// EventPublishingRunListener 的构造方法\npublic EventPublishingRunListener(SpringApplication application, String[] args) {\n    this.application = application;\n    this.args = args;\n    // new 一个新的 SimpleApplicationEventMulticaster\n    this.initialMulticaster = new SimpleApplicationEventMulticaster();\n    // 并将ApplicationContext中所有的listeners 放到 该 广播器中\n    // 这些listeners 就是从 spring.factories中加载的 所有 ApplicationListener.class的子类\n    for (ApplicationListener<?> listener : application.getListeners()) {\n        this.initialMulticaster.addApplicationListener(listener);\n    }\n}\n\n```\n\n广播逻辑，大致就是在所有的listeners中根据event找到合适的能处理该event的listeners，并调用该listener的onApplicationEvent方法\n\n具体的广播逻辑实现方式就不分析了，可以看我的另一篇介绍**`springboot 事件机制`**的文章，\n\n所以，如果我们想要监听SpringApplication运行期间的各种事件，我们就可以实现`SpringApplicationRunListener`，并仔细看接口的注释。\n\n这里主要涉及到三个类：\n\n- `SpringApplicationRunListeners` 类，包含了所有实现了`SpringApplicationRunListener`接口并通过`spring.factories`注册的类。\n- `SpringApplicationRunListener` 接口，定义监听`SpringApplication`运行的回调接口\n- `EventPublishingRunListener` 类，实现了`SpringApplicationRunListener`接口，是通过`SpringFactoriesLoader`加载的唯一实现类。\n\n> 另外，这里的`SpringApplicationRunListeners`中的`SimpleApplicationEventMulticaster`只负责SpringApplication启动过程中的事件发送，也只发送给通过`SpringFactoriesLoader`加载并放在它里面的listeners。我们写的自己的listeners和这些listeners都放在`ApplicationContext`中的listeners，并且由`ApplicationContext`中的`SimpleApplicationEventMulticaster`负责通知（他俩并不是同一个）。\n\n<br>\n\n**创建Environment 和 context**\n\n创建`ConfigurableEnvironment`和`ApplicationContext` 都会根据之前得到的`WebApplicationType`。\n\n```java\nprotected ConfigurableApplicationContext createApplicationContext() {\n    Class<?> contextClass = this.applicationContextClass;\n    if (contextClass == null) {\n        try {\n            switch (this.webApplicationType) {\n            case SERVLET:\n                // AnnotationConfigServletWebServerApplicationContext\n                contextClass = Class.forName(DEFAULT_SERVLET_WEB_CONTEXT_CLASS); \n                break;\n            case REACTIVE:\n                // AnnotationConfigReactiveWebServerApplicationContext\n                contextClass = Class.forName(DEFAULT_REACTIVE_WEB_CONTEXT_CLASS);\n                break;\n            default:\n                // AnnotationConfigApplicationContext\n                contextClass = Class.forName(DEFAULT_CONTEXT_CLASS);\n            }\n        }\n        catch (ClassNotFoundException ex) {\n            throw new IllegalStateException(\n                    \"Unable create a default ApplicationContext, \"\n                            + \"please specify an ApplicationContextClass\",\n                    ex);\n        }\n    }\n    return (ConfigurableApplicationContext) BeanUtils.instantiateClass(contextClass);\n}\n```\n\n<br>\n\n**prepareContext**\n\n```java\nprivate void prepareContext(ConfigurableApplicationContext context,\n        ConfigurableEnvironment environment, SpringApplicationRunListeners listeners,\n        ApplicationArguments applicationArguments, Banner printedBanner) {\n    context.setEnvironment(environment);\n    // 注入基本的类 如，ConversionService\n    postProcessApplicationContext(context);\n    // 调用各个由 SpringFactoriesLoader 加载的 ApplicationContextInitializer 的 initialize方法\n    applyInitializers(context);\n    // 发布ApplicationContextInitializedEvent 事件\n    listeners.contextPrepared(context);\n    if (this.logStartupInfo) {\n        logStartupInfo(context.getParent() == null);\n        logStartupProfileInfo(context);\n    }\n    // Add boot specific singleton beans\n    ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();\n    beanFactory.registerSingleton(\"springApplicationArguments\", applicationArguments);\n    if (printedBanner != null) {\n        beanFactory.registerSingleton(\"springBootBanner\", printedBanner);\n    }\n    if (beanFactory instanceof DefaultListableBeanFactory) {\n        ((DefaultListableBeanFactory) beanFactory)\n                .setAllowBeanDefinitionOverriding(this.allowBeanDefinitionOverriding);\n    }\n    // Load the sources\n    Set<Object> sources = getAllSources();\n    Assert.notEmpty(sources, \"Sources must not be empty\");\n    // 这里只加载了 我们的主类 MyServiceApplication\n    load(context, sources.toArray(new Object[0]));\n    //1. 如果这些listeners 实现了 ApplicationContextAware 接口，则将ApplicationContext set进去，因为这时候ApplicationContext已经准备好了，而且 这些已经实例化过了，之后也不会收到通知了。\n    //2. 发送 ApplicationPreparedEvent 事件\n    listeners.contextLoaded(context);\n}\n```\n\n<br>\n\n**refresh**\n\n这里还需要着重说一下refresh方法。\n\n上面的load方法只加载了根类 `MyServiceApplication`，而该类下的所有有注解的并没有加载，实际的加载是在refresh的过程中实现的。\n```java\n// AbstractApplicationContext\npublic void refresh() throws BeansException, IllegalStateException {\n    synchronized (this.startupShutdownMonitor) {\n        // Prepare this context for refreshing.\n        prepareRefresh();\n        ...\n        invokeBeanFactoryPostProcessors(beanFactory);\n        ...\n    }\n}\n\n// 最后委托给了 PostProcessorRegistrationDelegate \npublic static void invokeBeanFactoryPostProcessors(\n    ConfigurableListableBeanFactory beanFactory, List<BeanFactoryPostProcessor> beanFactoryPostProcessors) {\n\n    // 首先，需要明白，BeanFactoryPostProcessor 有两个来源，一个是 传进来的，另外一个是 从BeanFactory中拿到的。\n\n    // 代码就省了 写下大致逻辑，也是比较简单的\n\n    if (beanFactory instanceof BeanDefinitionRegistry) {\n        // 如果是一个可以注册的BeanFactory，\n        \n        /*\n         1. 从参数中的 beanFactoryPostProcessors 中找实现 BeanDefinitionRegistryPostProcessor接口的 并调用该方法\n         2. 调用BeanFactory中的BeanDefinitionRegistryPostProcessor接口\n         3. 调用 BeanDefinitionRegistryPostProcessor接口的 BeanFactoryPostProcessors 的接口方法\n         4. 调用 参数中的 BeanFactoryPostProcessors 接口的方法\n        */\n\n    } else {\n        // 如果不可以注册bean\n\n        // 调用所有参数的 BeanFactoryPostProcessors 接口方法\n    }\n\n    //调用 beanFactory中的 BeanFactoryPostProcessors 接口方法\n}\n```\n\n而 SpringBoot 自动装配，去解析根类中的注解并注入bean的过程就发生在 `BeanDefinitionRegistryPostProcessor`的调用过程中。\n\n具体实现的类是`ConfigurationClassPostProcessor`。 具体过程还是挺复杂的，之后可以详细分析。\n\nrefresh 方法也是非常重要的，但是不是本文的重点，具体可以去百度。\n\n> 这里是主要的`BeanFactoryPostProcessor`的来源，但是还有一些来自 `ApplicationContextInitializer`实现类，在调用回调方法时注入的几个（他这么着急注入是要早点用？可是哪里都没有调用啊。。 可能是一些需要提前获取的bean在getBean方法的时候会回调这些早早就初始化好的`BeanFactoryPostProcessor`）。\n\n> 另外，`BeanPostProcessor`也是有一些需要提前注册好的。\b还有一些Bean，比如说`spring.factories`中注册的bean，还有回调或者初始化其他类的时候增加的一些BeanDefinition。如在实例化`AnnotationConfigServletWebServerApplicationContext`会创建`AnnotatedBeanDefinitionReader`对象，在实例化该对象的时候，会像BeanFactory中注册Annotion方式的BeanRegistry所必须用到的几个类，比如说`ConfigurationClassPostProcessor`，`AutowiredAnnotationBeanPostProcessor`，`CommonAnnotationBeanPostProcessor`等等吧。\n\n\n<br>\n\n再之后，除了还是`SpringApplicationRunListeners`的回调，还有一个`callRunners`方法。\n\n<br>\n\n**callRunners**\n\n```java\nprivate void callRunners(ApplicationContext context, ApplicationArguments args) {\n    List<Object> runners = new ArrayList<>();\n    runners.addAll(context.getBeansOfType(ApplicationRunner.class).values());\n    runners.addAll(context.getBeansOfType(CommandLineRunner.class).values());\n    AnnotationAwareOrderComparator.sort(runners);\n    for (Object runner : new LinkedHashSet<>(runners)) {\n        if (runner instanceof ApplicationRunner) {\n            callRunner((ApplicationRunner) runner, args);\n        }\n        if (runner instanceof CommandLineRunner) {\n            callRunner((CommandLineRunner) runner, args);\n        }\n    }\n}   \n```\n\n主要就是回调以下两个接口，对我们运行时传入的参数 加上自己的处理（如果有需要的话）：\n- `ApplicationRunner` 接收由`ApplicationArguments`包装之后的参数\n- `CommandLineRunner` 接收原始运行程序传入的参数\n\n例子 网上一百度 就有了。比如说：[CommandLineRunner或者ApplicationRunner接口](https://www.jianshu.com/p/5d4ffe267596)","slug":"springboot启动流程","published":1,"date":"2019-02-14T09:58:01.011Z","updated":"2019-02-14T09:59:21.324Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt9ymrwx000ilf6vo3dcbydk","content":"<h1 id=\"SpringBoot-启动流程\"><a href=\"#SpringBoot-启动流程\" class=\"headerlink\" title=\"SpringBoot 启动流程\"></a>SpringBoot 启动流程</h1><p><br></p>\n<ul>\n<li><a href=\"#springboot-启动流程\">SpringBoot 启动流程</a><ul>\n<li><a href=\"#初始化\">初始化</a></li>\n<li><a href=\"#run\">run</a></li>\n</ul>\n</li>\n</ul>\n<p><br></p>\n<p>启动从<code>SpringApplication.run(MyServiceApplication.class, args);</code>开始，然后到SpringApplication的静态run方法中new 一个 <code>SpringApplication</code>对象并调用它的run方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* SpringApplication */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ConfigurableApplicationContext <span class=\"title\">run</span><span class=\"params\">(Class&lt;?&gt;[] primarySources,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SpringApplication(primarySources).run(args);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动流程可以主要分为两大部分，一部分是初始化 就是创建<code>SpringApplication</code>对象，一部分是run。</p>\n<p>首先分析初始化的过程.</p>\n<p><br></p>\n<hr>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// resourceLoader = null, primarySource 就是一个class数组，里面存了我们的MyServiceApplication.class</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SpringApplication</span><span class=\"params\">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.resourceLoader = resourceLoader;</span><br><span class=\"line\">    Assert.notNull(primarySources, <span class=\"string\">\"PrimarySources must not be null\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//将我们启动类（其实是注解类，将来用来扫面该类注解，解析该类）类放在 primarySource 中保存起来</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.primarySources = <span class=\"keyword\">new</span> LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));</span><br><span class=\"line\">    <span class=\"comment\">// 推断WebApplicationType 这里返回SERVLET</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class=\"line\">    <span class=\"comment\">// 初始化 并设置 initializers</span></span><br><span class=\"line\">    setInitializers((Collection) getSpringFactoriesInstances(</span><br><span class=\"line\">            ApplicationContextInitializer.class));</span><br><span class=\"line\">    <span class=\"comment\">// 初始化 并设置 listeners</span></span><br><span class=\"line\">    setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class=\"line\">    <span class=\"comment\">// 推断 主应用程序的类 也就是我们的main 函数所在的类</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><strong>推断WebApplicationType</strong></p>\n<p>这里返回的是<code>SERVLET</code>，共有以下几种：</p>\n<ul>\n<li><code>NONE</code> The application should not run as a web application and should not start an embedded web server.</li>\n<li><code>SERVLET</code> The application should run as a servlet-based web application and should start an embedded servlet web server.</li>\n<li><code>REACTIVE</code> The application should run as a reactive web application and should start an embedded reactive web server.</li>\n</ul>\n<p>在我们初始化完成之后，调用run方法之前，也可以去手动指定该type：<code>setWebApplicationType(webApplicationType)</code></p>\n<p><br></p>\n<p><strong>初始化 并设置 initializers</strong></p>\n<p>根据<code>META-INF/spring.factories</code>中存储的映射关系，找到对应类型<code>org.springframework.context.ApplicationContextInitializer</code>的类的名字数组，完成初始化并返回。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* SpringApplication */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> &lt;T&gt; <span class=\"function\">Collection&lt;T&gt; <span class=\"title\">getSpringFactoriesInstances</span><span class=\"params\">(Class&lt;T&gt; type,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        Class&lt;?&gt;[] parameterTypes, Object... args)</span> </span>&#123;</span><br><span class=\"line\">    ClassLoader classLoader = getClassLoader();</span><br><span class=\"line\">    <span class=\"comment\">// Use names and ensure unique to protect against duplicates</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取 type 对应的类名数组</span></span><br><span class=\"line\">    Set&lt;String&gt; names = <span class=\"keyword\">new</span> LinkedHashSet&lt;&gt;(</span><br><span class=\"line\">            SpringFactoriesLoader.loadFactoryNames(type, classLoader));</span><br><span class=\"line\">    <span class=\"comment\">// 实例化</span></span><br><span class=\"line\">    List&lt;T&gt; instances = createSpringFactoriesInstances(type, parameterTypes,</span><br><span class=\"line\">            classLoader, args, names);</span><br><span class=\"line\">    AnnotationAwareOrderComparator.sort(instances);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> instances;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> SpringFactoriesLoader</span></span><br><span class=\"line\"><span class=\"comment\"> 该类就是专门加载 所有 META-INF/spring.factories 配置文件，并将结果缓存起来，并提供了根据类的类型返回类名数组的方法</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">loadFactoryNames</span><span class=\"params\">(Class&lt;?&gt; factoryClass, @Nullable ClassLoader classLoader)</span> </span>&#123;</span><br><span class=\"line\">    String factoryClassName = factoryClass.getName();</span><br><span class=\"line\">    <span class=\"comment\">// 获取该classloader对应的所有资源中的属性对，并获取 该factoryClass对应的类名组</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据classloader 返回该classloader加载的所有资源中 属性对</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(<span class=\"meta\">@Nullable</span> ClassLoader classLoader) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// cache 是用来缓存 扫面出来的结果的</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果cache 中没找到，也就是该classloader的第一次扫描， 就去扫描</span></span><br><span class=\"line\">    MultiValueMap&lt;String, String&gt; result = cache.get(classLoader);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取所有的url</span></span><br><span class=\"line\">        Enumeration&lt;URL&gt; urls = (classLoader != <span class=\"keyword\">null</span> ?</span><br><span class=\"line\">                classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :</span><br><span class=\"line\">                ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));</span><br><span class=\"line\">        result = <span class=\"keyword\">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (urls.hasMoreElements()) &#123;</span><br><span class=\"line\">            URL url = urls.nextElement();</span><br><span class=\"line\">            UrlResource resource = <span class=\"keyword\">new</span> UrlResource(url);</span><br><span class=\"line\">            Properties properties = PropertiesLoaderUtils.loadProperties(resource);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Map.Entry&lt;?, ?&gt; entry : properties.entrySet()) &#123;</span><br><span class=\"line\">                String factoryClassName = ((String) entry.getKey()).trim();</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (String factoryName : StringUtils.commaDelimitedListToStringArray((String) entry.getValue())) &#123;</span><br><span class=\"line\">                    result.add(factoryClassName, factoryName.trim());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cache.put(classLoader, result);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (IOException ex) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Unable to load factories from location [\"</span> +</span><br><span class=\"line\">                FACTORIES_RESOURCE_LOCATION + <span class=\"string\">\"]\"</span>, ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>比如其中的一个 <code>META-INFO/spring.factories</code> 如下：<code>jar:file:/Users/wuyingjie/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/2.1.0.RELEASE/spring-boot-autoconfigure-2.1.0.RELEASE.jar!/META-INF/spring.factories</code></p>\n<p><img src=\"/note_all/blob/master/images/springboot启动流程-1.png\" alt=\"|center\"></p>\n<p>result 也就是扫描出来的所有key和类名数组如下：</p>\n<p><img src=\"/note_all/blob/master/images/springboot启动流程-2.png\" alt=\"|center\"></p>\n<p><code>org.springframework.context.ApplicationContextInitializer</code>对应的类有：</p>\n<p><img src=\"/note_all/blob/master/images/springboot启动流程-3.png\" alt=\"|center\"></p>\n<p><br></p>\n<p><strong>初始化 并设置 applicationlisteners</strong></p>\n<p><code>org.springframework.context.ApplicationListener</code> 对应的类有：</p>\n<p><img src=\"/note_all/blob/master/images/springboot启动流程-4.png\" alt=\"|center\"></p>\n<p><br></p>\n<p><strong>推断 主应用程序的类 也就是我们的main 函数所在的类</strong></p>\n<p>就是根据栈的调用信息，获取main函数所在的栈帧，最后得到类信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Class&lt;?&gt; deduceMainApplicationClass() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        StackTraceElement[] stackTrace = <span class=\"keyword\">new</span> RuntimeException().getStackTrace();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (StackTraceElement stackTraceElement : stackTrace) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"string\">\"main\"</span>.equals(stackTraceElement.getMethodName())) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> Class.forName(stackTraceElement.getClassName());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Swallow and continue</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p>SpringApplication的初始化到这里也就结束了。</p>\n<p>其实也就是在为WebApplicationContext的初始化 做一些准备工作。</p>\n<p><br></p>\n<hr>\n<h2 id=\"run\"><a href=\"#run\" class=\"headerlink\" title=\"run\"></a>run</h2><p>run方法代码如下，而且结构非常清晰。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ConfigurableApplicationContext <span class=\"title\">run</span><span class=\"params\">(String... args)</span> </span>&#123;</span><br><span class=\"line\">    StopWatch stopWatch = <span class=\"keyword\">new</span> StopWatch();</span><br><span class=\"line\">    stopWatch.start();</span><br><span class=\"line\">    ConfigurableApplicationContext context = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    configureHeadlessProperty();</span><br><span class=\"line\">    <span class=\"comment\">// 获取 刚刚初始化时 得到的所有listeners</span></span><br><span class=\"line\">    SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class=\"line\">    <span class=\"comment\">// 发送 ApplicationStartingEvent 事件</span></span><br><span class=\"line\">    listeners.starting();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 包装 main方法中的传递的参数 </span></span><br><span class=\"line\">        ApplicationArguments applicationArguments = <span class=\"keyword\">new</span> DefaultApplicationArguments(</span><br><span class=\"line\">                args);</span><br><span class=\"line\">        <span class=\"comment\">// 初始化 环境，并发送 ApplicationEnvironmentPreparedEvent 事件</span></span><br><span class=\"line\">        ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class=\"line\">                applicationArguments);</span><br><span class=\"line\">        configureIgnoreBeanInfo(environment);</span><br><span class=\"line\">        <span class=\"comment\">// 打印 banner</span></span><br><span class=\"line\">        Banner printedBanner = printBanner(environment);</span><br><span class=\"line\">        <span class=\"comment\">// 根据不同的 WebApplicationType（我们的是SERVLET）创建不同的ApplicationContext对象实例</span></span><br><span class=\"line\">        context = createApplicationContext();</span><br><span class=\"line\">        <span class=\"comment\">// 使用 SpringFactoriesLoader 获取 org.springframework.boot.SpringBootExceptionReporter 对应的 exceptionReporters</span></span><br><span class=\"line\">        exceptionReporters = getSpringFactoriesInstances(</span><br><span class=\"line\">                SpringBootExceptionReporter.class,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> Class[] &#123; ConfigurableApplicationContext.class &#125;, context);</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 1. 准备一下context的环境</span></span><br><span class=\"line\"><span class=\"comment\">         * 2. 调用上文所有 ApplicationContextInitializer.initialize 方法，趁 context 还没有 refresh</span></span><br><span class=\"line\"><span class=\"comment\">         * 3. 发送 ApplicationContextInitializedEvent 事件</span></span><br><span class=\"line\"><span class=\"comment\">         * 4. load allResource=resources+primaryResources 这里主要就是 加载主类 MyServiceAppliction</span></span><br><span class=\"line\"><span class=\"comment\">         * 5. 做了一些 contextLoaded 的工作，主要是 发送 ApplicationPreparedEvent 事件</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        prepareContext(context, environment, listeners, applicationArguments,</span><br><span class=\"line\">                printedBanner);</span><br><span class=\"line\">        <span class=\"comment\">// 调用 ApplicationContext 的 refresh 方法</span></span><br><span class=\"line\">        refreshContext(context);</span><br><span class=\"line\">        <span class=\"comment\">// 调用 afterRefresh 但其实是个空方法，啥都没干</span></span><br><span class=\"line\">        afterRefresh(context, applicationArguments);</span><br><span class=\"line\">        stopWatch.stop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.logStartupInfo) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> StartupInfoLogger(<span class=\"keyword\">this</span>.mainApplicationClass)</span><br><span class=\"line\">                    .logStarted(getApplicationLog(), stopWatch);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 发送 ApplicationStartedEvent 事件</span></span><br><span class=\"line\">        listeners.started(context);</span><br><span class=\"line\">        callRunners(context, applicationArguments);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">        handleRunFailure(context, ex, exceptionReporters, listeners);</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 发送 ApplicationReadyEvent 事件</span></span><br><span class=\"line\">        listeners.running(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">        handleRunFailure(context, ex, exceptionReporters, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> context;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>整个启动流程 就完成了。</p>\n<p><br></p>\n<hr>\n<p>那么下面就仔细的分析每一步具体做了什么。</p>\n<p><br></p>\n<p><strong>获取listeners 并通知listeners事件</strong></p>\n<p>获取<code>SpringApplicationRunListeners</code>的方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> SpringApplicationRunListeners <span class=\"title\">getRunListeners</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Class&lt;?&gt;[] types = <span class=\"keyword\">new</span> Class&lt;?&gt;[] &#123; SpringApplication.class, String[].class &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SpringApplicationRunListeners(logger, getSpringFactoriesInstances(</span><br><span class=\"line\">            SpringApplicationRunListener.class, types, <span class=\"keyword\">this</span>, args));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>还是使用<code>SpringFactoriesLoader</code>类从各个 <code>spring.factories</code>配置文件中获取。得到的是<code>SpringApplicationRunListener</code>所有配置在<code>spring.factories</code>中的子类的数组，这里该数组只有一个元素<code>org.springframework.boot.context.event.EventPublishingRunListener</code></p>\n<p>首先，我们看下<code>SpringApplicationRunListener</code>，该接口提供了Application运行期各个事件的回调，也就是上面所有的事件其实都是这里发的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.springframework.boot;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.env.ConfigurableEnvironment;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.io.support.SpringFactoriesLoader;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Listener for the &#123;<span class=\"doctag\">@link</span> SpringApplication&#125; &#123;<span class=\"doctag\">@code</span> run&#125; method.</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> SpringApplicationRunListener&#125;s are loaded via the &#123;<span class=\"doctag\">@link</span> SpringFactoriesLoader&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * and should declare a public constructor that accepts a &#123;<span class=\"doctag\">@link</span> SpringApplication&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * instance and a &#123;<span class=\"doctag\">@code</span> String[]&#125; of arguments. A new</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> SpringApplicationRunListener&#125; instance will be created for each run.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Phillip Webb</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Dave Syer</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Andy Wilkinson</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">SpringApplicationRunListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Called immediately when the run method has first started. Can be used for very</span></span><br><span class=\"line\"><span class=\"comment\">\t * early initialization.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">starting</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Called once the environment has been prepared, but before the</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@link</span> ApplicationContext&#125; has been created.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> environment the environment</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">environmentPrepared</span><span class=\"params\">(ConfigurableEnvironment environment)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Called once the &#123;<span class=\"doctag\">@link</span> ApplicationContext&#125; has been created and prepared, but</span></span><br><span class=\"line\"><span class=\"comment\">\t * before sources have been loaded.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> context the application context</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">contextPrepared</span><span class=\"params\">(ConfigurableApplicationContext context)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Called once the application context has been loaded but before it has been</span></span><br><span class=\"line\"><span class=\"comment\">\t * refreshed.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> context the application context</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">contextLoaded</span><span class=\"params\">(ConfigurableApplicationContext context)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * The context has been refreshed and the application has started but</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@link</span> CommandLineRunner CommandLineRunners&#125; and &#123;<span class=\"doctag\">@link</span> ApplicationRunner</span></span><br><span class=\"line\"><span class=\"comment\">\t * ApplicationRunners&#125; have not been called.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> context the application context.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@since</span> 2.0.0</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">started</span><span class=\"params\">(ConfigurableApplicationContext context)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Called immediately before the run method finishes, when the application context has</span></span><br><span class=\"line\"><span class=\"comment\">\t * been refreshed and all &#123;<span class=\"doctag\">@link</span> CommandLineRunner CommandLineRunners&#125; and</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@link</span> ApplicationRunner ApplicationRunners&#125; have been called.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> context the application context.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@since</span> 2.0.0</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">running</span><span class=\"params\">(ConfigurableApplicationContext context)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Called when a failure occurs when running the application.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> context the application context or &#123;<span class=\"doctag\">@code</span> null&#125; if a failure occurred before</span></span><br><span class=\"line\"><span class=\"comment\">\t * the context was created</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> exception the failure</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@since</span> 2.0.0</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">failed</span><span class=\"params\">(ConfigurableApplicationContext context, Throwable exception)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>比如说，我们看看<code>listeners.starting();</code>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SpringApplicationRunListeners</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">starting</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (SpringApplicationRunListener listener : <span class=\"keyword\">this</span>.listeners) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里就像上面说的 listeners 只有 EventPublishingRunListener 一个对象</span></span><br><span class=\"line\">        listener.starting();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 我们看EventPublishingRunListener 的starting 方法</span></span><br><span class=\"line\"><span class=\"comment\">// EventPublishingRunListener</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">starting</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用初始化广播器 将 事件 ApplicationStartingEvent 广播到所有 listeners</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.initialMulticaster.multicastEvent(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> ApplicationStartingEvent(<span class=\"keyword\">this</span>.application, <span class=\"keyword\">this</span>.args));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 那么我们再看一下 这个 初始化广播器 initialMulticaster 到底是什么，并广播向了哪些listeners</span></span><br><span class=\"line\"><span class=\"comment\">// EventPublishingRunListener 的构造方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">EventPublishingRunListener</span><span class=\"params\">(SpringApplication application, String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.application = application;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.args = args;</span><br><span class=\"line\">    <span class=\"comment\">// new 一个新的 SimpleApplicationEventMulticaster</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.initialMulticaster = <span class=\"keyword\">new</span> SimpleApplicationEventMulticaster();</span><br><span class=\"line\">    <span class=\"comment\">// 并将ApplicationContext中所有的listeners 放到 该 广播器中</span></span><br><span class=\"line\">    <span class=\"comment\">// 这些listeners 就是从 spring.factories中加载的 所有 ApplicationListener.class的子类</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ApplicationListener&lt;?&gt; listener : application.getListeners()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.initialMulticaster.addApplicationListener(listener);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>广播逻辑，大致就是在所有的listeners中根据event找到合适的能处理该event的listeners，并调用该listener的onApplicationEvent方法</p>\n<p>具体的广播逻辑实现方式就不分析了，可以看我的另一篇介绍<strong><code>springboot 事件机制</code></strong>的文章，</p>\n<p>所以，如果我们想要监听SpringApplication运行期间的各种事件，我们就可以实现<code>SpringApplicationRunListener</code>，并仔细看接口的注释。</p>\n<p>这里主要涉及到三个类：</p>\n<ul>\n<li><code>SpringApplicationRunListeners</code> 类，包含了所有实现了<code>SpringApplicationRunListener</code>接口并通过<code>spring.factories</code>注册的类。</li>\n<li><code>SpringApplicationRunListener</code> 接口，定义监听<code>SpringApplication</code>运行的回调接口</li>\n<li><code>EventPublishingRunListener</code> 类，实现了<code>SpringApplicationRunListener</code>接口，是通过<code>SpringFactoriesLoader</code>加载的唯一实现类。</li>\n</ul>\n<blockquote>\n<p>另外，这里的<code>SpringApplicationRunListeners</code>中的<code>SimpleApplicationEventMulticaster</code>只负责SpringApplication启动过程中的事件发送，也只发送给通过<code>SpringFactoriesLoader</code>加载并放在它里面的listeners。我们写的自己的listeners和这些listeners都放在<code>ApplicationContext</code>中的listeners，并且由<code>ApplicationContext</code>中的<code>SimpleApplicationEventMulticaster</code>负责通知（他俩并不是同一个）。</p>\n</blockquote>\n<p><br></p>\n<p><strong>创建Environment 和 context</strong></p>\n<p>创建<code>ConfigurableEnvironment</code>和<code>ApplicationContext</code> 都会根据之前得到的<code>WebApplicationType</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> ConfigurableApplicationContext <span class=\"title\">createApplicationContext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Class&lt;?&gt; contextClass = <span class=\"keyword\">this</span>.applicationContextClass;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (contextClass == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (<span class=\"keyword\">this</span>.webApplicationType) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> SERVLET:</span><br><span class=\"line\">                <span class=\"comment\">// AnnotationConfigServletWebServerApplicationContext</span></span><br><span class=\"line\">                contextClass = Class.forName(DEFAULT_SERVLET_WEB_CONTEXT_CLASS); </span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> REACTIVE:</span><br><span class=\"line\">                <span class=\"comment\">// AnnotationConfigReactiveWebServerApplicationContext</span></span><br><span class=\"line\">                contextClass = Class.forName(DEFAULT_REACTIVE_WEB_CONTEXT_CLASS);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"comment\">// AnnotationConfigApplicationContext</span></span><br><span class=\"line\">                contextClass = Class.forName(DEFAULT_CONTEXT_CLASS);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(</span><br><span class=\"line\">                    <span class=\"string\">\"Unable create a default ApplicationContext, \"</span></span><br><span class=\"line\">                            + <span class=\"string\">\"please specify an ApplicationContextClass\"</span>,</span><br><span class=\"line\">                    ex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (ConfigurableApplicationContext) BeanUtils.instantiateClass(contextClass);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><strong>prepareContext</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">prepareContext</span><span class=\"params\">(ConfigurableApplicationContext context,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        ConfigurableEnvironment environment, SpringApplicationRunListeners listeners,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        ApplicationArguments applicationArguments, Banner printedBanner)</span> </span>&#123;</span><br><span class=\"line\">    context.setEnvironment(environment);</span><br><span class=\"line\">    <span class=\"comment\">// 注入基本的类 如，ConversionService</span></span><br><span class=\"line\">    postProcessApplicationContext(context);</span><br><span class=\"line\">    <span class=\"comment\">// 调用各个由 SpringFactoriesLoader 加载的 ApplicationContextInitializer 的 initialize方法</span></span><br><span class=\"line\">    applyInitializers(context);</span><br><span class=\"line\">    <span class=\"comment\">// 发布ApplicationContextInitializedEvent 事件</span></span><br><span class=\"line\">    listeners.contextPrepared(context);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.logStartupInfo) &#123;</span><br><span class=\"line\">        logStartupInfo(context.getParent() == <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        logStartupProfileInfo(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Add boot specific singleton beans</span></span><br><span class=\"line\">    ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();</span><br><span class=\"line\">    beanFactory.registerSingleton(<span class=\"string\">\"springApplicationArguments\"</span>, applicationArguments);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (printedBanner != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        beanFactory.registerSingleton(<span class=\"string\">\"springBootBanner\"</span>, printedBanner);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (beanFactory <span class=\"keyword\">instanceof</span> DefaultListableBeanFactory) &#123;</span><br><span class=\"line\">        ((DefaultListableBeanFactory) beanFactory)</span><br><span class=\"line\">                .setAllowBeanDefinitionOverriding(<span class=\"keyword\">this</span>.allowBeanDefinitionOverriding);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Load the sources</span></span><br><span class=\"line\">    Set&lt;Object&gt; sources = getAllSources();</span><br><span class=\"line\">    Assert.notEmpty(sources, <span class=\"string\">\"Sources must not be empty\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 这里只加载了 我们的主类 MyServiceApplication</span></span><br><span class=\"line\">    load(context, sources.toArray(<span class=\"keyword\">new</span> Object[<span class=\"number\">0</span>]));</span><br><span class=\"line\">    <span class=\"comment\">//1. 如果这些listeners 实现了 ApplicationContextAware 接口，则将ApplicationContext set进去，因为这时候ApplicationContext已经准备好了，而且 这些已经实例化过了，之后也不会收到通知了。</span></span><br><span class=\"line\">    <span class=\"comment\">//2. 发送 ApplicationPreparedEvent 事件</span></span><br><span class=\"line\">    listeners.contextLoaded(context);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><strong>refresh</strong></p>\n<p>这里还需要着重说一下refresh方法。</p>\n<p>上面的load方法只加载了根类 <code>MyServiceApplication</code>，而该类下的所有有注解的并没有加载，实际的加载是在refresh的过程中实现的。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AbstractApplicationContext</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">refresh</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.startupShutdownMonitor) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Prepare this context for refreshing.</span></span><br><span class=\"line\">        prepareRefresh();</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 最后委托给了 PostProcessorRegistrationDelegate </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">invokeBeanFactoryPostProcessors</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    ConfigurableListableBeanFactory beanFactory, List&lt;BeanFactoryPostProcessor&gt; beanFactoryPostProcessors)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 首先，需要明白，BeanFactoryPostProcessor 有两个来源，一个是 传进来的，另外一个是 从BeanFactory中拿到的。</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 代码就省了 写下大致逻辑，也是比较简单的</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (beanFactory <span class=\"keyword\">instanceof</span> BeanDefinitionRegistry) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果是一个可以注册的BeanFactory，</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         1. 从参数中的 beanFactoryPostProcessors 中找实现 BeanDefinitionRegistryPostProcessor接口的 并调用该方法</span></span><br><span class=\"line\"><span class=\"comment\">         2. 调用BeanFactory中的BeanDefinitionRegistryPostProcessor接口</span></span><br><span class=\"line\"><span class=\"comment\">         3. 调用 BeanDefinitionRegistryPostProcessor接口的 BeanFactoryPostProcessors 的接口方法</span></span><br><span class=\"line\"><span class=\"comment\">         4. 调用 参数中的 BeanFactoryPostProcessors 接口的方法</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果不可以注册bean</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 调用所有参数的 BeanFactoryPostProcessors 接口方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//调用 beanFactory中的 BeanFactoryPostProcessors 接口方法</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>而 SpringBoot 自动装配，去解析根类中的注解并注入bean的过程就发生在 <code>BeanDefinitionRegistryPostProcessor</code>的调用过程中。</p>\n<p>具体实现的类是<code>ConfigurationClassPostProcessor</code>。 具体过程还是挺复杂的，之后可以详细分析。</p>\n<p>refresh 方法也是非常重要的，但是不是本文的重点，具体可以去百度。</p>\n<blockquote>\n<p>这里是主要的<code>BeanFactoryPostProcessor</code>的来源，但是还有一些来自 <code>ApplicationContextInitializer</code>实现类，在调用回调方法时注入的几个（他这么着急注入是要早点用？可是哪里都没有调用啊。。 可能是一些需要提前获取的bean在getBean方法的时候会回调这些早早就初始化好的<code>BeanFactoryPostProcessor</code>）。</p>\n</blockquote>\n<blockquote>\n<p>另外，<code>BeanPostProcessor</code>也是有一些需要提前注册好的。\b还有一些Bean，比如说<code>spring.factories</code>中注册的bean，还有回调或者初始化其他类的时候增加的一些BeanDefinition。如在实例化<code>AnnotationConfigServletWebServerApplicationContext</code>会创建<code>AnnotatedBeanDefinitionReader</code>对象，在实例化该对象的时候，会像BeanFactory中注册Annotion方式的BeanRegistry所必须用到的几个类，比如说<code>ConfigurationClassPostProcessor</code>，<code>AutowiredAnnotationBeanPostProcessor</code>，<code>CommonAnnotationBeanPostProcessor</code>等等吧。</p>\n</blockquote>\n<p><br></p>\n<p>再之后，除了还是<code>SpringApplicationRunListeners</code>的回调，还有一个<code>callRunners</code>方法。</p>\n<p><br></p>\n<p><strong>callRunners</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">callRunners</span><span class=\"params\">(ApplicationContext context, ApplicationArguments args)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Object&gt; runners = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    runners.addAll(context.getBeansOfType(ApplicationRunner.class).values());</span><br><span class=\"line\">    runners.addAll(context.getBeansOfType(CommandLineRunner.class).values());</span><br><span class=\"line\">    AnnotationAwareOrderComparator.sort(runners);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Object runner : <span class=\"keyword\">new</span> LinkedHashSet&lt;&gt;(runners)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (runner <span class=\"keyword\">instanceof</span> ApplicationRunner) &#123;</span><br><span class=\"line\">            callRunner((ApplicationRunner) runner, args);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (runner <span class=\"keyword\">instanceof</span> CommandLineRunner) &#123;</span><br><span class=\"line\">            callRunner((CommandLineRunner) runner, args);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>主要就是回调以下两个接口，对我们运行时传入的参数 加上自己的处理（如果有需要的话）：</p>\n<ul>\n<li><code>ApplicationRunner</code> 接收由<code>ApplicationArguments</code>包装之后的参数</li>\n<li><code>CommandLineRunner</code> 接收原始运行程序传入的参数</li>\n</ul>\n<p>例子 网上一百度 就有了。比如说：<a href=\"https://www.jianshu.com/p/5d4ffe267596\" target=\"_blank\" rel=\"noopener\">CommandLineRunner或者ApplicationRunner接口</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringBoot-启动流程\"><a href=\"#SpringBoot-启动流程\" class=\"headerlink\" title=\"SpringBoot 启动流程\"></a>SpringBoot 启动流程</h1><p><br></p>\n<ul>\n<li><a href=\"#springboot-启动流程\">SpringBoot 启动流程</a><ul>\n<li><a href=\"#初始化\">初始化</a></li>\n<li><a href=\"#run\">run</a></li>\n</ul>\n</li>\n</ul>\n<p><br></p>\n<p>启动从<code>SpringApplication.run(MyServiceApplication.class, args);</code>开始，然后到SpringApplication的静态run方法中new 一个 <code>SpringApplication</code>对象并调用它的run方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* SpringApplication */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ConfigurableApplicationContext <span class=\"title\">run</span><span class=\"params\">(Class&lt;?&gt;[] primarySources,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SpringApplication(primarySources).run(args);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动流程可以主要分为两大部分，一部分是初始化 就是创建<code>SpringApplication</code>对象，一部分是run。</p>\n<p>首先分析初始化的过程.</p>\n<p><br></p>\n<hr>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// resourceLoader = null, primarySource 就是一个class数组，里面存了我们的MyServiceApplication.class</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SpringApplication</span><span class=\"params\">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.resourceLoader = resourceLoader;</span><br><span class=\"line\">    Assert.notNull(primarySources, <span class=\"string\">\"PrimarySources must not be null\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//将我们启动类（其实是注解类，将来用来扫面该类注解，解析该类）类放在 primarySource 中保存起来</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.primarySources = <span class=\"keyword\">new</span> LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));</span><br><span class=\"line\">    <span class=\"comment\">// 推断WebApplicationType 这里返回SERVLET</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class=\"line\">    <span class=\"comment\">// 初始化 并设置 initializers</span></span><br><span class=\"line\">    setInitializers((Collection) getSpringFactoriesInstances(</span><br><span class=\"line\">            ApplicationContextInitializer.class));</span><br><span class=\"line\">    <span class=\"comment\">// 初始化 并设置 listeners</span></span><br><span class=\"line\">    setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class=\"line\">    <span class=\"comment\">// 推断 主应用程序的类 也就是我们的main 函数所在的类</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><strong>推断WebApplicationType</strong></p>\n<p>这里返回的是<code>SERVLET</code>，共有以下几种：</p>\n<ul>\n<li><code>NONE</code> The application should not run as a web application and should not start an embedded web server.</li>\n<li><code>SERVLET</code> The application should run as a servlet-based web application and should start an embedded servlet web server.</li>\n<li><code>REACTIVE</code> The application should run as a reactive web application and should start an embedded reactive web server.</li>\n</ul>\n<p>在我们初始化完成之后，调用run方法之前，也可以去手动指定该type：<code>setWebApplicationType(webApplicationType)</code></p>\n<p><br></p>\n<p><strong>初始化 并设置 initializers</strong></p>\n<p>根据<code>META-INF/spring.factories</code>中存储的映射关系，找到对应类型<code>org.springframework.context.ApplicationContextInitializer</code>的类的名字数组，完成初始化并返回。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* SpringApplication */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> &lt;T&gt; <span class=\"function\">Collection&lt;T&gt; <span class=\"title\">getSpringFactoriesInstances</span><span class=\"params\">(Class&lt;T&gt; type,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        Class&lt;?&gt;[] parameterTypes, Object... args)</span> </span>&#123;</span><br><span class=\"line\">    ClassLoader classLoader = getClassLoader();</span><br><span class=\"line\">    <span class=\"comment\">// Use names and ensure unique to protect against duplicates</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取 type 对应的类名数组</span></span><br><span class=\"line\">    Set&lt;String&gt; names = <span class=\"keyword\">new</span> LinkedHashSet&lt;&gt;(</span><br><span class=\"line\">            SpringFactoriesLoader.loadFactoryNames(type, classLoader));</span><br><span class=\"line\">    <span class=\"comment\">// 实例化</span></span><br><span class=\"line\">    List&lt;T&gt; instances = createSpringFactoriesInstances(type, parameterTypes,</span><br><span class=\"line\">            classLoader, args, names);</span><br><span class=\"line\">    AnnotationAwareOrderComparator.sort(instances);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> instances;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> SpringFactoriesLoader</span></span><br><span class=\"line\"><span class=\"comment\"> 该类就是专门加载 所有 META-INF/spring.factories 配置文件，并将结果缓存起来，并提供了根据类的类型返回类名数组的方法</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">loadFactoryNames</span><span class=\"params\">(Class&lt;?&gt; factoryClass, @Nullable ClassLoader classLoader)</span> </span>&#123;</span><br><span class=\"line\">    String factoryClassName = factoryClass.getName();</span><br><span class=\"line\">    <span class=\"comment\">// 获取该classloader对应的所有资源中的属性对，并获取 该factoryClass对应的类名组</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据classloader 返回该classloader加载的所有资源中 属性对</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(<span class=\"meta\">@Nullable</span> ClassLoader classLoader) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// cache 是用来缓存 扫面出来的结果的</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果cache 中没找到，也就是该classloader的第一次扫描， 就去扫描</span></span><br><span class=\"line\">    MultiValueMap&lt;String, String&gt; result = cache.get(classLoader);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取所有的url</span></span><br><span class=\"line\">        Enumeration&lt;URL&gt; urls = (classLoader != <span class=\"keyword\">null</span> ?</span><br><span class=\"line\">                classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :</span><br><span class=\"line\">                ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));</span><br><span class=\"line\">        result = <span class=\"keyword\">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (urls.hasMoreElements()) &#123;</span><br><span class=\"line\">            URL url = urls.nextElement();</span><br><span class=\"line\">            UrlResource resource = <span class=\"keyword\">new</span> UrlResource(url);</span><br><span class=\"line\">            Properties properties = PropertiesLoaderUtils.loadProperties(resource);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Map.Entry&lt;?, ?&gt; entry : properties.entrySet()) &#123;</span><br><span class=\"line\">                String factoryClassName = ((String) entry.getKey()).trim();</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (String factoryName : StringUtils.commaDelimitedListToStringArray((String) entry.getValue())) &#123;</span><br><span class=\"line\">                    result.add(factoryClassName, factoryName.trim());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cache.put(classLoader, result);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (IOException ex) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Unable to load factories from location [\"</span> +</span><br><span class=\"line\">                FACTORIES_RESOURCE_LOCATION + <span class=\"string\">\"]\"</span>, ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>比如其中的一个 <code>META-INFO/spring.factories</code> 如下：<code>jar:file:/Users/wuyingjie/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/2.1.0.RELEASE/spring-boot-autoconfigure-2.1.0.RELEASE.jar!/META-INF/spring.factories</code></p>\n<p><img src=\"/note_all/blob/master/images/springboot启动流程-1.png\" alt=\"|center\"></p>\n<p>result 也就是扫描出来的所有key和类名数组如下：</p>\n<p><img src=\"/note_all/blob/master/images/springboot启动流程-2.png\" alt=\"|center\"></p>\n<p><code>org.springframework.context.ApplicationContextInitializer</code>对应的类有：</p>\n<p><img src=\"/note_all/blob/master/images/springboot启动流程-3.png\" alt=\"|center\"></p>\n<p><br></p>\n<p><strong>初始化 并设置 applicationlisteners</strong></p>\n<p><code>org.springframework.context.ApplicationListener</code> 对应的类有：</p>\n<p><img src=\"/note_all/blob/master/images/springboot启动流程-4.png\" alt=\"|center\"></p>\n<p><br></p>\n<p><strong>推断 主应用程序的类 也就是我们的main 函数所在的类</strong></p>\n<p>就是根据栈的调用信息，获取main函数所在的栈帧，最后得到类信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Class&lt;?&gt; deduceMainApplicationClass() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        StackTraceElement[] stackTrace = <span class=\"keyword\">new</span> RuntimeException().getStackTrace();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (StackTraceElement stackTraceElement : stackTrace) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"string\">\"main\"</span>.equals(stackTraceElement.getMethodName())) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> Class.forName(stackTraceElement.getClassName());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Swallow and continue</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p>SpringApplication的初始化到这里也就结束了。</p>\n<p>其实也就是在为WebApplicationContext的初始化 做一些准备工作。</p>\n<p><br></p>\n<hr>\n<h2 id=\"run\"><a href=\"#run\" class=\"headerlink\" title=\"run\"></a>run</h2><p>run方法代码如下，而且结构非常清晰。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ConfigurableApplicationContext <span class=\"title\">run</span><span class=\"params\">(String... args)</span> </span>&#123;</span><br><span class=\"line\">    StopWatch stopWatch = <span class=\"keyword\">new</span> StopWatch();</span><br><span class=\"line\">    stopWatch.start();</span><br><span class=\"line\">    ConfigurableApplicationContext context = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    configureHeadlessProperty();</span><br><span class=\"line\">    <span class=\"comment\">// 获取 刚刚初始化时 得到的所有listeners</span></span><br><span class=\"line\">    SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class=\"line\">    <span class=\"comment\">// 发送 ApplicationStartingEvent 事件</span></span><br><span class=\"line\">    listeners.starting();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 包装 main方法中的传递的参数 </span></span><br><span class=\"line\">        ApplicationArguments applicationArguments = <span class=\"keyword\">new</span> DefaultApplicationArguments(</span><br><span class=\"line\">                args);</span><br><span class=\"line\">        <span class=\"comment\">// 初始化 环境，并发送 ApplicationEnvironmentPreparedEvent 事件</span></span><br><span class=\"line\">        ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class=\"line\">                applicationArguments);</span><br><span class=\"line\">        configureIgnoreBeanInfo(environment);</span><br><span class=\"line\">        <span class=\"comment\">// 打印 banner</span></span><br><span class=\"line\">        Banner printedBanner = printBanner(environment);</span><br><span class=\"line\">        <span class=\"comment\">// 根据不同的 WebApplicationType（我们的是SERVLET）创建不同的ApplicationContext对象实例</span></span><br><span class=\"line\">        context = createApplicationContext();</span><br><span class=\"line\">        <span class=\"comment\">// 使用 SpringFactoriesLoader 获取 org.springframework.boot.SpringBootExceptionReporter 对应的 exceptionReporters</span></span><br><span class=\"line\">        exceptionReporters = getSpringFactoriesInstances(</span><br><span class=\"line\">                SpringBootExceptionReporter.class,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> Class[] &#123; ConfigurableApplicationContext.class &#125;, context);</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 1. 准备一下context的环境</span></span><br><span class=\"line\"><span class=\"comment\">         * 2. 调用上文所有 ApplicationContextInitializer.initialize 方法，趁 context 还没有 refresh</span></span><br><span class=\"line\"><span class=\"comment\">         * 3. 发送 ApplicationContextInitializedEvent 事件</span></span><br><span class=\"line\"><span class=\"comment\">         * 4. load allResource=resources+primaryResources 这里主要就是 加载主类 MyServiceAppliction</span></span><br><span class=\"line\"><span class=\"comment\">         * 5. 做了一些 contextLoaded 的工作，主要是 发送 ApplicationPreparedEvent 事件</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        prepareContext(context, environment, listeners, applicationArguments,</span><br><span class=\"line\">                printedBanner);</span><br><span class=\"line\">        <span class=\"comment\">// 调用 ApplicationContext 的 refresh 方法</span></span><br><span class=\"line\">        refreshContext(context);</span><br><span class=\"line\">        <span class=\"comment\">// 调用 afterRefresh 但其实是个空方法，啥都没干</span></span><br><span class=\"line\">        afterRefresh(context, applicationArguments);</span><br><span class=\"line\">        stopWatch.stop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.logStartupInfo) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> StartupInfoLogger(<span class=\"keyword\">this</span>.mainApplicationClass)</span><br><span class=\"line\">                    .logStarted(getApplicationLog(), stopWatch);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 发送 ApplicationStartedEvent 事件</span></span><br><span class=\"line\">        listeners.started(context);</span><br><span class=\"line\">        callRunners(context, applicationArguments);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">        handleRunFailure(context, ex, exceptionReporters, listeners);</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 发送 ApplicationReadyEvent 事件</span></span><br><span class=\"line\">        listeners.running(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">        handleRunFailure(context, ex, exceptionReporters, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> context;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>整个启动流程 就完成了。</p>\n<p><br></p>\n<hr>\n<p>那么下面就仔细的分析每一步具体做了什么。</p>\n<p><br></p>\n<p><strong>获取listeners 并通知listeners事件</strong></p>\n<p>获取<code>SpringApplicationRunListeners</code>的方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> SpringApplicationRunListeners <span class=\"title\">getRunListeners</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Class&lt;?&gt;[] types = <span class=\"keyword\">new</span> Class&lt;?&gt;[] &#123; SpringApplication.class, String[].class &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SpringApplicationRunListeners(logger, getSpringFactoriesInstances(</span><br><span class=\"line\">            SpringApplicationRunListener.class, types, <span class=\"keyword\">this</span>, args));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>还是使用<code>SpringFactoriesLoader</code>类从各个 <code>spring.factories</code>配置文件中获取。得到的是<code>SpringApplicationRunListener</code>所有配置在<code>spring.factories</code>中的子类的数组，这里该数组只有一个元素<code>org.springframework.boot.context.event.EventPublishingRunListener</code></p>\n<p>首先，我们看下<code>SpringApplicationRunListener</code>，该接口提供了Application运行期各个事件的回调，也就是上面所有的事件其实都是这里发的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.springframework.boot;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.env.ConfigurableEnvironment;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.io.support.SpringFactoriesLoader;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Listener for the &#123;<span class=\"doctag\">@link</span> SpringApplication&#125; &#123;<span class=\"doctag\">@code</span> run&#125; method.</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> SpringApplicationRunListener&#125;s are loaded via the &#123;<span class=\"doctag\">@link</span> SpringFactoriesLoader&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * and should declare a public constructor that accepts a &#123;<span class=\"doctag\">@link</span> SpringApplication&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * instance and a &#123;<span class=\"doctag\">@code</span> String[]&#125; of arguments. A new</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> SpringApplicationRunListener&#125; instance will be created for each run.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Phillip Webb</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Dave Syer</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Andy Wilkinson</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">SpringApplicationRunListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Called immediately when the run method has first started. Can be used for very</span></span><br><span class=\"line\"><span class=\"comment\">\t * early initialization.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">starting</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Called once the environment has been prepared, but before the</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@link</span> ApplicationContext&#125; has been created.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> environment the environment</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">environmentPrepared</span><span class=\"params\">(ConfigurableEnvironment environment)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Called once the &#123;<span class=\"doctag\">@link</span> ApplicationContext&#125; has been created and prepared, but</span></span><br><span class=\"line\"><span class=\"comment\">\t * before sources have been loaded.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> context the application context</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">contextPrepared</span><span class=\"params\">(ConfigurableApplicationContext context)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Called once the application context has been loaded but before it has been</span></span><br><span class=\"line\"><span class=\"comment\">\t * refreshed.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> context the application context</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">contextLoaded</span><span class=\"params\">(ConfigurableApplicationContext context)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * The context has been refreshed and the application has started but</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@link</span> CommandLineRunner CommandLineRunners&#125; and &#123;<span class=\"doctag\">@link</span> ApplicationRunner</span></span><br><span class=\"line\"><span class=\"comment\">\t * ApplicationRunners&#125; have not been called.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> context the application context.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@since</span> 2.0.0</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">started</span><span class=\"params\">(ConfigurableApplicationContext context)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Called immediately before the run method finishes, when the application context has</span></span><br><span class=\"line\"><span class=\"comment\">\t * been refreshed and all &#123;<span class=\"doctag\">@link</span> CommandLineRunner CommandLineRunners&#125; and</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@link</span> ApplicationRunner ApplicationRunners&#125; have been called.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> context the application context.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@since</span> 2.0.0</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">running</span><span class=\"params\">(ConfigurableApplicationContext context)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Called when a failure occurs when running the application.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> context the application context or &#123;<span class=\"doctag\">@code</span> null&#125; if a failure occurred before</span></span><br><span class=\"line\"><span class=\"comment\">\t * the context was created</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> exception the failure</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@since</span> 2.0.0</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">failed</span><span class=\"params\">(ConfigurableApplicationContext context, Throwable exception)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>比如说，我们看看<code>listeners.starting();</code>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SpringApplicationRunListeners</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">starting</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (SpringApplicationRunListener listener : <span class=\"keyword\">this</span>.listeners) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里就像上面说的 listeners 只有 EventPublishingRunListener 一个对象</span></span><br><span class=\"line\">        listener.starting();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 我们看EventPublishingRunListener 的starting 方法</span></span><br><span class=\"line\"><span class=\"comment\">// EventPublishingRunListener</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">starting</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用初始化广播器 将 事件 ApplicationStartingEvent 广播到所有 listeners</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.initialMulticaster.multicastEvent(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> ApplicationStartingEvent(<span class=\"keyword\">this</span>.application, <span class=\"keyword\">this</span>.args));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 那么我们再看一下 这个 初始化广播器 initialMulticaster 到底是什么，并广播向了哪些listeners</span></span><br><span class=\"line\"><span class=\"comment\">// EventPublishingRunListener 的构造方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">EventPublishingRunListener</span><span class=\"params\">(SpringApplication application, String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.application = application;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.args = args;</span><br><span class=\"line\">    <span class=\"comment\">// new 一个新的 SimpleApplicationEventMulticaster</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.initialMulticaster = <span class=\"keyword\">new</span> SimpleApplicationEventMulticaster();</span><br><span class=\"line\">    <span class=\"comment\">// 并将ApplicationContext中所有的listeners 放到 该 广播器中</span></span><br><span class=\"line\">    <span class=\"comment\">// 这些listeners 就是从 spring.factories中加载的 所有 ApplicationListener.class的子类</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ApplicationListener&lt;?&gt; listener : application.getListeners()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.initialMulticaster.addApplicationListener(listener);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>广播逻辑，大致就是在所有的listeners中根据event找到合适的能处理该event的listeners，并调用该listener的onApplicationEvent方法</p>\n<p>具体的广播逻辑实现方式就不分析了，可以看我的另一篇介绍<strong><code>springboot 事件机制</code></strong>的文章，</p>\n<p>所以，如果我们想要监听SpringApplication运行期间的各种事件，我们就可以实现<code>SpringApplicationRunListener</code>，并仔细看接口的注释。</p>\n<p>这里主要涉及到三个类：</p>\n<ul>\n<li><code>SpringApplicationRunListeners</code> 类，包含了所有实现了<code>SpringApplicationRunListener</code>接口并通过<code>spring.factories</code>注册的类。</li>\n<li><code>SpringApplicationRunListener</code> 接口，定义监听<code>SpringApplication</code>运行的回调接口</li>\n<li><code>EventPublishingRunListener</code> 类，实现了<code>SpringApplicationRunListener</code>接口，是通过<code>SpringFactoriesLoader</code>加载的唯一实现类。</li>\n</ul>\n<blockquote>\n<p>另外，这里的<code>SpringApplicationRunListeners</code>中的<code>SimpleApplicationEventMulticaster</code>只负责SpringApplication启动过程中的事件发送，也只发送给通过<code>SpringFactoriesLoader</code>加载并放在它里面的listeners。我们写的自己的listeners和这些listeners都放在<code>ApplicationContext</code>中的listeners，并且由<code>ApplicationContext</code>中的<code>SimpleApplicationEventMulticaster</code>负责通知（他俩并不是同一个）。</p>\n</blockquote>\n<p><br></p>\n<p><strong>创建Environment 和 context</strong></p>\n<p>创建<code>ConfigurableEnvironment</code>和<code>ApplicationContext</code> 都会根据之前得到的<code>WebApplicationType</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> ConfigurableApplicationContext <span class=\"title\">createApplicationContext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Class&lt;?&gt; contextClass = <span class=\"keyword\">this</span>.applicationContextClass;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (contextClass == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (<span class=\"keyword\">this</span>.webApplicationType) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> SERVLET:</span><br><span class=\"line\">                <span class=\"comment\">// AnnotationConfigServletWebServerApplicationContext</span></span><br><span class=\"line\">                contextClass = Class.forName(DEFAULT_SERVLET_WEB_CONTEXT_CLASS); </span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> REACTIVE:</span><br><span class=\"line\">                <span class=\"comment\">// AnnotationConfigReactiveWebServerApplicationContext</span></span><br><span class=\"line\">                contextClass = Class.forName(DEFAULT_REACTIVE_WEB_CONTEXT_CLASS);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"comment\">// AnnotationConfigApplicationContext</span></span><br><span class=\"line\">                contextClass = Class.forName(DEFAULT_CONTEXT_CLASS);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(</span><br><span class=\"line\">                    <span class=\"string\">\"Unable create a default ApplicationContext, \"</span></span><br><span class=\"line\">                            + <span class=\"string\">\"please specify an ApplicationContextClass\"</span>,</span><br><span class=\"line\">                    ex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (ConfigurableApplicationContext) BeanUtils.instantiateClass(contextClass);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><strong>prepareContext</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">prepareContext</span><span class=\"params\">(ConfigurableApplicationContext context,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        ConfigurableEnvironment environment, SpringApplicationRunListeners listeners,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        ApplicationArguments applicationArguments, Banner printedBanner)</span> </span>&#123;</span><br><span class=\"line\">    context.setEnvironment(environment);</span><br><span class=\"line\">    <span class=\"comment\">// 注入基本的类 如，ConversionService</span></span><br><span class=\"line\">    postProcessApplicationContext(context);</span><br><span class=\"line\">    <span class=\"comment\">// 调用各个由 SpringFactoriesLoader 加载的 ApplicationContextInitializer 的 initialize方法</span></span><br><span class=\"line\">    applyInitializers(context);</span><br><span class=\"line\">    <span class=\"comment\">// 发布ApplicationContextInitializedEvent 事件</span></span><br><span class=\"line\">    listeners.contextPrepared(context);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.logStartupInfo) &#123;</span><br><span class=\"line\">        logStartupInfo(context.getParent() == <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        logStartupProfileInfo(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Add boot specific singleton beans</span></span><br><span class=\"line\">    ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();</span><br><span class=\"line\">    beanFactory.registerSingleton(<span class=\"string\">\"springApplicationArguments\"</span>, applicationArguments);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (printedBanner != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        beanFactory.registerSingleton(<span class=\"string\">\"springBootBanner\"</span>, printedBanner);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (beanFactory <span class=\"keyword\">instanceof</span> DefaultListableBeanFactory) &#123;</span><br><span class=\"line\">        ((DefaultListableBeanFactory) beanFactory)</span><br><span class=\"line\">                .setAllowBeanDefinitionOverriding(<span class=\"keyword\">this</span>.allowBeanDefinitionOverriding);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Load the sources</span></span><br><span class=\"line\">    Set&lt;Object&gt; sources = getAllSources();</span><br><span class=\"line\">    Assert.notEmpty(sources, <span class=\"string\">\"Sources must not be empty\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 这里只加载了 我们的主类 MyServiceApplication</span></span><br><span class=\"line\">    load(context, sources.toArray(<span class=\"keyword\">new</span> Object[<span class=\"number\">0</span>]));</span><br><span class=\"line\">    <span class=\"comment\">//1. 如果这些listeners 实现了 ApplicationContextAware 接口，则将ApplicationContext set进去，因为这时候ApplicationContext已经准备好了，而且 这些已经实例化过了，之后也不会收到通知了。</span></span><br><span class=\"line\">    <span class=\"comment\">//2. 发送 ApplicationPreparedEvent 事件</span></span><br><span class=\"line\">    listeners.contextLoaded(context);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><strong>refresh</strong></p>\n<p>这里还需要着重说一下refresh方法。</p>\n<p>上面的load方法只加载了根类 <code>MyServiceApplication</code>，而该类下的所有有注解的并没有加载，实际的加载是在refresh的过程中实现的。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AbstractApplicationContext</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">refresh</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.startupShutdownMonitor) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Prepare this context for refreshing.</span></span><br><span class=\"line\">        prepareRefresh();</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 最后委托给了 PostProcessorRegistrationDelegate </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">invokeBeanFactoryPostProcessors</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    ConfigurableListableBeanFactory beanFactory, List&lt;BeanFactoryPostProcessor&gt; beanFactoryPostProcessors)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 首先，需要明白，BeanFactoryPostProcessor 有两个来源，一个是 传进来的，另外一个是 从BeanFactory中拿到的。</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 代码就省了 写下大致逻辑，也是比较简单的</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (beanFactory <span class=\"keyword\">instanceof</span> BeanDefinitionRegistry) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果是一个可以注册的BeanFactory，</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         1. 从参数中的 beanFactoryPostProcessors 中找实现 BeanDefinitionRegistryPostProcessor接口的 并调用该方法</span></span><br><span class=\"line\"><span class=\"comment\">         2. 调用BeanFactory中的BeanDefinitionRegistryPostProcessor接口</span></span><br><span class=\"line\"><span class=\"comment\">         3. 调用 BeanDefinitionRegistryPostProcessor接口的 BeanFactoryPostProcessors 的接口方法</span></span><br><span class=\"line\"><span class=\"comment\">         4. 调用 参数中的 BeanFactoryPostProcessors 接口的方法</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果不可以注册bean</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 调用所有参数的 BeanFactoryPostProcessors 接口方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//调用 beanFactory中的 BeanFactoryPostProcessors 接口方法</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>而 SpringBoot 自动装配，去解析根类中的注解并注入bean的过程就发生在 <code>BeanDefinitionRegistryPostProcessor</code>的调用过程中。</p>\n<p>具体实现的类是<code>ConfigurationClassPostProcessor</code>。 具体过程还是挺复杂的，之后可以详细分析。</p>\n<p>refresh 方法也是非常重要的，但是不是本文的重点，具体可以去百度。</p>\n<blockquote>\n<p>这里是主要的<code>BeanFactoryPostProcessor</code>的来源，但是还有一些来自 <code>ApplicationContextInitializer</code>实现类，在调用回调方法时注入的几个（他这么着急注入是要早点用？可是哪里都没有调用啊。。 可能是一些需要提前获取的bean在getBean方法的时候会回调这些早早就初始化好的<code>BeanFactoryPostProcessor</code>）。</p>\n</blockquote>\n<blockquote>\n<p>另外，<code>BeanPostProcessor</code>也是有一些需要提前注册好的。\b还有一些Bean，比如说<code>spring.factories</code>中注册的bean，还有回调或者初始化其他类的时候增加的一些BeanDefinition。如在实例化<code>AnnotationConfigServletWebServerApplicationContext</code>会创建<code>AnnotatedBeanDefinitionReader</code>对象，在实例化该对象的时候，会像BeanFactory中注册Annotion方式的BeanRegistry所必须用到的几个类，比如说<code>ConfigurationClassPostProcessor</code>，<code>AutowiredAnnotationBeanPostProcessor</code>，<code>CommonAnnotationBeanPostProcessor</code>等等吧。</p>\n</blockquote>\n<p><br></p>\n<p>再之后，除了还是<code>SpringApplicationRunListeners</code>的回调，还有一个<code>callRunners</code>方法。</p>\n<p><br></p>\n<p><strong>callRunners</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">callRunners</span><span class=\"params\">(ApplicationContext context, ApplicationArguments args)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Object&gt; runners = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    runners.addAll(context.getBeansOfType(ApplicationRunner.class).values());</span><br><span class=\"line\">    runners.addAll(context.getBeansOfType(CommandLineRunner.class).values());</span><br><span class=\"line\">    AnnotationAwareOrderComparator.sort(runners);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Object runner : <span class=\"keyword\">new</span> LinkedHashSet&lt;&gt;(runners)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (runner <span class=\"keyword\">instanceof</span> ApplicationRunner) &#123;</span><br><span class=\"line\">            callRunner((ApplicationRunner) runner, args);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (runner <span class=\"keyword\">instanceof</span> CommandLineRunner) &#123;</span><br><span class=\"line\">            callRunner((CommandLineRunner) runner, args);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>主要就是回调以下两个接口，对我们运行时传入的参数 加上自己的处理（如果有需要的话）：</p>\n<ul>\n<li><code>ApplicationRunner</code> 接收由<code>ApplicationArguments</code>包装之后的参数</li>\n<li><code>CommandLineRunner</code> 接收原始运行程序传入的参数</li>\n</ul>\n<p>例子 网上一百度 就有了。比如说：<a href=\"https://www.jianshu.com/p/5d4ffe267596\" target=\"_blank\" rel=\"noopener\">CommandLineRunner或者ApplicationRunner接口</a></p>\n"},{"title":"SpringBoot Environment","_content":"\n# SpringBoot Environment\n\n<br>\n\n- [SpringBoot Environment](#springboot-environment)\n  - [背景类介绍](#背景类介绍)\n  - [源码分析 Environment 的初始化过程](#源码分析-environment-的初始化过程)\n\n<br>\n\n在SpringBoot中，每个`ApplicationContext`都有相应的环境信息，比如`AbstractApplicationContext`中就有`private ConfigurableEnvironment environment;` **Environment 可以理解为一些环境上下文，也就是存储了当前运行环境的各种属性。**\n\n下面就看看Environment到底是什么，以及在初始化的时候，他做了哪些相关工作。\n\n<br>\n\n------------\n\n## 背景类介绍\n\n<br>\n\n**`Environment && PropertyResolver`**\n\n<br>\n\n我们常使用的Environment就是`StandardServletEnvironment` ，那么首先我们就看看该类的体系结构。\n\n![|center](/images/springboot-environment-1.png)\n\n可以看到，`StandardServletEnvironment` 继承自 `StandardEnvironment`，实现了`ConfigurableWebEnvironment`接口。而再往下还有很多的接口定义和抽象类，下面我们都来看看。\n\n- `PropertyResolver` 提供了访问属性的接口定义，忽略底层resource的实现。\n- `Environment` 继承自`PropertyResolver`，提供访问和判断profiles的功能。\n- `ConfigurablePropertyResolver` 继承自`PropertyResolver`，主要提供属性类型转换(基于`org.springframework.core.convert.ConversionService`)功能。定义了`get|setConversionService,setValueSeparator,setPlaceholderPrefix|Suffix`等方法，就是丰富了解析的功能。\n- `ConfigurableEnvironment` 继承自`ConfigurablePropertyResolver`和Environment，并且提供设置激活的profile和默认的profile的功能。\n- `ConfigurableWebEnvironment` 继承自`ConfigurableEnvironment`，并且提供配置Servlet上下文和Servlet参数的功能。\n- `AbstractEnvironment` 实现了`ConfigurableEnvironment`接口，提供默认属性和存储容器的定义，并且为子类预留可覆盖了扩展方法。\n- `StandardEnvironment` 继承自`AbstractEnvironment`，非Servlet(Web)环境下的标准Environment实现。\n- `StandardServletEnvironment` 继承自`StandardEnvironment`，Servlet(Web)环境下的标准Environment实现。\n\n<br>\n\n如果有不是特别清楚的，可以结合代码看看每个类中方法的定义，就可以理解上面各个类的功能了。\n\n<br>\n\n**`PropertyResource`**\n\n<br>\n\n在`AbstractEnvironment`中，用来保存环境中各种属性的就是`MutablePropertySources`。下面从`MutablePropertySources`入手，了解整个`PropertyResource`\n\n```java\n/**\n * 该类提供了PropertySources的具体实现（也是唯一的），里面保存的是一个CopyOnWriteArrayList<PropertySource<?>>的数组。\n * 而且好提供了各种方法，用来插入、删除 list中的元素 PropertySource\n */\npublic class MutablePropertySources implements PropertySources {\n\n    // 这里定义了对多个PropertySource的真正数据结构是 CopyOnWriteArrayList<ropertySource<?>>\n\tprivate final List<PropertySource<?>> propertySourceList = new CopyOnWriteArrayList<>();\n\n    ...\n}\n```\n\n下面再看看 `PropertySources`\n\n```java\n/**\n * 就是定义了多个PropertySource，和containers 和 PropertySource get这种操作\n *\n */\npublic interface PropertySources extends Iterable<PropertySource<?>> {\n\n\t/**\n\t * Return a sequential {@link Stream} containing the property sources.\n\t * @since 5.1\n\t */\n\tdefault Stream<PropertySource<?>> stream() {\n\t\treturn StreamSupport.stream(spliterator(), false);\n\t}\n\n\t/**\n\t * Return whether a property source with the given name is contained.\n\t * @param name the {@linkplain PropertySource#getName() name of the property source} to find\n\t */\n\tboolean contains(String name);\n\n\t/**\n\t * Return the property source with the given name, {@code null} if not found.\n\t * @param name the {@linkplain PropertySource#getName() name of the property source} to find\n\t */\n\t@Nullable\n\tPropertySource<?> get(String name);\n\n}\n\n```\n\n<br>\n\n最后看看`PropertySource`，这里面还是有点东西的。\n\n```java\npublic abstract class PropertySource<T> {\n\n\tprotected final String name;\n\n\tprotected final T source;\n\n\tpublic PropertySource(String name, T source) {\n\t\tAssert.hasText(name, \"Property source name must contain at least one character\");\n\t\tAssert.notNull(source, \"Property source must not be null\");\n\t\tthis.name = name;\n\t\tthis.source = source;\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic PropertySource(String name) {\n\t\tthis(name, (T) new Object());\n\t}\n\n\n\tpublic String getName() {\n\t\treturn this.name;\n\t}\n\n\tpublic T getSource() {\n\t\treturn this.source;\n\t}\n\n\t/**\n\t * Return whether this {@code PropertySource} contains the given name.\n\t * <p>This implementation simply checks for a {@code null} return value\n\t * from {@link #getProperty(String)}. Subclasses may wish to implement\n\t * a more efficient algorithm if possible.\n\t * @param name the property name to find\n\t */\n\tpublic boolean containsProperty(String name) {\n\t\treturn (getProperty(name) != null);\n\t}\n\n\t/**\n\t * Return the value associated with the given name,\n\t * or {@code null} if not found.\n\t * @param name the property to find\n\t * @see PropertyResolver#getRequiredProperty(String)\n\t */\n\t@Nullable\n\tpublic abstract Object getProperty(String name);\n\n\n\t// equals 和 hashCode 都只和 name 属性相关\n\t@Override\n\tpublic boolean equals(Object other) {\n\t\treturn (this == other || (other instanceof PropertySource &&\n\t\t\t\tObjectUtils.nullSafeEquals(this.name, ((PropertySource<?>) other).name)));\n\t}\n\t@Override\n\tpublic int hashCode() {\n\t\treturn ObjectUtils.nullSafeHashCode(this.name);\n\t}\n\n\n    // 把String类型的name转换为一个可以判断存在与否的 ComparisonPropertySource\n    // 正好 判断 equals 只根据name，所以这里也是妥妥的\n\t/**\n\t * Return a {@code PropertySource} implementation intended for collection comparison purposes only.\n\t * <p>Primarily for internal use, but given a collection of {@code PropertySource} objects, may be\n\t * used as follows:\n\t * <pre class=\"code\">\n\t * {@code List<PropertySource<?>> sources = new ArrayList<PropertySource<?>>();\n\t * sources.add(new MapPropertySource(\"sourceA\", mapA));\n\t * sources.add(new MapPropertySource(\"sourceB\", mapB));\n\t * assert sources.contains(PropertySource.named(\"sourceA\"));\n\t * assert sources.contains(PropertySource.named(\"sourceB\"));\n\t * assert !sources.contains(PropertySource.named(\"sourceC\"));\n\t * }</pre>\n\t * The returned {@code PropertySource} will throw {@code UnsupportedOperationException}\n\t * if any methods other than {@code equals(Object)}, {@code hashCode()}, and {@code toString()}\n\t * are called.\n\t * @param name the name of the comparison {@code PropertySource} to be created and returned.\n\t */\n\tpublic static PropertySource<?> named(String name) {\n\t\treturn new ComparisonPropertySource(name);\n\t}\n\n\n\t/**\n\t * {@code PropertySource} to be used as a placeholder in cases where an actual\n\t * property source cannot be eagerly initialized at application context\n\t * creation time.  For example, a {@code ServletContext}-based property source\n\t * must wait until the {@code ServletContext} object is available to its enclosing\n\t * {@code ApplicationContext}.  In such cases, a stub should be used to hold the\n\t * intended default position/order of the property source, then be replaced\n\t * during context refresh.\n     * 上面的注释也写的很清楚了，就是用来占位的，因为有一些PropertySource的初始化较晚，比如说 ServletContext相关的环境，在\n     * 初始化的时候是没有的，可以用改对象来占位。\n\t * @see org.springframework.context.support.AbstractApplicationContext#initPropertySources()\n\t * @see org.springframework.web.context.support.StandardServletEnvironment\n\t * @see org.springframework.web.context.support.ServletContextPropertySource\n\t */\n\tpublic static class StubPropertySource extends PropertySource<Object> {\n\n\t\tpublic StubPropertySource(String name) {\n\t\t\tsuper(name, new Object());\n\t\t}\n\n\t\t/**\n\t\t * Always returns {@code null}.\n\t\t */\n\t\t@Override\n\t\t@Nullable\n\t\tpublic String getProperty(String name) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\n\t/**\n\t * PropertySource.named(String) 返回的就是该类型的对象。\n     * 该子类是专门用来封装String类型的name，做比较的，而且他的所有getSource等相关方法，全都是抛出异常\n\t */\n\tstatic class ComparisonPropertySource extends StubPropertySource {\n\n\t\tprivate static final String USAGE_ERROR =\n\t\t\t\t\"ComparisonPropertySource instances are for use with collection comparison only\";\n\n\t\tpublic ComparisonPropertySource(String name) {\n\t\t\tsuper(name);\n\t\t}\n\n\t\t@Override\n\t\tpublic Object getSource() {\n\t\t\tthrow new UnsupportedOperationException(USAGE_ERROR);\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean containsProperty(String name) {\n\t\t\tthrow new UnsupportedOperationException(USAGE_ERROR);\n\t\t}\n\n\t\t@Override\n\t\t@Nullable\n\t\tpublic String getProperty(String name) {\n\t\t\tthrow new UnsupportedOperationException(USAGE_ERROR);\n\t\t}\n\t}\n\n}\n```\n\n这个`PropertySource`类和map这种的用来存储键值对的类稍微有一点不一样，PropertySource中的source是随意类型的，而且key-value都是存在source里面的。可以简单的看一下常用的两个实现`MapPropertySource`,``\n\n```java\npublic class MapPropertySource extends EnumerablePropertySource<Map<String, Object>> {\n\n\tpublic MapPropertySource(String name, Map<String, Object> source) {\n\t\tsuper(name, source);\n\t}\n\n\t@Override\n\t@Nullable\n\tpublic Object getProperty(String name) {\n\t\treturn this.source.get(name);\n\t}\n\n\t@Override\n\tpublic boolean containsProperty(String name) {\n\t\treturn this.source.containsKey(name);\n\t}\n\n\t@Override\n\tpublic String[] getPropertyNames() {\n\t\treturn StringUtils.toStringArray(this.source.keySet());\n\t}\n\n}\n\n\npublic class PropertiesPropertySource extends MapPropertySource {\n\n\t@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n\tpublic PropertiesPropertySource(String name, Properties source) {\n\t\tsuper(name, (Map) source);\n\t}\n\n\tprotected PropertiesPropertySource(String name, Map<String, Object> source) {\n\t\tsuper(name, source);\n\t}\n\n}\n```\n\n<br>\n\n最后，我们知道`AbstractEnvironment`中存储的是`MutablePropertySources`, 是一个数组，那么在`Environment`中怎么getProperty的呢？\n\n```java\npublic abstract class AbstractEnvironment implements ConfigurableEnvironment {\n\n    ...\n\n    private final ConfigurablePropertyResolver propertyResolver =\n\t\t\tnew PropertySourcesPropertyResolver(this.propertySources);\n\n    // 是代理给了 PropertySourcesPropertyResolver propertyResolver\n\t@Override\n\t@Nullable\n\tpublic String getProperty(String key) {\n\t\treturn this.propertyResolver.getProperty(key);\n\t}\n}\n\npublic class PropertySourcesPropertyResolver extends AbstractPropertyResolver {\n\n\t@Nullable\n\tprivate final PropertySources propertySources;\n\n\t@Override\n\t@Nullable\n\tpublic String getProperty(String key) {\n\t\treturn getProperty(key, String.class, true);\n\t}\n\n    // 其实就是扫描 PropertySources 中 所有的 PropertySource 查每个PropertySource中是否存在\n\t@Nullable\n\tprotected <T> T getProperty(String key, Class<T> targetValueType, boolean resolveNestedPlaceholders) {\n\t\tif (this.propertySources != null) {\n\t\t\tfor (PropertySource<?> propertySource : this.propertySources) {\n\t\t\t\tObject value = propertySource.getProperty(key);\n\t\t\t\tif (value != null) {\n\t\t\t\t\tif (resolveNestedPlaceholders && value instanceof String) {\n\t\t\t\t\t\tvalue = resolveNestedPlaceholders((String) value);\n\t\t\t\t\t}\n\t\t\t\t\tlogKeyFound(key, propertySource, value);\n\t\t\t\t\treturn convertValueIfNecessary(value, targetValueType);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n    ...\n}\n\n```\n\n<br>\n\n---------------\n\n## 源码分析 Environment 的初始化过程\n\n入口点在`SpringApplication.run`方法的`ConfigurableEnvironment environment = prepareEnvironment(listeners,applicationArguments);`。\n\n```java\n// environment 在该方法中完成整个初始化\nprivate ConfigurableEnvironment prepareEnvironment(\n        SpringApplicationRunListeners listeners,\n        ApplicationArguments applicationArguments) {\n    // 根据不同的环境创建不同的 Environment 实例\n    ConfigurableEnvironment environment = getOrCreateEnvironment();\n    // configEnvironment 为初始化 Environment 准备好数据\n    configureEnvironment(environment, applicationArguments.getSourceArgs());\n    listeners.environmentPrepared(environment);\n    bindToSpringApplication(environment);\n    if (!this.isCustomEnvironment) {\n        environment = new EnvironmentConverter(getClassLoader())\n                .convertEnvironmentIfNecessary(environment, deduceEnvironmentClass());\n    }\n    ConfigurationPropertySources.attach(environment);\n    return environment;\n}\n```\n\n<br>\n\n**`1. createEnvironment`**\n\n<br>\n\n首先根据不同的 applicationType 创建不同的Environment，这里创建的是 `StandardServletEnvironment`\n\n```java\nprivate ConfigurableEnvironment getOrCreateEnvironment() {\n    if (this.environment != null) {\n        return this.environment;\n    }\n    switch (this.webApplicationType) {\n    case SERVLET:\n        return new StandardServletEnvironment();\n    case REACTIVE:\n        return new StandardReactiveWebEnvironment();\n    default:\n        return new StandardEnvironment();\n    }\n}\n\n```\n\n之前说过，`StandardServletEnvironment extends StandardEnvironment`, `StandardEnvironment extends AbstractEnvironment`。所以创建`StandardServletEnvironment`实例，首先会执行父类`AbstractEnvironment`的构造方法（因为这里子类没有实现构造方法），它里面又调用了`customizePropertySources`方法，`StandardServletEnvironment`实现了该方法，所以又会回来调用这个方法。\n\n创建`StandardServletEnvironment`实例的代码会按照代码实际的执行顺序，在下面罗列出来。\n\n```java\n// AbstractEnvironment\npublic AbstractEnvironment() {\n    // 留给子类实现 方法添加propertySource\n    customizePropertySources(this.propertySources);\n}\n\n//StandardServletEnvironment\n@Override\nprotected void customizePropertySources(MutablePropertySources propertySources) {\n    //name=servletConfigInitParams, 给 Servlet configInitParams 占位 \n    propertySources.addLast(new StubPropertySource(SERVLET_CONFIG_PROPERTY_SOURCE_NAME));\n    // servletContextInitParams 给 Servlet contextInitParams 占位\n    propertySources.addLast(new StubPropertySource(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME));\n    if (JndiLocatorDelegate.isDefaultJndiEnvironmentAvailable()) {\n        propertySources.addLast(new JndiPropertySource(JNDI_PROPERTY_SOURCE_NAME));\n    }\n    super.customizePropertySources(propertySources);\n}\n\n// StandardEnvironment\nprotected void customizePropertySources(MutablePropertySources propertySources) {\n    // systemProperties 放入系统环境 键值对\n    propertySources.addLast(new MapPropertySource(SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME, getSystemProperties()));\n    propertySources.addLast(new SystemEnvironmentPropertySource(SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME, getSystemEnvironment()));\n}\n\n```\n\n为什么要用`SubPropertySource`占位，而且还要注意顺序呢？\n\n会想一下，`Environment.getProperty` 的过程，是扫描数组中的每一个`PropertySource`看是否有该property，所以也会涉及到这几个环境优先级的问题。\n\n\n<br>\n\n**`2. configEnvironment`**\n\n<br>\n\n```java\nprotected void configureEnvironment(ConfigurableEnvironment environment,\n        String[] args) {\n    if (this.addConversionService) {\n        // 创建并 返回 ConversionService，这是一个相当庞大的转换Service，用来在读取配置文件的时候，将各种数据类型转换为合适的数据类型\n        ConversionService conversionService = ApplicationConversionService\n                .getSharedInstance();\n        environment.setConversionService(\n                (ConfigurableConversionService) conversionService);\n    }\n    configurePropertySources(environment, args);\n    configureProfiles(environment, args);\n}\n\n// 如果 运行的时候传入了参数，那么会将它保存在 name=springApplicationCommandLineArgs 的propertySource中\nprotected void configurePropertySources(ConfigurableEnvironment environment,\n        String[] args) {\n    MutablePropertySources sources = environment.getPropertySources();\n    if (this.defaultProperties != null && !this.defaultProperties.isEmpty()) {\n        sources.addLast(\n                new MapPropertySource(\"defaultProperties\", this.defaultProperties));\n    }\n    if (this.addCommandLineProperties && args.length > 0) {\n        String name = CommandLinePropertySource.COMMAND_LINE_PROPERTY_SOURCE_NAME;\n        if (sources.contains(name)) {\n            PropertySource<?> source = sources.get(name);\n            CompositePropertySource composite = new CompositePropertySource(name);\n            composite.addPropertySource(new SimpleCommandLinePropertySource(\n                    \"springApplicationCommandLineArgs\", args));\n            composite.addPropertySource(source);\n            sources.replace(name, composite);\n        }\n        else {\n            // 如果有的话，默认会将用户传入的配置 放到第一位。\n            // 所以我们的配置 优先级总是最高的。\n            // 我们传入的 参数 spring.profiles.active=wyj 就会在这里放入 MutablPropertySources 中\n            sources.addFirst(new SimpleCommandLinePropertySource(args));\n        }\n    }\n}\n\nprotected void configureProfiles(ConfigurableEnvironment environment, String[] args) {\n    // 初始化 environment 中的 activeProfiles\n    environment.getActiveProfiles(); // ensure they are initialized\n    // But these ones should go first (last wins in a property key clash)\n    // activePrifiles中加入 ApplicationContext中 额外 用户配置的 additionalProfiles\n    Set<String> profiles = new LinkedHashSet<>(this.additionalProfiles);\n    profiles.addAll(Arrays.asList(environment.getActiveProfiles()));\n    environment.setActiveProfiles(StringUtils.toStringArray(profiles));\n}\n\n\nprotected Set<String> doGetActiveProfiles() {\n    synchronized (this.activeProfiles) {\n        if (this.activeProfiles.isEmpty()) {\n            // 会读取到 已经放入到 PropertySources 中，运行程序时 我们传入的参数。\n            String profiles = getProperty(ACTIVE_PROFILES_PROPERTY_NAME);   // spring.profiles.active\n            if (StringUtils.hasText(profiles)) {\n                // 这里还可以发现，我们可以传入多个 active profiles，用,分割\n                setActiveProfiles(StringUtils.commaDelimitedListToStringArray(\n                        StringUtils.trimAllWhitespace(profiles)));\n            }\n        }\n        return this.activeProfiles;\n    }\n}\n\n```\n\n所以他一共干了三件事：\n\n1. 初始化`ConvertService`\n2. 读取用户运行程序时传入的配置，并保存在Envrionment\n3. 找到active profiles\n\n下面看看 `ConvertService` 中 都是什么：\n\n![|center](/images/springboot-environment-2.png)\n\n![|center](/images/springboot-environment-3.png)\n\n<br>\n\n**`3.1 preLoadProperties`**\n\n<br>\n\n下面就是发出`ApplicationEnvironmentPreparedEvent`事件。\n\n会有好几个listener，我们关心的是`ConfigFileApplicationListener`，下面是几个关心的方法：\n\n```java\npublic class ConfigFileApplicationListener\n\t\timplements EnvironmentPostProcessor, SmartApplicationListener, Ordered {\n    \n    // ApplicationEnvironmentPreparedEvent 事件最终会调用该方法\n\tprivate void onApplicationEnvironmentPreparedEvent(\n\t\t\tApplicationEnvironmentPreparedEvent event) {\n\t\tList<EnvironmentPostProcessor> postProcessors = loadPostProcessors();\n\t\tpostProcessors.add(this);\n\t\tAnnotationAwareOrderComparator.sort(postProcessors);\n        // 调用 EnvironmentPostProcessor 后处理器\n\t\tfor (EnvironmentPostProcessor postProcessor : postProcessors) {\n\t\t\tpostProcessor.postProcessEnvironment(event.getEnvironment(),\n\t\t\t\t\tevent.getSpringApplication());\n\t\t}\n\t}\n\n    // 使用 FactiriesLoader 加载 EnvironmentPostProcessor\n\tList<EnvironmentPostProcessor> loadPostProcessors() {\n\t\treturn SpringFactoriesLoader.loadFactories(EnvironmentPostProcessor.class,\n\t\t\t\tgetClass().getClassLoader());\n\t}\n\n    // 注意 他也是 实现了 EnvironmentPostProcessor 接口的\n    // 而且，也定义在了 spring.factories 中，所以 也会会掉这个方法\n    @Override\n\tpublic void postProcessEnvironment(ConfigurableEnvironment environment,\n\t\t\tSpringApplication application) {\n\t\taddPropertySources(environment, application.getResourceLoader());\n\t}\n\n    protected void addPropertySources(ConfigurableEnvironment environment,\n\t\t\tResourceLoader resourceLoader) {\n        // 在 systemEnvironment 后面 添加 name=random,value=new Random(); 的PropertySource\n\t\tRandomValuePropertySource.addToEnvironment(environment);\n\t\tnew Loader(environment, resourceLoader).load();\n\t}\n\n    ...\n}\n```\n\n\n<br>\n\n**`3.2 loadProperties`**\n\n<br>\n\n`Loader` 是 `ConfigFileApplicationListener` 的内部类。\n\n```java\nprivate class Loader {\n    Loader(ConfigurableEnvironment environment, ResourceLoader resourceLoader) {\n        this.environment = environment;\n        this.placeholdersResolver = new PropertySourcesPlaceholdersResolver(\n                this.environment);\n        this.resourceLoader = (resourceLoader != null) ? resourceLoader\n                : new DefaultResourceLoader();\n        // 找到的 PropertySourceLoader 有两个，分别是 PropertiesPropertySourceLoader和YamlPropertySourceLoader \n        this.propertySourceLoaders = SpringFactoriesLoader.loadFactories(\n                PropertySourceLoader.class, getClass().getClassLoader());\n    }\n\n    public void load() {\n        this.profiles = new LinkedList<>();\n        this.processedProfiles = new LinkedList<>();\n        this.activatedProfiles = false;\n        this.loaded = new LinkedHashMap<>();\n        // 初始化 profiles\n        // 首先会加入一个 null\n        // 如果 activeProfiles 不为null，加入到list中\n        // 为null，吧defaultProfiles 加入到list中\n        // 这里 我们配置了了 activeProfiles=wyj，所里里面有两个 一个null，一个 wyj\n        initializeProfiles();\n        while (!this.profiles.isEmpty()) {\n            Profile profile = this.profiles.poll();\n            if (profile != null && !profile.isDefaultProfile()) {\n                addProfileToEnvironment(profile.getName());\n            }\n            // 第二个参数 this::getPositiveProfileFilter 返回的是一个lambda 表达式的filter ，\n            // 第三个参数 addToLoaded(MutablePropertySources::addLast, false)，addToLoaded 返回的还是一个lambda表达式，整个的作用大概就是将解析出来的数据添加到 propertySources 的最后。\n            load(profile, this::getPositiveProfileFilter,\n                    addToLoaded(MutablePropertySources::addLast, false));\n            this.processedProfiles.add(profile);\n        }\n        resetEnvironmentProfiles(this.processedProfiles);\n        load(null, this::getNegativeProfileFilter,\n                addToLoaded(MutablePropertySources::addFirst, true));\n        addLoadedPropertySources();\n    }\n\n    ...\n\n}\n\n```\n\n<br>\n\n`load`\n\n```java\n// 整个代码逻辑 就是：\n// 获取所有扫描路径 和 扫描的文件名，然后便利load\nprivate void load(Profile profile, DocumentFilterFactory filterFactory,\n        DocumentConsumer consumer) {\n    getSearchLocations().forEach((location) -> {\n        boolean isFolder = location.endsWith(\"/\");\n        Set<String> names = isFolder ? getSearchNames() : NO_SEARCH_NAMES;\n        names.forEach(\n                (name) -> load(location, name, profile, filterFactory, consumer));\n    });\n}\n\n// 配置文件的路径\nprivate Set<String> getSearchLocations() {\n    // 首先如果配置了 spring.config.location ，就返回我们配置的路径\n    if (this.environment.containsProperty(CONFIG_LOCATION_PROPERTY)) {\n        return getSearchLocations(CONFIG_LOCATION_PROPERTY);\n    }\n    // 然后扫描 spring.config.additional-location 所配置的（这是让谁用的？可能是留给三方jar包的接口？）\n    Set<String> locations = getSearchLocations(\n            CONFIG_ADDITIONAL_LOCATION_PROPERTY);\n    // 最后加上默认的扫描路径。DEFAULT_SEARCH_LOCATIONS = classpath:/,classpath:/config/,file:./,file:./config/\n    locations.addAll(\n            asResolvedSet(ConfigFileApplicationListener.this.searchLocations,\n                    DEFAULT_SEARCH_LOCATIONS));\n    return locations;\n}\n\n// 配置文件的名字\nprivate Set<String> getSearchNames() {\n    // 如果配置了 spring.config.name 属性，会返回我们配置的 配置文件名字，\n    // 注意，这里可以配置多个 试用,分割\n    if (this.environment.containsProperty(CONFIG_NAME_PROPERTY)) {\n        String property = this.environment.getProperty(CONFIG_NAME_PROPERTY);\n        return asResolvedSet(property, null);\n    }\n    // 如果没有配置返回默认的 DEFAULT_NAMES=application\n    return asResolvedSet(ConfigFileApplicationListener.this.names, DEFAULT_NAMES);\n}\n\n// 真正的load方法\nprivate void load(String location, String name, Profile profile,\n        DocumentFilterFactory filterFactory, DocumentConsumer consumer) {\n    // 这块代码不知道 何时 运行，因为 name 一般不会为空啊\n    if (!StringUtils.hasText(name)) {\n        for (PropertySourceLoader loader : this.propertySourceLoaders) {\n            if (canLoadFileExtension(loader, location)) {\n                load(loader, location, profile,\n                        filterFactory.getDocumentFilter(profile), consumer);\n                return;\n            }\n        }\n    }\n\n    // loader 有两种，PropertiesPropertySourceLoader和YamlPropertySourceLoader \n    // 每个loader支持的文件后缀也有两种，分别便利，尝试去加载 \n    Set<String> processed = new HashSet<>();\n    for (PropertySourceLoader loader : this.propertySourceLoaders) {\n        for (String fileExtension : loader.getFileExtensions()) {\n            if (processed.add(fileExtension)) {\n                loadForFileExtension(loader, location + name, \".\" + fileExtension,\n                        profile, filterFactory, consumer);\n            }\n        }\n    }\n}\n\n\nprivate void loadForFileExtension(PropertySourceLoader loader, String prefix,\n        String fileExtension, Profile profile,\n        DocumentFilterFactory filterFactory, DocumentConsumer consumer) {\n    DocumentFilter defaultFilter = filterFactory.getDocumentFilter(null);\n    DocumentFilter profileFilter = filterFactory.getDocumentFilter(profile);\n    // 不为空 组织成 prefix-profile.fileExtension的文件，去加载\n    if (profile != null) {\n        // Try profile-specific file & profile section in profile file (gh-340)\n        String profileSpecificFile = prefix + \"-\" + profile + fileExtension;\n        load(loader, profileSpecificFile, profile, defaultFilter, consumer);\n        load(loader, profileSpecificFile, profile, profileFilter, consumer);\n        // Try profile specific sections in files we've already processed\n        for (Profile processedProfile : this.processedProfiles) {\n            if (processedProfile != null) {\n                String previouslyLoaded = prefix + \"-\" + processedProfile\n                        + fileExtension;\n                load(loader, previouslyLoaded, profile, profileFilter, consumer);\n            }\n        }\n    }\n    // Also try the profile-specific section (if any) of the normal file\n    // 为null，组织成 prefix.fileExtension的文件，去加载\n    // 所以在一开始的profiles中 要加入一个null，来加载 application.yml\n    load(loader, prefix + fileExtension, profile, profileFilter, consumer);\n}\n\n\nprivate void load(PropertySourceLoader loader, String location, Profile profile,\n        DocumentFilter filter, DocumentConsumer consumer) {\n    try {\n        Resource resource = this.resourceLoader.getResource(location);\n        if (resource == null || !resource.exists()) {\n            if (this.logger.isTraceEnabled()) {\n                StringBuilder description = getDescription(\n                        \"Skipped missing config \", location, resource, profile);\n                this.logger.trace(description);\n            }\n            return;\n        }\n        if (!StringUtils.hasText(\n                StringUtils.getFilenameExtension(resource.getFilename()))) {\n            if (this.logger.isTraceEnabled()) {\n                StringBuilder description = getDescription(\n                        \"Skipped empty config extension \", location, resource,\n                        profile);\n                this.logger.trace(description);\n            }\n            return;\n        }\n        // 之前两步都是在判断 有没有这个文件\n\n        //如果存在这个文件 name=applicationConfig: [classpath:/application.yml]\n        String name = \"applicationConfig: [\" + location + \"]\";\n        // 加载配置文件中的属性\n        List<Document> documents = loadDocuments(loader, name, resource);\n        // 为空，就是 里面没配置啥属性，还是返回\n        if (CollectionUtils.isEmpty(documents)) {\n            if (this.logger.isTraceEnabled()) {\n                StringBuilder description = getDescription(\n                        \"Skipped unloaded config \", location, resource, profile);\n                this.logger.trace(description);\n            }\n            return;\n        }\n\n        // 不知道 大家是否还记得 filter，在第一个load方法传入的参数，分析过了，是用来过滤属性的\n        List<Document> loaded = new ArrayList<>();\n        for (Document document : documents) {\n            if (filter.match(document)) {\n                addActiveProfiles(document.getActiveProfiles());\n                addIncludedProfiles(document.getIncludeProfiles());\n                loaded.add(document);\n            }\n        }\n\n        Collections.reverse(loaded);\n\n        // consume 也是一个 lambda，也是第一个load方法传入的参数，是用来添加到Environment\n        if (!loaded.isEmpty()) {\n            loaded.forEach((document) -> consumer.accept(profile, document));\n            if (this.logger.isDebugEnabled()) {\n                StringBuilder description = getDescription(\"Loaded config file \",\n                        location, resource, profile);\n                this.logger.debug(description);\n            }\n        }\n    }\n    catch (Exception ex) {\n        throw new IllegalStateException(\"Failed to load property \"\n                + \"source from location '\" + location + \"'\", ex);\n    }\n}\n\n```\n\n读源码的时候，一开始这里还是读的比较难受的，难受在使用了很多的lambda表达式，并且循环很多。但是 当理解了整个逻辑之后，还是非常清晰的。\n\n以我们当前环境，传入了参数 `--spring.profiles.active=wyj`\n\n1. 第一层循环：profiles=[null, wyj]\n2. 第二层循环：searchLocation=[classpath:/, classpath:/config/, file:./, file:./config/]\n3. 第三层循环：searchName=[application]\n4. 第四层循环：propertySourceLoaders=[PropertiesPropertySourceLoader, YamlPropertySourceLoader]\n5. 第五层循环：loader.getFileExtensions=[.xml, .properties] or [.yaml, .yml]\n\n**最后组织成`filename = searchLocation+searchName+\"-\"+profiles+fileExtension`，如果最后解析出来了，就以`\"applicationConfig: [\" + location + \"]\"`为propertySource的名字将他保存在Environment中。** \n\n<br>\n\n**`3.3. loadAfter`**\n\n最后全部配置文件都加载了之后，返回到一开始的load方法。\n\n执行 `addLoadedPropertySources()` 把刚刚加载出来的属性配置文件添加到envrioment 中。\n\n```java\nprivate void addLoadedPropertySources() {\n    MutablePropertySources destination = this.environment.getPropertySources();\n    // 刚刚解析出来的放在 loaded中\n    List<MutablePropertySources> loaded = new ArrayList<>(this.loaded.values());\n    // 上面也说过了，解析的顺序是 [null, wyj]，所以 需要反转，这样在遍历读取某个属性的时候，就可以使 application-wyj 的优先级比 application 高 \n    Collections.reverse(loaded);\n    String lastAdded = null;\n    Set<String> added = new HashSet<>();\n    for (MutablePropertySources sources : loaded) {\n        for (PropertySource<?> source : sources) {\n            if (added.add(source.getName())) {\n                addLoadedPropertySource(destination, lastAdded, source);\n                lastAdded = source.getName();\n            }\n        }\n    }\n}\n\n```\n\n从 `ConfigFileApplicationListener` 中出来，回到 SpringApplication中，就是一个bind，其他的也没什么了。\n\n到此结束。\n\n<br>\n\n\n- [Environment 和 PropertySource 讲解](https://www.jb51.net/article/145192.htm)\n- [spring boot实战(第六篇)加载application资源文件源码分析](https://blog.csdn.net/liaokailin/article/details/48878447)\n- [Spring3.1新属性管理API：PropertySource、Environment、Profile](http://jinnianshilongnian.iteye.com/blog/2000183)\n\n\n\n","source":"_posts/environment.md","raw":"---\ntitle: SpringBoot Environment\ncategories:\n  - SpringBoot\ntags:\n  - springboot\n  - 源码分析\n---\n\n# SpringBoot Environment\n\n<br>\n\n- [SpringBoot Environment](#springboot-environment)\n  - [背景类介绍](#背景类介绍)\n  - [源码分析 Environment 的初始化过程](#源码分析-environment-的初始化过程)\n\n<br>\n\n在SpringBoot中，每个`ApplicationContext`都有相应的环境信息，比如`AbstractApplicationContext`中就有`private ConfigurableEnvironment environment;` **Environment 可以理解为一些环境上下文，也就是存储了当前运行环境的各种属性。**\n\n下面就看看Environment到底是什么，以及在初始化的时候，他做了哪些相关工作。\n\n<br>\n\n------------\n\n## 背景类介绍\n\n<br>\n\n**`Environment && PropertyResolver`**\n\n<br>\n\n我们常使用的Environment就是`StandardServletEnvironment` ，那么首先我们就看看该类的体系结构。\n\n![|center](/images/springboot-environment-1.png)\n\n可以看到，`StandardServletEnvironment` 继承自 `StandardEnvironment`，实现了`ConfigurableWebEnvironment`接口。而再往下还有很多的接口定义和抽象类，下面我们都来看看。\n\n- `PropertyResolver` 提供了访问属性的接口定义，忽略底层resource的实现。\n- `Environment` 继承自`PropertyResolver`，提供访问和判断profiles的功能。\n- `ConfigurablePropertyResolver` 继承自`PropertyResolver`，主要提供属性类型转换(基于`org.springframework.core.convert.ConversionService`)功能。定义了`get|setConversionService,setValueSeparator,setPlaceholderPrefix|Suffix`等方法，就是丰富了解析的功能。\n- `ConfigurableEnvironment` 继承自`ConfigurablePropertyResolver`和Environment，并且提供设置激活的profile和默认的profile的功能。\n- `ConfigurableWebEnvironment` 继承自`ConfigurableEnvironment`，并且提供配置Servlet上下文和Servlet参数的功能。\n- `AbstractEnvironment` 实现了`ConfigurableEnvironment`接口，提供默认属性和存储容器的定义，并且为子类预留可覆盖了扩展方法。\n- `StandardEnvironment` 继承自`AbstractEnvironment`，非Servlet(Web)环境下的标准Environment实现。\n- `StandardServletEnvironment` 继承自`StandardEnvironment`，Servlet(Web)环境下的标准Environment实现。\n\n<br>\n\n如果有不是特别清楚的，可以结合代码看看每个类中方法的定义，就可以理解上面各个类的功能了。\n\n<br>\n\n**`PropertyResource`**\n\n<br>\n\n在`AbstractEnvironment`中，用来保存环境中各种属性的就是`MutablePropertySources`。下面从`MutablePropertySources`入手，了解整个`PropertyResource`\n\n```java\n/**\n * 该类提供了PropertySources的具体实现（也是唯一的），里面保存的是一个CopyOnWriteArrayList<PropertySource<?>>的数组。\n * 而且好提供了各种方法，用来插入、删除 list中的元素 PropertySource\n */\npublic class MutablePropertySources implements PropertySources {\n\n    // 这里定义了对多个PropertySource的真正数据结构是 CopyOnWriteArrayList<ropertySource<?>>\n\tprivate final List<PropertySource<?>> propertySourceList = new CopyOnWriteArrayList<>();\n\n    ...\n}\n```\n\n下面再看看 `PropertySources`\n\n```java\n/**\n * 就是定义了多个PropertySource，和containers 和 PropertySource get这种操作\n *\n */\npublic interface PropertySources extends Iterable<PropertySource<?>> {\n\n\t/**\n\t * Return a sequential {@link Stream} containing the property sources.\n\t * @since 5.1\n\t */\n\tdefault Stream<PropertySource<?>> stream() {\n\t\treturn StreamSupport.stream(spliterator(), false);\n\t}\n\n\t/**\n\t * Return whether a property source with the given name is contained.\n\t * @param name the {@linkplain PropertySource#getName() name of the property source} to find\n\t */\n\tboolean contains(String name);\n\n\t/**\n\t * Return the property source with the given name, {@code null} if not found.\n\t * @param name the {@linkplain PropertySource#getName() name of the property source} to find\n\t */\n\t@Nullable\n\tPropertySource<?> get(String name);\n\n}\n\n```\n\n<br>\n\n最后看看`PropertySource`，这里面还是有点东西的。\n\n```java\npublic abstract class PropertySource<T> {\n\n\tprotected final String name;\n\n\tprotected final T source;\n\n\tpublic PropertySource(String name, T source) {\n\t\tAssert.hasText(name, \"Property source name must contain at least one character\");\n\t\tAssert.notNull(source, \"Property source must not be null\");\n\t\tthis.name = name;\n\t\tthis.source = source;\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic PropertySource(String name) {\n\t\tthis(name, (T) new Object());\n\t}\n\n\n\tpublic String getName() {\n\t\treturn this.name;\n\t}\n\n\tpublic T getSource() {\n\t\treturn this.source;\n\t}\n\n\t/**\n\t * Return whether this {@code PropertySource} contains the given name.\n\t * <p>This implementation simply checks for a {@code null} return value\n\t * from {@link #getProperty(String)}. Subclasses may wish to implement\n\t * a more efficient algorithm if possible.\n\t * @param name the property name to find\n\t */\n\tpublic boolean containsProperty(String name) {\n\t\treturn (getProperty(name) != null);\n\t}\n\n\t/**\n\t * Return the value associated with the given name,\n\t * or {@code null} if not found.\n\t * @param name the property to find\n\t * @see PropertyResolver#getRequiredProperty(String)\n\t */\n\t@Nullable\n\tpublic abstract Object getProperty(String name);\n\n\n\t// equals 和 hashCode 都只和 name 属性相关\n\t@Override\n\tpublic boolean equals(Object other) {\n\t\treturn (this == other || (other instanceof PropertySource &&\n\t\t\t\tObjectUtils.nullSafeEquals(this.name, ((PropertySource<?>) other).name)));\n\t}\n\t@Override\n\tpublic int hashCode() {\n\t\treturn ObjectUtils.nullSafeHashCode(this.name);\n\t}\n\n\n    // 把String类型的name转换为一个可以判断存在与否的 ComparisonPropertySource\n    // 正好 判断 equals 只根据name，所以这里也是妥妥的\n\t/**\n\t * Return a {@code PropertySource} implementation intended for collection comparison purposes only.\n\t * <p>Primarily for internal use, but given a collection of {@code PropertySource} objects, may be\n\t * used as follows:\n\t * <pre class=\"code\">\n\t * {@code List<PropertySource<?>> sources = new ArrayList<PropertySource<?>>();\n\t * sources.add(new MapPropertySource(\"sourceA\", mapA));\n\t * sources.add(new MapPropertySource(\"sourceB\", mapB));\n\t * assert sources.contains(PropertySource.named(\"sourceA\"));\n\t * assert sources.contains(PropertySource.named(\"sourceB\"));\n\t * assert !sources.contains(PropertySource.named(\"sourceC\"));\n\t * }</pre>\n\t * The returned {@code PropertySource} will throw {@code UnsupportedOperationException}\n\t * if any methods other than {@code equals(Object)}, {@code hashCode()}, and {@code toString()}\n\t * are called.\n\t * @param name the name of the comparison {@code PropertySource} to be created and returned.\n\t */\n\tpublic static PropertySource<?> named(String name) {\n\t\treturn new ComparisonPropertySource(name);\n\t}\n\n\n\t/**\n\t * {@code PropertySource} to be used as a placeholder in cases where an actual\n\t * property source cannot be eagerly initialized at application context\n\t * creation time.  For example, a {@code ServletContext}-based property source\n\t * must wait until the {@code ServletContext} object is available to its enclosing\n\t * {@code ApplicationContext}.  In such cases, a stub should be used to hold the\n\t * intended default position/order of the property source, then be replaced\n\t * during context refresh.\n     * 上面的注释也写的很清楚了，就是用来占位的，因为有一些PropertySource的初始化较晚，比如说 ServletContext相关的环境，在\n     * 初始化的时候是没有的，可以用改对象来占位。\n\t * @see org.springframework.context.support.AbstractApplicationContext#initPropertySources()\n\t * @see org.springframework.web.context.support.StandardServletEnvironment\n\t * @see org.springframework.web.context.support.ServletContextPropertySource\n\t */\n\tpublic static class StubPropertySource extends PropertySource<Object> {\n\n\t\tpublic StubPropertySource(String name) {\n\t\t\tsuper(name, new Object());\n\t\t}\n\n\t\t/**\n\t\t * Always returns {@code null}.\n\t\t */\n\t\t@Override\n\t\t@Nullable\n\t\tpublic String getProperty(String name) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\n\t/**\n\t * PropertySource.named(String) 返回的就是该类型的对象。\n     * 该子类是专门用来封装String类型的name，做比较的，而且他的所有getSource等相关方法，全都是抛出异常\n\t */\n\tstatic class ComparisonPropertySource extends StubPropertySource {\n\n\t\tprivate static final String USAGE_ERROR =\n\t\t\t\t\"ComparisonPropertySource instances are for use with collection comparison only\";\n\n\t\tpublic ComparisonPropertySource(String name) {\n\t\t\tsuper(name);\n\t\t}\n\n\t\t@Override\n\t\tpublic Object getSource() {\n\t\t\tthrow new UnsupportedOperationException(USAGE_ERROR);\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean containsProperty(String name) {\n\t\t\tthrow new UnsupportedOperationException(USAGE_ERROR);\n\t\t}\n\n\t\t@Override\n\t\t@Nullable\n\t\tpublic String getProperty(String name) {\n\t\t\tthrow new UnsupportedOperationException(USAGE_ERROR);\n\t\t}\n\t}\n\n}\n```\n\n这个`PropertySource`类和map这种的用来存储键值对的类稍微有一点不一样，PropertySource中的source是随意类型的，而且key-value都是存在source里面的。可以简单的看一下常用的两个实现`MapPropertySource`,``\n\n```java\npublic class MapPropertySource extends EnumerablePropertySource<Map<String, Object>> {\n\n\tpublic MapPropertySource(String name, Map<String, Object> source) {\n\t\tsuper(name, source);\n\t}\n\n\t@Override\n\t@Nullable\n\tpublic Object getProperty(String name) {\n\t\treturn this.source.get(name);\n\t}\n\n\t@Override\n\tpublic boolean containsProperty(String name) {\n\t\treturn this.source.containsKey(name);\n\t}\n\n\t@Override\n\tpublic String[] getPropertyNames() {\n\t\treturn StringUtils.toStringArray(this.source.keySet());\n\t}\n\n}\n\n\npublic class PropertiesPropertySource extends MapPropertySource {\n\n\t@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n\tpublic PropertiesPropertySource(String name, Properties source) {\n\t\tsuper(name, (Map) source);\n\t}\n\n\tprotected PropertiesPropertySource(String name, Map<String, Object> source) {\n\t\tsuper(name, source);\n\t}\n\n}\n```\n\n<br>\n\n最后，我们知道`AbstractEnvironment`中存储的是`MutablePropertySources`, 是一个数组，那么在`Environment`中怎么getProperty的呢？\n\n```java\npublic abstract class AbstractEnvironment implements ConfigurableEnvironment {\n\n    ...\n\n    private final ConfigurablePropertyResolver propertyResolver =\n\t\t\tnew PropertySourcesPropertyResolver(this.propertySources);\n\n    // 是代理给了 PropertySourcesPropertyResolver propertyResolver\n\t@Override\n\t@Nullable\n\tpublic String getProperty(String key) {\n\t\treturn this.propertyResolver.getProperty(key);\n\t}\n}\n\npublic class PropertySourcesPropertyResolver extends AbstractPropertyResolver {\n\n\t@Nullable\n\tprivate final PropertySources propertySources;\n\n\t@Override\n\t@Nullable\n\tpublic String getProperty(String key) {\n\t\treturn getProperty(key, String.class, true);\n\t}\n\n    // 其实就是扫描 PropertySources 中 所有的 PropertySource 查每个PropertySource中是否存在\n\t@Nullable\n\tprotected <T> T getProperty(String key, Class<T> targetValueType, boolean resolveNestedPlaceholders) {\n\t\tif (this.propertySources != null) {\n\t\t\tfor (PropertySource<?> propertySource : this.propertySources) {\n\t\t\t\tObject value = propertySource.getProperty(key);\n\t\t\t\tif (value != null) {\n\t\t\t\t\tif (resolveNestedPlaceholders && value instanceof String) {\n\t\t\t\t\t\tvalue = resolveNestedPlaceholders((String) value);\n\t\t\t\t\t}\n\t\t\t\t\tlogKeyFound(key, propertySource, value);\n\t\t\t\t\treturn convertValueIfNecessary(value, targetValueType);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n    ...\n}\n\n```\n\n<br>\n\n---------------\n\n## 源码分析 Environment 的初始化过程\n\n入口点在`SpringApplication.run`方法的`ConfigurableEnvironment environment = prepareEnvironment(listeners,applicationArguments);`。\n\n```java\n// environment 在该方法中完成整个初始化\nprivate ConfigurableEnvironment prepareEnvironment(\n        SpringApplicationRunListeners listeners,\n        ApplicationArguments applicationArguments) {\n    // 根据不同的环境创建不同的 Environment 实例\n    ConfigurableEnvironment environment = getOrCreateEnvironment();\n    // configEnvironment 为初始化 Environment 准备好数据\n    configureEnvironment(environment, applicationArguments.getSourceArgs());\n    listeners.environmentPrepared(environment);\n    bindToSpringApplication(environment);\n    if (!this.isCustomEnvironment) {\n        environment = new EnvironmentConverter(getClassLoader())\n                .convertEnvironmentIfNecessary(environment, deduceEnvironmentClass());\n    }\n    ConfigurationPropertySources.attach(environment);\n    return environment;\n}\n```\n\n<br>\n\n**`1. createEnvironment`**\n\n<br>\n\n首先根据不同的 applicationType 创建不同的Environment，这里创建的是 `StandardServletEnvironment`\n\n```java\nprivate ConfigurableEnvironment getOrCreateEnvironment() {\n    if (this.environment != null) {\n        return this.environment;\n    }\n    switch (this.webApplicationType) {\n    case SERVLET:\n        return new StandardServletEnvironment();\n    case REACTIVE:\n        return new StandardReactiveWebEnvironment();\n    default:\n        return new StandardEnvironment();\n    }\n}\n\n```\n\n之前说过，`StandardServletEnvironment extends StandardEnvironment`, `StandardEnvironment extends AbstractEnvironment`。所以创建`StandardServletEnvironment`实例，首先会执行父类`AbstractEnvironment`的构造方法（因为这里子类没有实现构造方法），它里面又调用了`customizePropertySources`方法，`StandardServletEnvironment`实现了该方法，所以又会回来调用这个方法。\n\n创建`StandardServletEnvironment`实例的代码会按照代码实际的执行顺序，在下面罗列出来。\n\n```java\n// AbstractEnvironment\npublic AbstractEnvironment() {\n    // 留给子类实现 方法添加propertySource\n    customizePropertySources(this.propertySources);\n}\n\n//StandardServletEnvironment\n@Override\nprotected void customizePropertySources(MutablePropertySources propertySources) {\n    //name=servletConfigInitParams, 给 Servlet configInitParams 占位 \n    propertySources.addLast(new StubPropertySource(SERVLET_CONFIG_PROPERTY_SOURCE_NAME));\n    // servletContextInitParams 给 Servlet contextInitParams 占位\n    propertySources.addLast(new StubPropertySource(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME));\n    if (JndiLocatorDelegate.isDefaultJndiEnvironmentAvailable()) {\n        propertySources.addLast(new JndiPropertySource(JNDI_PROPERTY_SOURCE_NAME));\n    }\n    super.customizePropertySources(propertySources);\n}\n\n// StandardEnvironment\nprotected void customizePropertySources(MutablePropertySources propertySources) {\n    // systemProperties 放入系统环境 键值对\n    propertySources.addLast(new MapPropertySource(SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME, getSystemProperties()));\n    propertySources.addLast(new SystemEnvironmentPropertySource(SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME, getSystemEnvironment()));\n}\n\n```\n\n为什么要用`SubPropertySource`占位，而且还要注意顺序呢？\n\n会想一下，`Environment.getProperty` 的过程，是扫描数组中的每一个`PropertySource`看是否有该property，所以也会涉及到这几个环境优先级的问题。\n\n\n<br>\n\n**`2. configEnvironment`**\n\n<br>\n\n```java\nprotected void configureEnvironment(ConfigurableEnvironment environment,\n        String[] args) {\n    if (this.addConversionService) {\n        // 创建并 返回 ConversionService，这是一个相当庞大的转换Service，用来在读取配置文件的时候，将各种数据类型转换为合适的数据类型\n        ConversionService conversionService = ApplicationConversionService\n                .getSharedInstance();\n        environment.setConversionService(\n                (ConfigurableConversionService) conversionService);\n    }\n    configurePropertySources(environment, args);\n    configureProfiles(environment, args);\n}\n\n// 如果 运行的时候传入了参数，那么会将它保存在 name=springApplicationCommandLineArgs 的propertySource中\nprotected void configurePropertySources(ConfigurableEnvironment environment,\n        String[] args) {\n    MutablePropertySources sources = environment.getPropertySources();\n    if (this.defaultProperties != null && !this.defaultProperties.isEmpty()) {\n        sources.addLast(\n                new MapPropertySource(\"defaultProperties\", this.defaultProperties));\n    }\n    if (this.addCommandLineProperties && args.length > 0) {\n        String name = CommandLinePropertySource.COMMAND_LINE_PROPERTY_SOURCE_NAME;\n        if (sources.contains(name)) {\n            PropertySource<?> source = sources.get(name);\n            CompositePropertySource composite = new CompositePropertySource(name);\n            composite.addPropertySource(new SimpleCommandLinePropertySource(\n                    \"springApplicationCommandLineArgs\", args));\n            composite.addPropertySource(source);\n            sources.replace(name, composite);\n        }\n        else {\n            // 如果有的话，默认会将用户传入的配置 放到第一位。\n            // 所以我们的配置 优先级总是最高的。\n            // 我们传入的 参数 spring.profiles.active=wyj 就会在这里放入 MutablPropertySources 中\n            sources.addFirst(new SimpleCommandLinePropertySource(args));\n        }\n    }\n}\n\nprotected void configureProfiles(ConfigurableEnvironment environment, String[] args) {\n    // 初始化 environment 中的 activeProfiles\n    environment.getActiveProfiles(); // ensure they are initialized\n    // But these ones should go first (last wins in a property key clash)\n    // activePrifiles中加入 ApplicationContext中 额外 用户配置的 additionalProfiles\n    Set<String> profiles = new LinkedHashSet<>(this.additionalProfiles);\n    profiles.addAll(Arrays.asList(environment.getActiveProfiles()));\n    environment.setActiveProfiles(StringUtils.toStringArray(profiles));\n}\n\n\nprotected Set<String> doGetActiveProfiles() {\n    synchronized (this.activeProfiles) {\n        if (this.activeProfiles.isEmpty()) {\n            // 会读取到 已经放入到 PropertySources 中，运行程序时 我们传入的参数。\n            String profiles = getProperty(ACTIVE_PROFILES_PROPERTY_NAME);   // spring.profiles.active\n            if (StringUtils.hasText(profiles)) {\n                // 这里还可以发现，我们可以传入多个 active profiles，用,分割\n                setActiveProfiles(StringUtils.commaDelimitedListToStringArray(\n                        StringUtils.trimAllWhitespace(profiles)));\n            }\n        }\n        return this.activeProfiles;\n    }\n}\n\n```\n\n所以他一共干了三件事：\n\n1. 初始化`ConvertService`\n2. 读取用户运行程序时传入的配置，并保存在Envrionment\n3. 找到active profiles\n\n下面看看 `ConvertService` 中 都是什么：\n\n![|center](/images/springboot-environment-2.png)\n\n![|center](/images/springboot-environment-3.png)\n\n<br>\n\n**`3.1 preLoadProperties`**\n\n<br>\n\n下面就是发出`ApplicationEnvironmentPreparedEvent`事件。\n\n会有好几个listener，我们关心的是`ConfigFileApplicationListener`，下面是几个关心的方法：\n\n```java\npublic class ConfigFileApplicationListener\n\t\timplements EnvironmentPostProcessor, SmartApplicationListener, Ordered {\n    \n    // ApplicationEnvironmentPreparedEvent 事件最终会调用该方法\n\tprivate void onApplicationEnvironmentPreparedEvent(\n\t\t\tApplicationEnvironmentPreparedEvent event) {\n\t\tList<EnvironmentPostProcessor> postProcessors = loadPostProcessors();\n\t\tpostProcessors.add(this);\n\t\tAnnotationAwareOrderComparator.sort(postProcessors);\n        // 调用 EnvironmentPostProcessor 后处理器\n\t\tfor (EnvironmentPostProcessor postProcessor : postProcessors) {\n\t\t\tpostProcessor.postProcessEnvironment(event.getEnvironment(),\n\t\t\t\t\tevent.getSpringApplication());\n\t\t}\n\t}\n\n    // 使用 FactiriesLoader 加载 EnvironmentPostProcessor\n\tList<EnvironmentPostProcessor> loadPostProcessors() {\n\t\treturn SpringFactoriesLoader.loadFactories(EnvironmentPostProcessor.class,\n\t\t\t\tgetClass().getClassLoader());\n\t}\n\n    // 注意 他也是 实现了 EnvironmentPostProcessor 接口的\n    // 而且，也定义在了 spring.factories 中，所以 也会会掉这个方法\n    @Override\n\tpublic void postProcessEnvironment(ConfigurableEnvironment environment,\n\t\t\tSpringApplication application) {\n\t\taddPropertySources(environment, application.getResourceLoader());\n\t}\n\n    protected void addPropertySources(ConfigurableEnvironment environment,\n\t\t\tResourceLoader resourceLoader) {\n        // 在 systemEnvironment 后面 添加 name=random,value=new Random(); 的PropertySource\n\t\tRandomValuePropertySource.addToEnvironment(environment);\n\t\tnew Loader(environment, resourceLoader).load();\n\t}\n\n    ...\n}\n```\n\n\n<br>\n\n**`3.2 loadProperties`**\n\n<br>\n\n`Loader` 是 `ConfigFileApplicationListener` 的内部类。\n\n```java\nprivate class Loader {\n    Loader(ConfigurableEnvironment environment, ResourceLoader resourceLoader) {\n        this.environment = environment;\n        this.placeholdersResolver = new PropertySourcesPlaceholdersResolver(\n                this.environment);\n        this.resourceLoader = (resourceLoader != null) ? resourceLoader\n                : new DefaultResourceLoader();\n        // 找到的 PropertySourceLoader 有两个，分别是 PropertiesPropertySourceLoader和YamlPropertySourceLoader \n        this.propertySourceLoaders = SpringFactoriesLoader.loadFactories(\n                PropertySourceLoader.class, getClass().getClassLoader());\n    }\n\n    public void load() {\n        this.profiles = new LinkedList<>();\n        this.processedProfiles = new LinkedList<>();\n        this.activatedProfiles = false;\n        this.loaded = new LinkedHashMap<>();\n        // 初始化 profiles\n        // 首先会加入一个 null\n        // 如果 activeProfiles 不为null，加入到list中\n        // 为null，吧defaultProfiles 加入到list中\n        // 这里 我们配置了了 activeProfiles=wyj，所里里面有两个 一个null，一个 wyj\n        initializeProfiles();\n        while (!this.profiles.isEmpty()) {\n            Profile profile = this.profiles.poll();\n            if (profile != null && !profile.isDefaultProfile()) {\n                addProfileToEnvironment(profile.getName());\n            }\n            // 第二个参数 this::getPositiveProfileFilter 返回的是一个lambda 表达式的filter ，\n            // 第三个参数 addToLoaded(MutablePropertySources::addLast, false)，addToLoaded 返回的还是一个lambda表达式，整个的作用大概就是将解析出来的数据添加到 propertySources 的最后。\n            load(profile, this::getPositiveProfileFilter,\n                    addToLoaded(MutablePropertySources::addLast, false));\n            this.processedProfiles.add(profile);\n        }\n        resetEnvironmentProfiles(this.processedProfiles);\n        load(null, this::getNegativeProfileFilter,\n                addToLoaded(MutablePropertySources::addFirst, true));\n        addLoadedPropertySources();\n    }\n\n    ...\n\n}\n\n```\n\n<br>\n\n`load`\n\n```java\n// 整个代码逻辑 就是：\n// 获取所有扫描路径 和 扫描的文件名，然后便利load\nprivate void load(Profile profile, DocumentFilterFactory filterFactory,\n        DocumentConsumer consumer) {\n    getSearchLocations().forEach((location) -> {\n        boolean isFolder = location.endsWith(\"/\");\n        Set<String> names = isFolder ? getSearchNames() : NO_SEARCH_NAMES;\n        names.forEach(\n                (name) -> load(location, name, profile, filterFactory, consumer));\n    });\n}\n\n// 配置文件的路径\nprivate Set<String> getSearchLocations() {\n    // 首先如果配置了 spring.config.location ，就返回我们配置的路径\n    if (this.environment.containsProperty(CONFIG_LOCATION_PROPERTY)) {\n        return getSearchLocations(CONFIG_LOCATION_PROPERTY);\n    }\n    // 然后扫描 spring.config.additional-location 所配置的（这是让谁用的？可能是留给三方jar包的接口？）\n    Set<String> locations = getSearchLocations(\n            CONFIG_ADDITIONAL_LOCATION_PROPERTY);\n    // 最后加上默认的扫描路径。DEFAULT_SEARCH_LOCATIONS = classpath:/,classpath:/config/,file:./,file:./config/\n    locations.addAll(\n            asResolvedSet(ConfigFileApplicationListener.this.searchLocations,\n                    DEFAULT_SEARCH_LOCATIONS));\n    return locations;\n}\n\n// 配置文件的名字\nprivate Set<String> getSearchNames() {\n    // 如果配置了 spring.config.name 属性，会返回我们配置的 配置文件名字，\n    // 注意，这里可以配置多个 试用,分割\n    if (this.environment.containsProperty(CONFIG_NAME_PROPERTY)) {\n        String property = this.environment.getProperty(CONFIG_NAME_PROPERTY);\n        return asResolvedSet(property, null);\n    }\n    // 如果没有配置返回默认的 DEFAULT_NAMES=application\n    return asResolvedSet(ConfigFileApplicationListener.this.names, DEFAULT_NAMES);\n}\n\n// 真正的load方法\nprivate void load(String location, String name, Profile profile,\n        DocumentFilterFactory filterFactory, DocumentConsumer consumer) {\n    // 这块代码不知道 何时 运行，因为 name 一般不会为空啊\n    if (!StringUtils.hasText(name)) {\n        for (PropertySourceLoader loader : this.propertySourceLoaders) {\n            if (canLoadFileExtension(loader, location)) {\n                load(loader, location, profile,\n                        filterFactory.getDocumentFilter(profile), consumer);\n                return;\n            }\n        }\n    }\n\n    // loader 有两种，PropertiesPropertySourceLoader和YamlPropertySourceLoader \n    // 每个loader支持的文件后缀也有两种，分别便利，尝试去加载 \n    Set<String> processed = new HashSet<>();\n    for (PropertySourceLoader loader : this.propertySourceLoaders) {\n        for (String fileExtension : loader.getFileExtensions()) {\n            if (processed.add(fileExtension)) {\n                loadForFileExtension(loader, location + name, \".\" + fileExtension,\n                        profile, filterFactory, consumer);\n            }\n        }\n    }\n}\n\n\nprivate void loadForFileExtension(PropertySourceLoader loader, String prefix,\n        String fileExtension, Profile profile,\n        DocumentFilterFactory filterFactory, DocumentConsumer consumer) {\n    DocumentFilter defaultFilter = filterFactory.getDocumentFilter(null);\n    DocumentFilter profileFilter = filterFactory.getDocumentFilter(profile);\n    // 不为空 组织成 prefix-profile.fileExtension的文件，去加载\n    if (profile != null) {\n        // Try profile-specific file & profile section in profile file (gh-340)\n        String profileSpecificFile = prefix + \"-\" + profile + fileExtension;\n        load(loader, profileSpecificFile, profile, defaultFilter, consumer);\n        load(loader, profileSpecificFile, profile, profileFilter, consumer);\n        // Try profile specific sections in files we've already processed\n        for (Profile processedProfile : this.processedProfiles) {\n            if (processedProfile != null) {\n                String previouslyLoaded = prefix + \"-\" + processedProfile\n                        + fileExtension;\n                load(loader, previouslyLoaded, profile, profileFilter, consumer);\n            }\n        }\n    }\n    // Also try the profile-specific section (if any) of the normal file\n    // 为null，组织成 prefix.fileExtension的文件，去加载\n    // 所以在一开始的profiles中 要加入一个null，来加载 application.yml\n    load(loader, prefix + fileExtension, profile, profileFilter, consumer);\n}\n\n\nprivate void load(PropertySourceLoader loader, String location, Profile profile,\n        DocumentFilter filter, DocumentConsumer consumer) {\n    try {\n        Resource resource = this.resourceLoader.getResource(location);\n        if (resource == null || !resource.exists()) {\n            if (this.logger.isTraceEnabled()) {\n                StringBuilder description = getDescription(\n                        \"Skipped missing config \", location, resource, profile);\n                this.logger.trace(description);\n            }\n            return;\n        }\n        if (!StringUtils.hasText(\n                StringUtils.getFilenameExtension(resource.getFilename()))) {\n            if (this.logger.isTraceEnabled()) {\n                StringBuilder description = getDescription(\n                        \"Skipped empty config extension \", location, resource,\n                        profile);\n                this.logger.trace(description);\n            }\n            return;\n        }\n        // 之前两步都是在判断 有没有这个文件\n\n        //如果存在这个文件 name=applicationConfig: [classpath:/application.yml]\n        String name = \"applicationConfig: [\" + location + \"]\";\n        // 加载配置文件中的属性\n        List<Document> documents = loadDocuments(loader, name, resource);\n        // 为空，就是 里面没配置啥属性，还是返回\n        if (CollectionUtils.isEmpty(documents)) {\n            if (this.logger.isTraceEnabled()) {\n                StringBuilder description = getDescription(\n                        \"Skipped unloaded config \", location, resource, profile);\n                this.logger.trace(description);\n            }\n            return;\n        }\n\n        // 不知道 大家是否还记得 filter，在第一个load方法传入的参数，分析过了，是用来过滤属性的\n        List<Document> loaded = new ArrayList<>();\n        for (Document document : documents) {\n            if (filter.match(document)) {\n                addActiveProfiles(document.getActiveProfiles());\n                addIncludedProfiles(document.getIncludeProfiles());\n                loaded.add(document);\n            }\n        }\n\n        Collections.reverse(loaded);\n\n        // consume 也是一个 lambda，也是第一个load方法传入的参数，是用来添加到Environment\n        if (!loaded.isEmpty()) {\n            loaded.forEach((document) -> consumer.accept(profile, document));\n            if (this.logger.isDebugEnabled()) {\n                StringBuilder description = getDescription(\"Loaded config file \",\n                        location, resource, profile);\n                this.logger.debug(description);\n            }\n        }\n    }\n    catch (Exception ex) {\n        throw new IllegalStateException(\"Failed to load property \"\n                + \"source from location '\" + location + \"'\", ex);\n    }\n}\n\n```\n\n读源码的时候，一开始这里还是读的比较难受的，难受在使用了很多的lambda表达式，并且循环很多。但是 当理解了整个逻辑之后，还是非常清晰的。\n\n以我们当前环境，传入了参数 `--spring.profiles.active=wyj`\n\n1. 第一层循环：profiles=[null, wyj]\n2. 第二层循环：searchLocation=[classpath:/, classpath:/config/, file:./, file:./config/]\n3. 第三层循环：searchName=[application]\n4. 第四层循环：propertySourceLoaders=[PropertiesPropertySourceLoader, YamlPropertySourceLoader]\n5. 第五层循环：loader.getFileExtensions=[.xml, .properties] or [.yaml, .yml]\n\n**最后组织成`filename = searchLocation+searchName+\"-\"+profiles+fileExtension`，如果最后解析出来了，就以`\"applicationConfig: [\" + location + \"]\"`为propertySource的名字将他保存在Environment中。** \n\n<br>\n\n**`3.3. loadAfter`**\n\n最后全部配置文件都加载了之后，返回到一开始的load方法。\n\n执行 `addLoadedPropertySources()` 把刚刚加载出来的属性配置文件添加到envrioment 中。\n\n```java\nprivate void addLoadedPropertySources() {\n    MutablePropertySources destination = this.environment.getPropertySources();\n    // 刚刚解析出来的放在 loaded中\n    List<MutablePropertySources> loaded = new ArrayList<>(this.loaded.values());\n    // 上面也说过了，解析的顺序是 [null, wyj]，所以 需要反转，这样在遍历读取某个属性的时候，就可以使 application-wyj 的优先级比 application 高 \n    Collections.reverse(loaded);\n    String lastAdded = null;\n    Set<String> added = new HashSet<>();\n    for (MutablePropertySources sources : loaded) {\n        for (PropertySource<?> source : sources) {\n            if (added.add(source.getName())) {\n                addLoadedPropertySource(destination, lastAdded, source);\n                lastAdded = source.getName();\n            }\n        }\n    }\n}\n\n```\n\n从 `ConfigFileApplicationListener` 中出来，回到 SpringApplication中，就是一个bind，其他的也没什么了。\n\n到此结束。\n\n<br>\n\n\n- [Environment 和 PropertySource 讲解](https://www.jb51.net/article/145192.htm)\n- [spring boot实战(第六篇)加载application资源文件源码分析](https://blog.csdn.net/liaokailin/article/details/48878447)\n- [Spring3.1新属性管理API：PropertySource、Environment、Profile](http://jinnianshilongnian.iteye.com/blog/2000183)\n\n\n\n","slug":"environment","published":1,"date":"2019-02-14T08:20:42.203Z","updated":"2019-02-14T08:34:25.181Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt9ymryc000plf6vrbq9l7ei","content":"<h1 id=\"SpringBoot-Environment\"><a href=\"#SpringBoot-Environment\" class=\"headerlink\" title=\"SpringBoot Environment\"></a>SpringBoot Environment</h1><p><br></p>\n<ul>\n<li><a href=\"#springboot-environment\">SpringBoot Environment</a><ul>\n<li><a href=\"#背景类介绍\">背景类介绍</a></li>\n<li><a href=\"#源码分析-environment-的初始化过程\">源码分析 Environment 的初始化过程</a></li>\n</ul>\n</li>\n</ul>\n<p><br></p>\n<p>在SpringBoot中，每个<code>ApplicationContext</code>都有相应的环境信息，比如<code>AbstractApplicationContext</code>中就有<code>private ConfigurableEnvironment environment;</code> <strong>Environment 可以理解为一些环境上下文，也就是存储了当前运行环境的各种属性。</strong></p>\n<p>下面就看看Environment到底是什么，以及在初始化的时候，他做了哪些相关工作。</p>\n<p><br></p>\n<hr>\n<h2 id=\"背景类介绍\"><a href=\"#背景类介绍\" class=\"headerlink\" title=\"背景类介绍\"></a>背景类介绍</h2><p><br></p>\n<p><strong><code>Environment &amp;&amp; PropertyResolver</code></strong></p>\n<p><br></p>\n<p>我们常使用的Environment就是<code>StandardServletEnvironment</code> ，那么首先我们就看看该类的体系结构。</p>\n<p><img src=\"/images/springboot-environment-1.png\" alt=\"|center\"></p>\n<p>可以看到，<code>StandardServletEnvironment</code> 继承自 <code>StandardEnvironment</code>，实现了<code>ConfigurableWebEnvironment</code>接口。而再往下还有很多的接口定义和抽象类，下面我们都来看看。</p>\n<ul>\n<li><code>PropertyResolver</code> 提供了访问属性的接口定义，忽略底层resource的实现。</li>\n<li><code>Environment</code> 继承自<code>PropertyResolver</code>，提供访问和判断profiles的功能。</li>\n<li><code>ConfigurablePropertyResolver</code> 继承自<code>PropertyResolver</code>，主要提供属性类型转换(基于<code>org.springframework.core.convert.ConversionService</code>)功能。定义了<code>get|setConversionService,setValueSeparator,setPlaceholderPrefix|Suffix</code>等方法，就是丰富了解析的功能。</li>\n<li><code>ConfigurableEnvironment</code> 继承自<code>ConfigurablePropertyResolver</code>和Environment，并且提供设置激活的profile和默认的profile的功能。</li>\n<li><code>ConfigurableWebEnvironment</code> 继承自<code>ConfigurableEnvironment</code>，并且提供配置Servlet上下文和Servlet参数的功能。</li>\n<li><code>AbstractEnvironment</code> 实现了<code>ConfigurableEnvironment</code>接口，提供默认属性和存储容器的定义，并且为子类预留可覆盖了扩展方法。</li>\n<li><code>StandardEnvironment</code> 继承自<code>AbstractEnvironment</code>，非Servlet(Web)环境下的标准Environment实现。</li>\n<li><code>StandardServletEnvironment</code> 继承自<code>StandardEnvironment</code>，Servlet(Web)环境下的标准Environment实现。</li>\n</ul>\n<p><br></p>\n<p>如果有不是特别清楚的，可以结合代码看看每个类中方法的定义，就可以理解上面各个类的功能了。</p>\n<p><br></p>\n<p><strong><code>PropertyResource</code></strong></p>\n<p><br></p>\n<p>在<code>AbstractEnvironment</code>中，用来保存环境中各种属性的就是<code>MutablePropertySources</code>。下面从<code>MutablePropertySources</code>入手，了解整个<code>PropertyResource</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 该类提供了PropertySources的具体实现（也是唯一的），里面保存的是一个CopyOnWriteArrayList&lt;PropertySource&lt;?&gt;&gt;的数组。</span></span><br><span class=\"line\"><span class=\"comment\"> * 而且好提供了各种方法，用来插入、删除 list中的元素 PropertySource</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MutablePropertySources</span> <span class=\"keyword\">implements</span> <span class=\"title\">PropertySources</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这里定义了对多个PropertySource的真正数据结构是 CopyOnWriteArrayList&lt;ropertySource&lt;?&gt;&gt;</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;PropertySource&lt;?&gt;&gt; propertySourceList = <span class=\"keyword\">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面再看看 <code>PropertySources</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 就是定义了多个PropertySource，和containers 和 PropertySource get这种操作</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PropertySources</span> <span class=\"keyword\">extends</span> <span class=\"title\">Iterable</span>&lt;<span class=\"title\">PropertySource</span>&lt;?&gt;&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return a sequential &#123;<span class=\"doctag\">@link</span> Stream&#125; containing the property sources.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@since</span> 5.1</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">default</span> Stream&lt;PropertySource&lt;?&gt;&gt; stream() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> StreamSupport.stream(spliterator(), <span class=\"keyword\">false</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return whether a property source with the given name is contained.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> name the &#123;<span class=\"doctag\">@linkplain</span> PropertySource#getName() name of the property source&#125; to find</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(String name)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return the property source with the given name, &#123;<span class=\"doctag\">@code</span> null&#125; if not found.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> name the &#123;<span class=\"doctag\">@linkplain</span> PropertySource#getName() name of the property source&#125; to find</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\tPropertySource&lt;?&gt; get(String name);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p>最后看看<code>PropertySource</code>，这里面还是有点东西的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PropertySource</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> T source;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PropertySource</span><span class=\"params\">(String name, T source)</span> </span>&#123;</span><br><span class=\"line\">\t\tAssert.hasText(name, <span class=\"string\">\"Property source name must contain at least one character\"</span>);</span><br><span class=\"line\">\t\tAssert.notNull(source, <span class=\"string\">\"Property source must not be null\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.source = source;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PropertySource</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>(name, (T) <span class=\"keyword\">new</span> Object());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.source;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return whether this &#123;<span class=\"doctag\">@code</span> PropertySource&#125; contains the given name.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;This implementation simply checks for a &#123;<span class=\"doctag\">@code</span> null&#125; return value</span></span><br><span class=\"line\"><span class=\"comment\">\t * from &#123;<span class=\"doctag\">@link</span> #getProperty(String)&#125;. Subclasses may wish to implement</span></span><br><span class=\"line\"><span class=\"comment\">\t * a more efficient algorithm if possible.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> name the property name to find</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">containsProperty</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (getProperty(name) != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return the value associated with the given name,</span></span><br><span class=\"line\"><span class=\"comment\">\t * or &#123;<span class=\"doctag\">@code</span> null&#125; if not found.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> name the property to find</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@see</span> PropertyResolver#getRequiredProperty(String)</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Object <span class=\"title\">getProperty</span><span class=\"params\">(String name)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// equals 和 hashCode 都只和 name 属性相关</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object other)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (<span class=\"keyword\">this</span> == other || (other <span class=\"keyword\">instanceof</span> PropertySource &amp;&amp;</span><br><span class=\"line\">\t\t\t\tObjectUtils.nullSafeEquals(<span class=\"keyword\">this</span>.name, ((PropertySource&lt;?&gt;) other).name)));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ObjectUtils.nullSafeHashCode(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 把String类型的name转换为一个可以判断存在与否的 ComparisonPropertySource</span></span><br><span class=\"line\">    <span class=\"comment\">// 正好 判断 equals 只根据name，所以这里也是妥妥的</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return a &#123;<span class=\"doctag\">@code</span> PropertySource&#125; implementation intended for collection comparison purposes only.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;Primarily for internal use, but given a collection of &#123;<span class=\"doctag\">@code</span> PropertySource&#125; objects, may be</span></span><br><span class=\"line\"><span class=\"comment\">\t * used as follows:</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;pre class=\"code\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@code</span> List&lt;PropertySource&lt;?&gt;&gt; sources = new ArrayList&lt;PropertySource&lt;?&gt;&gt;();</span></span><br><span class=\"line\"><span class=\"comment\">\t * sources.add(new MapPropertySource(\"sourceA\", mapA));</span></span><br><span class=\"line\"><span class=\"comment\">\t * sources.add(new MapPropertySource(\"sourceB\", mapB));</span></span><br><span class=\"line\"><span class=\"comment\">\t * assert sources.contains(PropertySource.named(\"sourceA\"));</span></span><br><span class=\"line\"><span class=\"comment\">\t * assert sources.contains(PropertySource.named(\"sourceB\"));</span></span><br><span class=\"line\"><span class=\"comment\">\t * assert !sources.contains(PropertySource.named(\"sourceC\"));</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#125;&lt;/pre&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t * The returned &#123;<span class=\"doctag\">@code</span> PropertySource&#125; will throw &#123;<span class=\"doctag\">@code</span> UnsupportedOperationException&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t * if any methods other than &#123;<span class=\"doctag\">@code</span> equals(Object)&#125;, &#123;<span class=\"doctag\">@code</span> hashCode()&#125;, and &#123;<span class=\"doctag\">@code</span> toString()&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t * are called.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> name the name of the comparison &#123;<span class=\"doctag\">@code</span> PropertySource&#125; to be created and returned.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> PropertySource&lt;?&gt; named(String name) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ComparisonPropertySource(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@code</span> PropertySource&#125; to be used as a placeholder in cases where an actual</span></span><br><span class=\"line\"><span class=\"comment\">\t * property source cannot be eagerly initialized at application context</span></span><br><span class=\"line\"><span class=\"comment\">\t * creation time.  For example, a &#123;<span class=\"doctag\">@code</span> ServletContext&#125;-based property source</span></span><br><span class=\"line\"><span class=\"comment\">\t * must wait until the &#123;<span class=\"doctag\">@code</span> ServletContext&#125; object is available to its enclosing</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@code</span> ApplicationContext&#125;.  In such cases, a stub should be used to hold the</span></span><br><span class=\"line\"><span class=\"comment\">\t * intended default position/order of the property source, then be replaced</span></span><br><span class=\"line\"><span class=\"comment\">\t * during context refresh.</span></span><br><span class=\"line\"><span class=\"comment\">     * 上面的注释也写的很清楚了，就是用来占位的，因为有一些PropertySource的初始化较晚，比如说 ServletContext相关的环境，在</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化的时候是没有的，可以用改对象来占位。</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@see</span> org.springframework.context.support.AbstractApplicationContext#initPropertySources()</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@see</span> org.springframework.web.context.support.StandardServletEnvironment</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@see</span> org.springframework.web.context.support.ServletContextPropertySource</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StubPropertySource</span> <span class=\"keyword\">extends</span> <span class=\"title\">PropertySource</span>&lt;<span class=\"title\">Object</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StubPropertySource</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">super</span>(name, <span class=\"keyword\">new</span> Object());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * Always returns &#123;<span class=\"doctag\">@code</span> null&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getProperty</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * PropertySource.named(String) 返回的就是该类型的对象。</span></span><br><span class=\"line\"><span class=\"comment\">     * 该子类是专门用来封装String类型的name，做比较的，而且他的所有getSource等相关方法，全都是抛出异常</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComparisonPropertySource</span> <span class=\"keyword\">extends</span> <span class=\"title\">StubPropertySource</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String USAGE_ERROR =</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">\"ComparisonPropertySource instances are for use with collection comparison only\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ComparisonPropertySource</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(USAGE_ERROR);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">containsProperty</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(USAGE_ERROR);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getProperty</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(USAGE_ERROR);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个<code>PropertySource</code>类和map这种的用来存储键值对的类稍微有一点不一样，PropertySource中的source是随意类型的，而且key-value都是存在source里面的。可以简单的看一下常用的两个实现<code>MapPropertySource</code>,<code></code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MapPropertySource</span> <span class=\"keyword\">extends</span> <span class=\"title\">EnumerablePropertySource</span>&lt;<span class=\"title\">Map</span>&lt;<span class=\"title\">String</span>, <span class=\"title\">Object</span>&gt;&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MapPropertySource</span><span class=\"params\">(String name, Map&lt;String, Object&gt; source)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(name, source);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getProperty</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.source.get(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">containsProperty</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.source.containsKey(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String[] getPropertyNames() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> StringUtils.toStringArray(<span class=\"keyword\">this</span>.source.keySet());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PropertiesPropertySource</span> <span class=\"keyword\">extends</span> <span class=\"title\">MapPropertySource</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(&#123;<span class=\"string\">\"unchecked\"</span>, <span class=\"string\">\"rawtypes\"</span>&#125;)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PropertiesPropertySource</span><span class=\"params\">(String name, Properties source)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(name, (Map) source);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">PropertiesPropertySource</span><span class=\"params\">(String name, Map&lt;String, Object&gt; source)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(name, source);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p>最后，我们知道<code>AbstractEnvironment</code>中存储的是<code>MutablePropertySources</code>, 是一个数组，那么在<code>Environment</code>中怎么getProperty的呢？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractEnvironment</span> <span class=\"keyword\">implements</span> <span class=\"title\">ConfigurableEnvironment</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ConfigurablePropertyResolver propertyResolver =</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> PropertySourcesPropertyResolver(<span class=\"keyword\">this</span>.propertySources);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 是代理给了 PropertySourcesPropertyResolver propertyResolver</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getProperty</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.propertyResolver.getProperty(key);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PropertySourcesPropertyResolver</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractPropertyResolver</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> PropertySources propertySources;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getProperty</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> getProperty(key, String.class, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 其实就是扫描 PropertySources 中 所有的 PropertySource 查每个PropertySource中是否存在</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">getProperty</span><span class=\"params\">(String key, Class&lt;T&gt; targetValueType, <span class=\"keyword\">boolean</span> resolveNestedPlaceholders)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.propertySources != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (PropertySource&lt;?&gt; propertySource : <span class=\"keyword\">this</span>.propertySources) &#123;</span><br><span class=\"line\">\t\t\t\tObject value = propertySource.getProperty(key);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (value != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (resolveNestedPlaceholders &amp;&amp; value <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tvalue = resolveNestedPlaceholders((String) value);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tlogKeyFound(key, propertySource, value);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> convertValueIfNecessary(value, targetValueType);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<hr>\n<h2 id=\"源码分析-Environment-的初始化过程\"><a href=\"#源码分析-Environment-的初始化过程\" class=\"headerlink\" title=\"源码分析 Environment 的初始化过程\"></a>源码分析 Environment 的初始化过程</h2><p>入口点在<code>SpringApplication.run</code>方法的<code>ConfigurableEnvironment environment = prepareEnvironment(listeners,applicationArguments);</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// environment 在该方法中完成整个初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ConfigurableEnvironment <span class=\"title\">prepareEnvironment</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        SpringApplicationRunListeners listeners,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        ApplicationArguments applicationArguments)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 根据不同的环境创建不同的 Environment 实例</span></span><br><span class=\"line\">    ConfigurableEnvironment environment = getOrCreateEnvironment();</span><br><span class=\"line\">    <span class=\"comment\">// configEnvironment 为初始化 Environment 准备好数据</span></span><br><span class=\"line\">    configureEnvironment(environment, applicationArguments.getSourceArgs());</span><br><span class=\"line\">    listeners.environmentPrepared(environment);</span><br><span class=\"line\">    bindToSpringApplication(environment);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.isCustomEnvironment) &#123;</span><br><span class=\"line\">        environment = <span class=\"keyword\">new</span> EnvironmentConverter(getClassLoader())</span><br><span class=\"line\">                .convertEnvironmentIfNecessary(environment, deduceEnvironmentClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ConfigurationPropertySources.attach(environment);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> environment;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><strong><code>1. createEnvironment</code></strong></p>\n<p><br></p>\n<p>首先根据不同的 applicationType 创建不同的Environment，这里创建的是 <code>StandardServletEnvironment</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ConfigurableEnvironment <span class=\"title\">getOrCreateEnvironment</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.environment != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.environment;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (<span class=\"keyword\">this</span>.webApplicationType) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> SERVLET:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> StandardServletEnvironment();</span><br><span class=\"line\">    <span class=\"keyword\">case</span> REACTIVE:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> StandardReactiveWebEnvironment();</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> StandardEnvironment();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>之前说过，<code>StandardServletEnvironment extends StandardEnvironment</code>, <code>StandardEnvironment extends AbstractEnvironment</code>。所以创建<code>StandardServletEnvironment</code>实例，首先会执行父类<code>AbstractEnvironment</code>的构造方法（因为这里子类没有实现构造方法），它里面又调用了<code>customizePropertySources</code>方法，<code>StandardServletEnvironment</code>实现了该方法，所以又会回来调用这个方法。</p>\n<p>创建<code>StandardServletEnvironment</code>实例的代码会按照代码实际的执行顺序，在下面罗列出来。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AbstractEnvironment</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AbstractEnvironment</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 留给子类实现 方法添加propertySource</span></span><br><span class=\"line\">    customizePropertySources(<span class=\"keyword\">this</span>.propertySources);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//StandardServletEnvironment</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">customizePropertySources</span><span class=\"params\">(MutablePropertySources propertySources)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//name=servletConfigInitParams, 给 Servlet configInitParams 占位 </span></span><br><span class=\"line\">    propertySources.addLast(<span class=\"keyword\">new</span> StubPropertySource(SERVLET_CONFIG_PROPERTY_SOURCE_NAME));</span><br><span class=\"line\">    <span class=\"comment\">// servletContextInitParams 给 Servlet contextInitParams 占位</span></span><br><span class=\"line\">    propertySources.addLast(<span class=\"keyword\">new</span> StubPropertySource(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (JndiLocatorDelegate.isDefaultJndiEnvironmentAvailable()) &#123;</span><br><span class=\"line\">        propertySources.addLast(<span class=\"keyword\">new</span> JndiPropertySource(JNDI_PROPERTY_SOURCE_NAME));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.customizePropertySources(propertySources);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// StandardEnvironment</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">customizePropertySources</span><span class=\"params\">(MutablePropertySources propertySources)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// systemProperties 放入系统环境 键值对</span></span><br><span class=\"line\">    propertySources.addLast(<span class=\"keyword\">new</span> MapPropertySource(SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME, getSystemProperties()));</span><br><span class=\"line\">    propertySources.addLast(<span class=\"keyword\">new</span> SystemEnvironmentPropertySource(SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME, getSystemEnvironment()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为什么要用<code>SubPropertySource</code>占位，而且还要注意顺序呢？</p>\n<p>会想一下，<code>Environment.getProperty</code> 的过程，是扫描数组中的每一个<code>PropertySource</code>看是否有该property，所以也会涉及到这几个环境优先级的问题。</p>\n<p><br></p>\n<p><strong><code>2. configEnvironment</code></strong></p>\n<p><br></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configureEnvironment</span><span class=\"params\">(ConfigurableEnvironment environment,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.addConversionService) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建并 返回 ConversionService，这是一个相当庞大的转换Service，用来在读取配置文件的时候，将各种数据类型转换为合适的数据类型</span></span><br><span class=\"line\">        ConversionService conversionService = ApplicationConversionService</span><br><span class=\"line\">                .getSharedInstance();</span><br><span class=\"line\">        environment.setConversionService(</span><br><span class=\"line\">                (ConfigurableConversionService) conversionService);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    configurePropertySources(environment, args);</span><br><span class=\"line\">    configureProfiles(environment, args);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果 运行的时候传入了参数，那么会将它保存在 name=springApplicationCommandLineArgs 的propertySource中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configurePropertySources</span><span class=\"params\">(ConfigurableEnvironment environment,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        String[] args)</span> </span>&#123;</span><br><span class=\"line\">    MutablePropertySources sources = environment.getPropertySources();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.defaultProperties != <span class=\"keyword\">null</span> &amp;&amp; !<span class=\"keyword\">this</span>.defaultProperties.isEmpty()) &#123;</span><br><span class=\"line\">        sources.addLast(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> MapPropertySource(<span class=\"string\">\"defaultProperties\"</span>, <span class=\"keyword\">this</span>.defaultProperties));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.addCommandLineProperties &amp;&amp; args.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        String name = CommandLinePropertySource.COMMAND_LINE_PROPERTY_SOURCE_NAME;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sources.contains(name)) &#123;</span><br><span class=\"line\">            PropertySource&lt;?&gt; source = sources.get(name);</span><br><span class=\"line\">            CompositePropertySource composite = <span class=\"keyword\">new</span> CompositePropertySource(name);</span><br><span class=\"line\">            composite.addPropertySource(<span class=\"keyword\">new</span> SimpleCommandLinePropertySource(</span><br><span class=\"line\">                    <span class=\"string\">\"springApplicationCommandLineArgs\"</span>, args));</span><br><span class=\"line\">            composite.addPropertySource(source);</span><br><span class=\"line\">            sources.replace(name, composite);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果有的话，默认会将用户传入的配置 放到第一位。</span></span><br><span class=\"line\">            <span class=\"comment\">// 所以我们的配置 优先级总是最高的。</span></span><br><span class=\"line\">            <span class=\"comment\">// 我们传入的 参数 spring.profiles.active=wyj 就会在这里放入 MutablPropertySources 中</span></span><br><span class=\"line\">            sources.addFirst(<span class=\"keyword\">new</span> SimpleCommandLinePropertySource(args));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configureProfiles</span><span class=\"params\">(ConfigurableEnvironment environment, String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化 environment 中的 activeProfiles</span></span><br><span class=\"line\">    environment.getActiveProfiles(); <span class=\"comment\">// ensure they are initialized</span></span><br><span class=\"line\">    <span class=\"comment\">// But these ones should go first (last wins in a property key clash)</span></span><br><span class=\"line\">    <span class=\"comment\">// activePrifiles中加入 ApplicationContext中 额外 用户配置的 additionalProfiles</span></span><br><span class=\"line\">    Set&lt;String&gt; profiles = <span class=\"keyword\">new</span> LinkedHashSet&lt;&gt;(<span class=\"keyword\">this</span>.additionalProfiles);</span><br><span class=\"line\">    profiles.addAll(Arrays.asList(environment.getActiveProfiles()));</span><br><span class=\"line\">    environment.setActiveProfiles(StringUtils.toStringArray(profiles));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Set&lt;String&gt; <span class=\"title\">doGetActiveProfiles</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.activeProfiles) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.activeProfiles.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 会读取到 已经放入到 PropertySources 中，运行程序时 我们传入的参数。</span></span><br><span class=\"line\">            String profiles = getProperty(ACTIVE_PROFILES_PROPERTY_NAME);   <span class=\"comment\">// spring.profiles.active</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (StringUtils.hasText(profiles)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 这里还可以发现，我们可以传入多个 active profiles，用,分割</span></span><br><span class=\"line\">                setActiveProfiles(StringUtils.commaDelimitedListToStringArray(</span><br><span class=\"line\">                        StringUtils.trimAllWhitespace(profiles)));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.activeProfiles;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以他一共干了三件事：</p>\n<ol>\n<li>初始化<code>ConvertService</code></li>\n<li>读取用户运行程序时传入的配置，并保存在Envrionment</li>\n<li>找到active profiles</li>\n</ol>\n<p>下面看看 <code>ConvertService</code> 中 都是什么：</p>\n<p><img src=\"/images/springboot-environment-2.png\" alt=\"|center\"></p>\n<p><img src=\"/images/springboot-environment-3.png\" alt=\"|center\"></p>\n<p><br></p>\n<p><strong><code>3.1 preLoadProperties</code></strong></p>\n<p><br></p>\n<p>下面就是发出<code>ApplicationEnvironmentPreparedEvent</code>事件。</p>\n<p>会有好几个listener，我们关心的是<code>ConfigFileApplicationListener</code>，下面是几个关心的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConfigFileApplicationListener</span></span></span><br><span class=\"line\"><span class=\"class\">\t\t<span class=\"keyword\">implements</span> <span class=\"title\">EnvironmentPostProcessor</span>, <span class=\"title\">SmartApplicationListener</span>, <span class=\"title\">Ordered</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// ApplicationEnvironmentPreparedEvent 事件最终会调用该方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">onApplicationEnvironmentPreparedEvent</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\tApplicationEnvironmentPreparedEvent event)</span> </span>&#123;</span><br><span class=\"line\">\t\tList&lt;EnvironmentPostProcessor&gt; postProcessors = loadPostProcessors();</span><br><span class=\"line\">\t\tpostProcessors.add(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t\tAnnotationAwareOrderComparator.sort(postProcessors);</span><br><span class=\"line\">        <span class=\"comment\">// 调用 EnvironmentPostProcessor 后处理器</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (EnvironmentPostProcessor postProcessor : postProcessors) &#123;</span><br><span class=\"line\">\t\t\tpostProcessor.postProcessEnvironment(event.getEnvironment(),</span><br><span class=\"line\">\t\t\t\t\tevent.getSpringApplication());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用 FactiriesLoader 加载 EnvironmentPostProcessor</span></span><br><span class=\"line\">\t<span class=\"function\">List&lt;EnvironmentPostProcessor&gt; <span class=\"title\">loadPostProcessors</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> SpringFactoriesLoader.loadFactories(EnvironmentPostProcessor.class,</span><br><span class=\"line\">\t\t\t\tgetClass().getClassLoader());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 注意 他也是 实现了 EnvironmentPostProcessor 接口的</span></span><br><span class=\"line\">    <span class=\"comment\">// 而且，也定义在了 spring.factories 中，所以 也会会掉这个方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postProcessEnvironment</span><span class=\"params\">(ConfigurableEnvironment environment,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\tSpringApplication application)</span> </span>&#123;</span><br><span class=\"line\">\t\taddPropertySources(environment, application.getResourceLoader());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">addPropertySources</span><span class=\"params\">(ConfigurableEnvironment environment,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\tResourceLoader resourceLoader)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在 systemEnvironment 后面 添加 name=random,value=new Random(); 的PropertySource</span></span><br><span class=\"line\">\t\tRandomValuePropertySource.addToEnvironment(environment);</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Loader(environment, resourceLoader).load();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><strong><code>3.2 loadProperties</code></strong></p>\n<p><br></p>\n<p><code>Loader</code> 是 <code>ConfigFileApplicationListener</code> 的内部类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Loader</span> </span>&#123;</span><br><span class=\"line\">    Loader(ConfigurableEnvironment environment, ResourceLoader resourceLoader) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.environment = environment;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.placeholdersResolver = <span class=\"keyword\">new</span> PropertySourcesPlaceholdersResolver(</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.environment);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.resourceLoader = (resourceLoader != <span class=\"keyword\">null</span>) ? resourceLoader</span><br><span class=\"line\">                : <span class=\"keyword\">new</span> DefaultResourceLoader();</span><br><span class=\"line\">        <span class=\"comment\">// 找到的 PropertySourceLoader 有两个，分别是 PropertiesPropertySourceLoader和YamlPropertySourceLoader </span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.propertySourceLoaders = SpringFactoriesLoader.loadFactories(</span><br><span class=\"line\">                PropertySourceLoader.class, getClass().getClassLoader());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">load</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.profiles = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.processedProfiles = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.activatedProfiles = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.loaded = <span class=\"keyword\">new</span> LinkedHashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 初始化 profiles</span></span><br><span class=\"line\">        <span class=\"comment\">// 首先会加入一个 null</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果 activeProfiles 不为null，加入到list中</span></span><br><span class=\"line\">        <span class=\"comment\">// 为null，吧defaultProfiles 加入到list中</span></span><br><span class=\"line\">        <span class=\"comment\">// 这里 我们配置了了 activeProfiles=wyj，所里里面有两个 一个null，一个 wyj</span></span><br><span class=\"line\">        initializeProfiles();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!<span class=\"keyword\">this</span>.profiles.isEmpty()) &#123;</span><br><span class=\"line\">            Profile profile = <span class=\"keyword\">this</span>.profiles.poll();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (profile != <span class=\"keyword\">null</span> &amp;&amp; !profile.isDefaultProfile()) &#123;</span><br><span class=\"line\">                addProfileToEnvironment(profile.getName());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 第二个参数 this::getPositiveProfileFilter 返回的是一个lambda 表达式的filter ，</span></span><br><span class=\"line\">            <span class=\"comment\">// 第三个参数 addToLoaded(MutablePropertySources::addLast, false)，addToLoaded 返回的还是一个lambda表达式，整个的作用大概就是将解析出来的数据添加到 propertySources 的最后。</span></span><br><span class=\"line\">            load(profile, <span class=\"keyword\">this</span>::getPositiveProfileFilter,</span><br><span class=\"line\">                    addToLoaded(MutablePropertySources::addLast, <span class=\"keyword\">false</span>));</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.processedProfiles.add(profile);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        resetEnvironmentProfiles(<span class=\"keyword\">this</span>.processedProfiles);</span><br><span class=\"line\">        load(<span class=\"keyword\">null</span>, <span class=\"keyword\">this</span>::getNegativeProfileFilter,</span><br><span class=\"line\">                addToLoaded(MutablePropertySources::addFirst, <span class=\"keyword\">true</span>));</span><br><span class=\"line\">        addLoadedPropertySources();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><code>load</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 整个代码逻辑 就是：</span></span><br><span class=\"line\"><span class=\"comment\">// 获取所有扫描路径 和 扫描的文件名，然后便利load</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">load</span><span class=\"params\">(Profile profile, DocumentFilterFactory filterFactory,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        DocumentConsumer consumer)</span> </span>&#123;</span><br><span class=\"line\">    getSearchLocations().forEach((location) -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> isFolder = location.endsWith(<span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">        Set&lt;String&gt; names = isFolder ? getSearchNames() : NO_SEARCH_NAMES;</span><br><span class=\"line\">        names.forEach(</span><br><span class=\"line\">                (name) -&gt; load(location, name, profile, filterFactory, consumer));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置文件的路径</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Set&lt;String&gt; <span class=\"title\">getSearchLocations</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 首先如果配置了 spring.config.location ，就返回我们配置的路径</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.environment.containsProperty(CONFIG_LOCATION_PROPERTY)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getSearchLocations(CONFIG_LOCATION_PROPERTY);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 然后扫描 spring.config.additional-location 所配置的（这是让谁用的？可能是留给三方jar包的接口？）</span></span><br><span class=\"line\">    Set&lt;String&gt; locations = getSearchLocations(</span><br><span class=\"line\">            CONFIG_ADDITIONAL_LOCATION_PROPERTY);</span><br><span class=\"line\">    <span class=\"comment\">// 最后加上默认的扫描路径。DEFAULT_SEARCH_LOCATIONS = classpath:/,classpath:/config/,file:./,file:./config/</span></span><br><span class=\"line\">    locations.addAll(</span><br><span class=\"line\">            asResolvedSet(ConfigFileApplicationListener.<span class=\"keyword\">this</span>.searchLocations,</span><br><span class=\"line\">                    DEFAULT_SEARCH_LOCATIONS));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> locations;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置文件的名字</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Set&lt;String&gt; <span class=\"title\">getSearchNames</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果配置了 spring.config.name 属性，会返回我们配置的 配置文件名字，</span></span><br><span class=\"line\">    <span class=\"comment\">// 注意，这里可以配置多个 试用,分割</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.environment.containsProperty(CONFIG_NAME_PROPERTY)) &#123;</span><br><span class=\"line\">        String property = <span class=\"keyword\">this</span>.environment.getProperty(CONFIG_NAME_PROPERTY);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> asResolvedSet(property, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果没有配置返回默认的 DEFAULT_NAMES=application</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> asResolvedSet(ConfigFileApplicationListener.<span class=\"keyword\">this</span>.names, DEFAULT_NAMES);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 真正的load方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">load</span><span class=\"params\">(String location, String name, Profile profile,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        DocumentFilterFactory filterFactory, DocumentConsumer consumer)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这块代码不知道 何时 运行，因为 name 一般不会为空啊</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!StringUtils.hasText(name)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (PropertySourceLoader loader : <span class=\"keyword\">this</span>.propertySourceLoaders) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (canLoadFileExtension(loader, location)) &#123;</span><br><span class=\"line\">                load(loader, location, profile,</span><br><span class=\"line\">                        filterFactory.getDocumentFilter(profile), consumer);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// loader 有两种，PropertiesPropertySourceLoader和YamlPropertySourceLoader </span></span><br><span class=\"line\">    <span class=\"comment\">// 每个loader支持的文件后缀也有两种，分别便利，尝试去加载 </span></span><br><span class=\"line\">    Set&lt;String&gt; processed = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (PropertySourceLoader loader : <span class=\"keyword\">this</span>.propertySourceLoaders) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String fileExtension : loader.getFileExtensions()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (processed.add(fileExtension)) &#123;</span><br><span class=\"line\">                loadForFileExtension(loader, location + name, <span class=\"string\">\".\"</span> + fileExtension,</span><br><span class=\"line\">                        profile, filterFactory, consumer);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">loadForFileExtension</span><span class=\"params\">(PropertySourceLoader loader, String prefix,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        String fileExtension, Profile profile,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        DocumentFilterFactory filterFactory, DocumentConsumer consumer)</span> </span>&#123;</span><br><span class=\"line\">    DocumentFilter defaultFilter = filterFactory.getDocumentFilter(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    DocumentFilter profileFilter = filterFactory.getDocumentFilter(profile);</span><br><span class=\"line\">    <span class=\"comment\">// 不为空 组织成 prefix-profile.fileExtension的文件，去加载</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (profile != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Try profile-specific file &amp; profile section in profile file (gh-340)</span></span><br><span class=\"line\">        String profileSpecificFile = prefix + <span class=\"string\">\"-\"</span> + profile + fileExtension;</span><br><span class=\"line\">        load(loader, profileSpecificFile, profile, defaultFilter, consumer);</span><br><span class=\"line\">        load(loader, profileSpecificFile, profile, profileFilter, consumer);</span><br><span class=\"line\">        <span class=\"comment\">// Try profile specific sections in files we've already processed</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Profile processedProfile : <span class=\"keyword\">this</span>.processedProfiles) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (processedProfile != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                String previouslyLoaded = prefix + <span class=\"string\">\"-\"</span> + processedProfile</span><br><span class=\"line\">                        + fileExtension;</span><br><span class=\"line\">                load(loader, previouslyLoaded, profile, profileFilter, consumer);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Also try the profile-specific section (if any) of the normal file</span></span><br><span class=\"line\">    <span class=\"comment\">// 为null，组织成 prefix.fileExtension的文件，去加载</span></span><br><span class=\"line\">    <span class=\"comment\">// 所以在一开始的profiles中 要加入一个null，来加载 application.yml</span></span><br><span class=\"line\">    load(loader, prefix + fileExtension, profile, profileFilter, consumer);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">load</span><span class=\"params\">(PropertySourceLoader loader, String location, Profile profile,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        DocumentFilter filter, DocumentConsumer consumer)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Resource resource = <span class=\"keyword\">this</span>.resourceLoader.getResource(location);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (resource == <span class=\"keyword\">null</span> || !resource.exists()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">                StringBuilder description = getDescription(</span><br><span class=\"line\">                        <span class=\"string\">\"Skipped missing config \"</span>, location, resource, profile);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.logger.trace(description);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.hasText(</span><br><span class=\"line\">                StringUtils.getFilenameExtension(resource.getFilename()))) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">                StringBuilder description = getDescription(</span><br><span class=\"line\">                        <span class=\"string\">\"Skipped empty config extension \"</span>, location, resource,</span><br><span class=\"line\">                        profile);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.logger.trace(description);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 之前两步都是在判断 有没有这个文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//如果存在这个文件 name=applicationConfig: [classpath:/application.yml]</span></span><br><span class=\"line\">        String name = <span class=\"string\">\"applicationConfig: [\"</span> + location + <span class=\"string\">\"]\"</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 加载配置文件中的属性</span></span><br><span class=\"line\">        List&lt;Document&gt; documents = loadDocuments(loader, name, resource);</span><br><span class=\"line\">        <span class=\"comment\">// 为空，就是 里面没配置啥属性，还是返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (CollectionUtils.isEmpty(documents)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">                StringBuilder description = getDescription(</span><br><span class=\"line\">                        <span class=\"string\">\"Skipped unloaded config \"</span>, location, resource, profile);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.logger.trace(description);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 不知道 大家是否还记得 filter，在第一个load方法传入的参数，分析过了，是用来过滤属性的</span></span><br><span class=\"line\">        List&lt;Document&gt; loaded = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Document document : documents) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (filter.match(document)) &#123;</span><br><span class=\"line\">                addActiveProfiles(document.getActiveProfiles());</span><br><span class=\"line\">                addIncludedProfiles(document.getIncludeProfiles());</span><br><span class=\"line\">                loaded.add(document);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Collections.reverse(loaded);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// consume 也是一个 lambda，也是第一个load方法传入的参数，是用来添加到Environment</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!loaded.isEmpty()) &#123;</span><br><span class=\"line\">            loaded.forEach((document) -&gt; consumer.accept(profile, document));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">                StringBuilder description = getDescription(<span class=\"string\">\"Loaded config file \"</span>,</span><br><span class=\"line\">                        location, resource, profile);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.logger.debug(description);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Failed to load property \"</span></span><br><span class=\"line\">                + <span class=\"string\">\"source from location '\"</span> + location + <span class=\"string\">\"'\"</span>, ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>读源码的时候，一开始这里还是读的比较难受的，难受在使用了很多的lambda表达式，并且循环很多。但是 当理解了整个逻辑之后，还是非常清晰的。</p>\n<p>以我们当前环境，传入了参数 <code>--spring.profiles.active=wyj</code></p>\n<ol>\n<li>第一层循环：profiles=[null, wyj]</li>\n<li>第二层循环：searchLocation=[classpath:/, classpath:/config/, file:./, file:./config/]</li>\n<li>第三层循环：searchName=[application]</li>\n<li>第四层循环：propertySourceLoaders=[PropertiesPropertySourceLoader, YamlPropertySourceLoader]</li>\n<li>第五层循环：loader.getFileExtensions=[.xml, .properties] or [.yaml, .yml]</li>\n</ol>\n<p><strong>最后组织成<code>filename = searchLocation+searchName+&quot;-&quot;+profiles+fileExtension</code>，如果最后解析出来了，就以<code>&quot;applicationConfig: [&quot; + location + &quot;]&quot;</code>为propertySource的名字将他保存在Environment中。</strong> </p>\n<p><br></p>\n<p><strong><code>3.3. loadAfter</code></strong></p>\n<p>最后全部配置文件都加载了之后，返回到一开始的load方法。</p>\n<p>执行 <code>addLoadedPropertySources()</code> 把刚刚加载出来的属性配置文件添加到envrioment 中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addLoadedPropertySources</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    MutablePropertySources destination = <span class=\"keyword\">this</span>.environment.getPropertySources();</span><br><span class=\"line\">    <span class=\"comment\">// 刚刚解析出来的放在 loaded中</span></span><br><span class=\"line\">    List&lt;MutablePropertySources&gt; loaded = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"keyword\">this</span>.loaded.values());</span><br><span class=\"line\">    <span class=\"comment\">// 上面也说过了，解析的顺序是 [null, wyj]，所以 需要反转，这样在遍历读取某个属性的时候，就可以使 application-wyj 的优先级比 application 高 </span></span><br><span class=\"line\">    Collections.reverse(loaded);</span><br><span class=\"line\">    String lastAdded = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    Set&lt;String&gt; added = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (MutablePropertySources sources : loaded) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (PropertySource&lt;?&gt; source : sources) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (added.add(source.getName())) &#123;</span><br><span class=\"line\">                addLoadedPropertySource(destination, lastAdded, source);</span><br><span class=\"line\">                lastAdded = source.getName();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从 <code>ConfigFileApplicationListener</code> 中出来，回到 SpringApplication中，就是一个bind，其他的也没什么了。</p>\n<p>到此结束。</p>\n<p><br></p>\n<ul>\n<li><a href=\"https://www.jb51.net/article/145192.htm\" target=\"_blank\" rel=\"noopener\">Environment 和 PropertySource 讲解</a></li>\n<li><a href=\"https://blog.csdn.net/liaokailin/article/details/48878447\" target=\"_blank\" rel=\"noopener\">spring boot实战(第六篇)加载application资源文件源码分析</a></li>\n<li><a href=\"http://jinnianshilongnian.iteye.com/blog/2000183\" target=\"_blank\" rel=\"noopener\">Spring3.1新属性管理API：PropertySource、Environment、Profile</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringBoot-Environment\"><a href=\"#SpringBoot-Environment\" class=\"headerlink\" title=\"SpringBoot Environment\"></a>SpringBoot Environment</h1><p><br></p>\n<ul>\n<li><a href=\"#springboot-environment\">SpringBoot Environment</a><ul>\n<li><a href=\"#背景类介绍\">背景类介绍</a></li>\n<li><a href=\"#源码分析-environment-的初始化过程\">源码分析 Environment 的初始化过程</a></li>\n</ul>\n</li>\n</ul>\n<p><br></p>\n<p>在SpringBoot中，每个<code>ApplicationContext</code>都有相应的环境信息，比如<code>AbstractApplicationContext</code>中就有<code>private ConfigurableEnvironment environment;</code> <strong>Environment 可以理解为一些环境上下文，也就是存储了当前运行环境的各种属性。</strong></p>\n<p>下面就看看Environment到底是什么，以及在初始化的时候，他做了哪些相关工作。</p>\n<p><br></p>\n<hr>\n<h2 id=\"背景类介绍\"><a href=\"#背景类介绍\" class=\"headerlink\" title=\"背景类介绍\"></a>背景类介绍</h2><p><br></p>\n<p><strong><code>Environment &amp;&amp; PropertyResolver</code></strong></p>\n<p><br></p>\n<p>我们常使用的Environment就是<code>StandardServletEnvironment</code> ，那么首先我们就看看该类的体系结构。</p>\n<p><img src=\"/images/springboot-environment-1.png\" alt=\"|center\"></p>\n<p>可以看到，<code>StandardServletEnvironment</code> 继承自 <code>StandardEnvironment</code>，实现了<code>ConfigurableWebEnvironment</code>接口。而再往下还有很多的接口定义和抽象类，下面我们都来看看。</p>\n<ul>\n<li><code>PropertyResolver</code> 提供了访问属性的接口定义，忽略底层resource的实现。</li>\n<li><code>Environment</code> 继承自<code>PropertyResolver</code>，提供访问和判断profiles的功能。</li>\n<li><code>ConfigurablePropertyResolver</code> 继承自<code>PropertyResolver</code>，主要提供属性类型转换(基于<code>org.springframework.core.convert.ConversionService</code>)功能。定义了<code>get|setConversionService,setValueSeparator,setPlaceholderPrefix|Suffix</code>等方法，就是丰富了解析的功能。</li>\n<li><code>ConfigurableEnvironment</code> 继承自<code>ConfigurablePropertyResolver</code>和Environment，并且提供设置激活的profile和默认的profile的功能。</li>\n<li><code>ConfigurableWebEnvironment</code> 继承自<code>ConfigurableEnvironment</code>，并且提供配置Servlet上下文和Servlet参数的功能。</li>\n<li><code>AbstractEnvironment</code> 实现了<code>ConfigurableEnvironment</code>接口，提供默认属性和存储容器的定义，并且为子类预留可覆盖了扩展方法。</li>\n<li><code>StandardEnvironment</code> 继承自<code>AbstractEnvironment</code>，非Servlet(Web)环境下的标准Environment实现。</li>\n<li><code>StandardServletEnvironment</code> 继承自<code>StandardEnvironment</code>，Servlet(Web)环境下的标准Environment实现。</li>\n</ul>\n<p><br></p>\n<p>如果有不是特别清楚的，可以结合代码看看每个类中方法的定义，就可以理解上面各个类的功能了。</p>\n<p><br></p>\n<p><strong><code>PropertyResource</code></strong></p>\n<p><br></p>\n<p>在<code>AbstractEnvironment</code>中，用来保存环境中各种属性的就是<code>MutablePropertySources</code>。下面从<code>MutablePropertySources</code>入手，了解整个<code>PropertyResource</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 该类提供了PropertySources的具体实现（也是唯一的），里面保存的是一个CopyOnWriteArrayList&lt;PropertySource&lt;?&gt;&gt;的数组。</span></span><br><span class=\"line\"><span class=\"comment\"> * 而且好提供了各种方法，用来插入、删除 list中的元素 PropertySource</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MutablePropertySources</span> <span class=\"keyword\">implements</span> <span class=\"title\">PropertySources</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这里定义了对多个PropertySource的真正数据结构是 CopyOnWriteArrayList&lt;ropertySource&lt;?&gt;&gt;</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;PropertySource&lt;?&gt;&gt; propertySourceList = <span class=\"keyword\">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面再看看 <code>PropertySources</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 就是定义了多个PropertySource，和containers 和 PropertySource get这种操作</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PropertySources</span> <span class=\"keyword\">extends</span> <span class=\"title\">Iterable</span>&lt;<span class=\"title\">PropertySource</span>&lt;?&gt;&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return a sequential &#123;<span class=\"doctag\">@link</span> Stream&#125; containing the property sources.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@since</span> 5.1</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">default</span> Stream&lt;PropertySource&lt;?&gt;&gt; stream() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> StreamSupport.stream(spliterator(), <span class=\"keyword\">false</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return whether a property source with the given name is contained.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> name the &#123;<span class=\"doctag\">@linkplain</span> PropertySource#getName() name of the property source&#125; to find</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(String name)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return the property source with the given name, &#123;<span class=\"doctag\">@code</span> null&#125; if not found.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> name the &#123;<span class=\"doctag\">@linkplain</span> PropertySource#getName() name of the property source&#125; to find</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\tPropertySource&lt;?&gt; get(String name);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p>最后看看<code>PropertySource</code>，这里面还是有点东西的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PropertySource</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> T source;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PropertySource</span><span class=\"params\">(String name, T source)</span> </span>&#123;</span><br><span class=\"line\">\t\tAssert.hasText(name, <span class=\"string\">\"Property source name must contain at least one character\"</span>);</span><br><span class=\"line\">\t\tAssert.notNull(source, <span class=\"string\">\"Property source must not be null\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.source = source;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PropertySource</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>(name, (T) <span class=\"keyword\">new</span> Object());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.source;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return whether this &#123;<span class=\"doctag\">@code</span> PropertySource&#125; contains the given name.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;This implementation simply checks for a &#123;<span class=\"doctag\">@code</span> null&#125; return value</span></span><br><span class=\"line\"><span class=\"comment\">\t * from &#123;<span class=\"doctag\">@link</span> #getProperty(String)&#125;. Subclasses may wish to implement</span></span><br><span class=\"line\"><span class=\"comment\">\t * a more efficient algorithm if possible.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> name the property name to find</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">containsProperty</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (getProperty(name) != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return the value associated with the given name,</span></span><br><span class=\"line\"><span class=\"comment\">\t * or &#123;<span class=\"doctag\">@code</span> null&#125; if not found.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> name the property to find</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@see</span> PropertyResolver#getRequiredProperty(String)</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Object <span class=\"title\">getProperty</span><span class=\"params\">(String name)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// equals 和 hashCode 都只和 name 属性相关</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object other)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (<span class=\"keyword\">this</span> == other || (other <span class=\"keyword\">instanceof</span> PropertySource &amp;&amp;</span><br><span class=\"line\">\t\t\t\tObjectUtils.nullSafeEquals(<span class=\"keyword\">this</span>.name, ((PropertySource&lt;?&gt;) other).name)));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ObjectUtils.nullSafeHashCode(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 把String类型的name转换为一个可以判断存在与否的 ComparisonPropertySource</span></span><br><span class=\"line\">    <span class=\"comment\">// 正好 判断 equals 只根据name，所以这里也是妥妥的</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return a &#123;<span class=\"doctag\">@code</span> PropertySource&#125; implementation intended for collection comparison purposes only.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;Primarily for internal use, but given a collection of &#123;<span class=\"doctag\">@code</span> PropertySource&#125; objects, may be</span></span><br><span class=\"line\"><span class=\"comment\">\t * used as follows:</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;pre class=\"code\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@code</span> List&lt;PropertySource&lt;?&gt;&gt; sources = new ArrayList&lt;PropertySource&lt;?&gt;&gt;();</span></span><br><span class=\"line\"><span class=\"comment\">\t * sources.add(new MapPropertySource(\"sourceA\", mapA));</span></span><br><span class=\"line\"><span class=\"comment\">\t * sources.add(new MapPropertySource(\"sourceB\", mapB));</span></span><br><span class=\"line\"><span class=\"comment\">\t * assert sources.contains(PropertySource.named(\"sourceA\"));</span></span><br><span class=\"line\"><span class=\"comment\">\t * assert sources.contains(PropertySource.named(\"sourceB\"));</span></span><br><span class=\"line\"><span class=\"comment\">\t * assert !sources.contains(PropertySource.named(\"sourceC\"));</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#125;&lt;/pre&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t * The returned &#123;<span class=\"doctag\">@code</span> PropertySource&#125; will throw &#123;<span class=\"doctag\">@code</span> UnsupportedOperationException&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t * if any methods other than &#123;<span class=\"doctag\">@code</span> equals(Object)&#125;, &#123;<span class=\"doctag\">@code</span> hashCode()&#125;, and &#123;<span class=\"doctag\">@code</span> toString()&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t * are called.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> name the name of the comparison &#123;<span class=\"doctag\">@code</span> PropertySource&#125; to be created and returned.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> PropertySource&lt;?&gt; named(String name) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ComparisonPropertySource(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@code</span> PropertySource&#125; to be used as a placeholder in cases where an actual</span></span><br><span class=\"line\"><span class=\"comment\">\t * property source cannot be eagerly initialized at application context</span></span><br><span class=\"line\"><span class=\"comment\">\t * creation time.  For example, a &#123;<span class=\"doctag\">@code</span> ServletContext&#125;-based property source</span></span><br><span class=\"line\"><span class=\"comment\">\t * must wait until the &#123;<span class=\"doctag\">@code</span> ServletContext&#125; object is available to its enclosing</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@code</span> ApplicationContext&#125;.  In such cases, a stub should be used to hold the</span></span><br><span class=\"line\"><span class=\"comment\">\t * intended default position/order of the property source, then be replaced</span></span><br><span class=\"line\"><span class=\"comment\">\t * during context refresh.</span></span><br><span class=\"line\"><span class=\"comment\">     * 上面的注释也写的很清楚了，就是用来占位的，因为有一些PropertySource的初始化较晚，比如说 ServletContext相关的环境，在</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化的时候是没有的，可以用改对象来占位。</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@see</span> org.springframework.context.support.AbstractApplicationContext#initPropertySources()</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@see</span> org.springframework.web.context.support.StandardServletEnvironment</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@see</span> org.springframework.web.context.support.ServletContextPropertySource</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StubPropertySource</span> <span class=\"keyword\">extends</span> <span class=\"title\">PropertySource</span>&lt;<span class=\"title\">Object</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StubPropertySource</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">super</span>(name, <span class=\"keyword\">new</span> Object());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * Always returns &#123;<span class=\"doctag\">@code</span> null&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getProperty</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * PropertySource.named(String) 返回的就是该类型的对象。</span></span><br><span class=\"line\"><span class=\"comment\">     * 该子类是专门用来封装String类型的name，做比较的，而且他的所有getSource等相关方法，全都是抛出异常</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComparisonPropertySource</span> <span class=\"keyword\">extends</span> <span class=\"title\">StubPropertySource</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String USAGE_ERROR =</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">\"ComparisonPropertySource instances are for use with collection comparison only\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ComparisonPropertySource</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(USAGE_ERROR);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">containsProperty</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(USAGE_ERROR);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getProperty</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(USAGE_ERROR);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个<code>PropertySource</code>类和map这种的用来存储键值对的类稍微有一点不一样，PropertySource中的source是随意类型的，而且key-value都是存在source里面的。可以简单的看一下常用的两个实现<code>MapPropertySource</code>,<code></code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MapPropertySource</span> <span class=\"keyword\">extends</span> <span class=\"title\">EnumerablePropertySource</span>&lt;<span class=\"title\">Map</span>&lt;<span class=\"title\">String</span>, <span class=\"title\">Object</span>&gt;&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MapPropertySource</span><span class=\"params\">(String name, Map&lt;String, Object&gt; source)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(name, source);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getProperty</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.source.get(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">containsProperty</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.source.containsKey(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String[] getPropertyNames() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> StringUtils.toStringArray(<span class=\"keyword\">this</span>.source.keySet());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PropertiesPropertySource</span> <span class=\"keyword\">extends</span> <span class=\"title\">MapPropertySource</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(&#123;<span class=\"string\">\"unchecked\"</span>, <span class=\"string\">\"rawtypes\"</span>&#125;)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PropertiesPropertySource</span><span class=\"params\">(String name, Properties source)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(name, (Map) source);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">PropertiesPropertySource</span><span class=\"params\">(String name, Map&lt;String, Object&gt; source)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(name, source);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p>最后，我们知道<code>AbstractEnvironment</code>中存储的是<code>MutablePropertySources</code>, 是一个数组，那么在<code>Environment</code>中怎么getProperty的呢？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractEnvironment</span> <span class=\"keyword\">implements</span> <span class=\"title\">ConfigurableEnvironment</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ConfigurablePropertyResolver propertyResolver =</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> PropertySourcesPropertyResolver(<span class=\"keyword\">this</span>.propertySources);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 是代理给了 PropertySourcesPropertyResolver propertyResolver</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getProperty</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.propertyResolver.getProperty(key);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PropertySourcesPropertyResolver</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractPropertyResolver</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> PropertySources propertySources;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getProperty</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> getProperty(key, String.class, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 其实就是扫描 PropertySources 中 所有的 PropertySource 查每个PropertySource中是否存在</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">getProperty</span><span class=\"params\">(String key, Class&lt;T&gt; targetValueType, <span class=\"keyword\">boolean</span> resolveNestedPlaceholders)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.propertySources != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (PropertySource&lt;?&gt; propertySource : <span class=\"keyword\">this</span>.propertySources) &#123;</span><br><span class=\"line\">\t\t\t\tObject value = propertySource.getProperty(key);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (value != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (resolveNestedPlaceholders &amp;&amp; value <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tvalue = resolveNestedPlaceholders((String) value);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tlogKeyFound(key, propertySource, value);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> convertValueIfNecessary(value, targetValueType);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<hr>\n<h2 id=\"源码分析-Environment-的初始化过程\"><a href=\"#源码分析-Environment-的初始化过程\" class=\"headerlink\" title=\"源码分析 Environment 的初始化过程\"></a>源码分析 Environment 的初始化过程</h2><p>入口点在<code>SpringApplication.run</code>方法的<code>ConfigurableEnvironment environment = prepareEnvironment(listeners,applicationArguments);</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// environment 在该方法中完成整个初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ConfigurableEnvironment <span class=\"title\">prepareEnvironment</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        SpringApplicationRunListeners listeners,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        ApplicationArguments applicationArguments)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 根据不同的环境创建不同的 Environment 实例</span></span><br><span class=\"line\">    ConfigurableEnvironment environment = getOrCreateEnvironment();</span><br><span class=\"line\">    <span class=\"comment\">// configEnvironment 为初始化 Environment 准备好数据</span></span><br><span class=\"line\">    configureEnvironment(environment, applicationArguments.getSourceArgs());</span><br><span class=\"line\">    listeners.environmentPrepared(environment);</span><br><span class=\"line\">    bindToSpringApplication(environment);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.isCustomEnvironment) &#123;</span><br><span class=\"line\">        environment = <span class=\"keyword\">new</span> EnvironmentConverter(getClassLoader())</span><br><span class=\"line\">                .convertEnvironmentIfNecessary(environment, deduceEnvironmentClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ConfigurationPropertySources.attach(environment);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> environment;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><strong><code>1. createEnvironment</code></strong></p>\n<p><br></p>\n<p>首先根据不同的 applicationType 创建不同的Environment，这里创建的是 <code>StandardServletEnvironment</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ConfigurableEnvironment <span class=\"title\">getOrCreateEnvironment</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.environment != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.environment;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (<span class=\"keyword\">this</span>.webApplicationType) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> SERVLET:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> StandardServletEnvironment();</span><br><span class=\"line\">    <span class=\"keyword\">case</span> REACTIVE:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> StandardReactiveWebEnvironment();</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> StandardEnvironment();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>之前说过，<code>StandardServletEnvironment extends StandardEnvironment</code>, <code>StandardEnvironment extends AbstractEnvironment</code>。所以创建<code>StandardServletEnvironment</code>实例，首先会执行父类<code>AbstractEnvironment</code>的构造方法（因为这里子类没有实现构造方法），它里面又调用了<code>customizePropertySources</code>方法，<code>StandardServletEnvironment</code>实现了该方法，所以又会回来调用这个方法。</p>\n<p>创建<code>StandardServletEnvironment</code>实例的代码会按照代码实际的执行顺序，在下面罗列出来。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AbstractEnvironment</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AbstractEnvironment</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 留给子类实现 方法添加propertySource</span></span><br><span class=\"line\">    customizePropertySources(<span class=\"keyword\">this</span>.propertySources);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//StandardServletEnvironment</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">customizePropertySources</span><span class=\"params\">(MutablePropertySources propertySources)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//name=servletConfigInitParams, 给 Servlet configInitParams 占位 </span></span><br><span class=\"line\">    propertySources.addLast(<span class=\"keyword\">new</span> StubPropertySource(SERVLET_CONFIG_PROPERTY_SOURCE_NAME));</span><br><span class=\"line\">    <span class=\"comment\">// servletContextInitParams 给 Servlet contextInitParams 占位</span></span><br><span class=\"line\">    propertySources.addLast(<span class=\"keyword\">new</span> StubPropertySource(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (JndiLocatorDelegate.isDefaultJndiEnvironmentAvailable()) &#123;</span><br><span class=\"line\">        propertySources.addLast(<span class=\"keyword\">new</span> JndiPropertySource(JNDI_PROPERTY_SOURCE_NAME));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.customizePropertySources(propertySources);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// StandardEnvironment</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">customizePropertySources</span><span class=\"params\">(MutablePropertySources propertySources)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// systemProperties 放入系统环境 键值对</span></span><br><span class=\"line\">    propertySources.addLast(<span class=\"keyword\">new</span> MapPropertySource(SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME, getSystemProperties()));</span><br><span class=\"line\">    propertySources.addLast(<span class=\"keyword\">new</span> SystemEnvironmentPropertySource(SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME, getSystemEnvironment()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为什么要用<code>SubPropertySource</code>占位，而且还要注意顺序呢？</p>\n<p>会想一下，<code>Environment.getProperty</code> 的过程，是扫描数组中的每一个<code>PropertySource</code>看是否有该property，所以也会涉及到这几个环境优先级的问题。</p>\n<p><br></p>\n<p><strong><code>2. configEnvironment</code></strong></p>\n<p><br></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configureEnvironment</span><span class=\"params\">(ConfigurableEnvironment environment,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.addConversionService) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建并 返回 ConversionService，这是一个相当庞大的转换Service，用来在读取配置文件的时候，将各种数据类型转换为合适的数据类型</span></span><br><span class=\"line\">        ConversionService conversionService = ApplicationConversionService</span><br><span class=\"line\">                .getSharedInstance();</span><br><span class=\"line\">        environment.setConversionService(</span><br><span class=\"line\">                (ConfigurableConversionService) conversionService);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    configurePropertySources(environment, args);</span><br><span class=\"line\">    configureProfiles(environment, args);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果 运行的时候传入了参数，那么会将它保存在 name=springApplicationCommandLineArgs 的propertySource中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configurePropertySources</span><span class=\"params\">(ConfigurableEnvironment environment,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        String[] args)</span> </span>&#123;</span><br><span class=\"line\">    MutablePropertySources sources = environment.getPropertySources();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.defaultProperties != <span class=\"keyword\">null</span> &amp;&amp; !<span class=\"keyword\">this</span>.defaultProperties.isEmpty()) &#123;</span><br><span class=\"line\">        sources.addLast(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> MapPropertySource(<span class=\"string\">\"defaultProperties\"</span>, <span class=\"keyword\">this</span>.defaultProperties));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.addCommandLineProperties &amp;&amp; args.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        String name = CommandLinePropertySource.COMMAND_LINE_PROPERTY_SOURCE_NAME;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sources.contains(name)) &#123;</span><br><span class=\"line\">            PropertySource&lt;?&gt; source = sources.get(name);</span><br><span class=\"line\">            CompositePropertySource composite = <span class=\"keyword\">new</span> CompositePropertySource(name);</span><br><span class=\"line\">            composite.addPropertySource(<span class=\"keyword\">new</span> SimpleCommandLinePropertySource(</span><br><span class=\"line\">                    <span class=\"string\">\"springApplicationCommandLineArgs\"</span>, args));</span><br><span class=\"line\">            composite.addPropertySource(source);</span><br><span class=\"line\">            sources.replace(name, composite);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果有的话，默认会将用户传入的配置 放到第一位。</span></span><br><span class=\"line\">            <span class=\"comment\">// 所以我们的配置 优先级总是最高的。</span></span><br><span class=\"line\">            <span class=\"comment\">// 我们传入的 参数 spring.profiles.active=wyj 就会在这里放入 MutablPropertySources 中</span></span><br><span class=\"line\">            sources.addFirst(<span class=\"keyword\">new</span> SimpleCommandLinePropertySource(args));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configureProfiles</span><span class=\"params\">(ConfigurableEnvironment environment, String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化 environment 中的 activeProfiles</span></span><br><span class=\"line\">    environment.getActiveProfiles(); <span class=\"comment\">// ensure they are initialized</span></span><br><span class=\"line\">    <span class=\"comment\">// But these ones should go first (last wins in a property key clash)</span></span><br><span class=\"line\">    <span class=\"comment\">// activePrifiles中加入 ApplicationContext中 额外 用户配置的 additionalProfiles</span></span><br><span class=\"line\">    Set&lt;String&gt; profiles = <span class=\"keyword\">new</span> LinkedHashSet&lt;&gt;(<span class=\"keyword\">this</span>.additionalProfiles);</span><br><span class=\"line\">    profiles.addAll(Arrays.asList(environment.getActiveProfiles()));</span><br><span class=\"line\">    environment.setActiveProfiles(StringUtils.toStringArray(profiles));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Set&lt;String&gt; <span class=\"title\">doGetActiveProfiles</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.activeProfiles) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.activeProfiles.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 会读取到 已经放入到 PropertySources 中，运行程序时 我们传入的参数。</span></span><br><span class=\"line\">            String profiles = getProperty(ACTIVE_PROFILES_PROPERTY_NAME);   <span class=\"comment\">// spring.profiles.active</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (StringUtils.hasText(profiles)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 这里还可以发现，我们可以传入多个 active profiles，用,分割</span></span><br><span class=\"line\">                setActiveProfiles(StringUtils.commaDelimitedListToStringArray(</span><br><span class=\"line\">                        StringUtils.trimAllWhitespace(profiles)));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.activeProfiles;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以他一共干了三件事：</p>\n<ol>\n<li>初始化<code>ConvertService</code></li>\n<li>读取用户运行程序时传入的配置，并保存在Envrionment</li>\n<li>找到active profiles</li>\n</ol>\n<p>下面看看 <code>ConvertService</code> 中 都是什么：</p>\n<p><img src=\"/images/springboot-environment-2.png\" alt=\"|center\"></p>\n<p><img src=\"/images/springboot-environment-3.png\" alt=\"|center\"></p>\n<p><br></p>\n<p><strong><code>3.1 preLoadProperties</code></strong></p>\n<p><br></p>\n<p>下面就是发出<code>ApplicationEnvironmentPreparedEvent</code>事件。</p>\n<p>会有好几个listener，我们关心的是<code>ConfigFileApplicationListener</code>，下面是几个关心的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConfigFileApplicationListener</span></span></span><br><span class=\"line\"><span class=\"class\">\t\t<span class=\"keyword\">implements</span> <span class=\"title\">EnvironmentPostProcessor</span>, <span class=\"title\">SmartApplicationListener</span>, <span class=\"title\">Ordered</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// ApplicationEnvironmentPreparedEvent 事件最终会调用该方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">onApplicationEnvironmentPreparedEvent</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\tApplicationEnvironmentPreparedEvent event)</span> </span>&#123;</span><br><span class=\"line\">\t\tList&lt;EnvironmentPostProcessor&gt; postProcessors = loadPostProcessors();</span><br><span class=\"line\">\t\tpostProcessors.add(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t\tAnnotationAwareOrderComparator.sort(postProcessors);</span><br><span class=\"line\">        <span class=\"comment\">// 调用 EnvironmentPostProcessor 后处理器</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (EnvironmentPostProcessor postProcessor : postProcessors) &#123;</span><br><span class=\"line\">\t\t\tpostProcessor.postProcessEnvironment(event.getEnvironment(),</span><br><span class=\"line\">\t\t\t\t\tevent.getSpringApplication());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用 FactiriesLoader 加载 EnvironmentPostProcessor</span></span><br><span class=\"line\">\t<span class=\"function\">List&lt;EnvironmentPostProcessor&gt; <span class=\"title\">loadPostProcessors</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> SpringFactoriesLoader.loadFactories(EnvironmentPostProcessor.class,</span><br><span class=\"line\">\t\t\t\tgetClass().getClassLoader());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 注意 他也是 实现了 EnvironmentPostProcessor 接口的</span></span><br><span class=\"line\">    <span class=\"comment\">// 而且，也定义在了 spring.factories 中，所以 也会会掉这个方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postProcessEnvironment</span><span class=\"params\">(ConfigurableEnvironment environment,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\tSpringApplication application)</span> </span>&#123;</span><br><span class=\"line\">\t\taddPropertySources(environment, application.getResourceLoader());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">addPropertySources</span><span class=\"params\">(ConfigurableEnvironment environment,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\tResourceLoader resourceLoader)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在 systemEnvironment 后面 添加 name=random,value=new Random(); 的PropertySource</span></span><br><span class=\"line\">\t\tRandomValuePropertySource.addToEnvironment(environment);</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Loader(environment, resourceLoader).load();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><strong><code>3.2 loadProperties</code></strong></p>\n<p><br></p>\n<p><code>Loader</code> 是 <code>ConfigFileApplicationListener</code> 的内部类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Loader</span> </span>&#123;</span><br><span class=\"line\">    Loader(ConfigurableEnvironment environment, ResourceLoader resourceLoader) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.environment = environment;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.placeholdersResolver = <span class=\"keyword\">new</span> PropertySourcesPlaceholdersResolver(</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.environment);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.resourceLoader = (resourceLoader != <span class=\"keyword\">null</span>) ? resourceLoader</span><br><span class=\"line\">                : <span class=\"keyword\">new</span> DefaultResourceLoader();</span><br><span class=\"line\">        <span class=\"comment\">// 找到的 PropertySourceLoader 有两个，分别是 PropertiesPropertySourceLoader和YamlPropertySourceLoader </span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.propertySourceLoaders = SpringFactoriesLoader.loadFactories(</span><br><span class=\"line\">                PropertySourceLoader.class, getClass().getClassLoader());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">load</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.profiles = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.processedProfiles = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.activatedProfiles = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.loaded = <span class=\"keyword\">new</span> LinkedHashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 初始化 profiles</span></span><br><span class=\"line\">        <span class=\"comment\">// 首先会加入一个 null</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果 activeProfiles 不为null，加入到list中</span></span><br><span class=\"line\">        <span class=\"comment\">// 为null，吧defaultProfiles 加入到list中</span></span><br><span class=\"line\">        <span class=\"comment\">// 这里 我们配置了了 activeProfiles=wyj，所里里面有两个 一个null，一个 wyj</span></span><br><span class=\"line\">        initializeProfiles();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!<span class=\"keyword\">this</span>.profiles.isEmpty()) &#123;</span><br><span class=\"line\">            Profile profile = <span class=\"keyword\">this</span>.profiles.poll();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (profile != <span class=\"keyword\">null</span> &amp;&amp; !profile.isDefaultProfile()) &#123;</span><br><span class=\"line\">                addProfileToEnvironment(profile.getName());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 第二个参数 this::getPositiveProfileFilter 返回的是一个lambda 表达式的filter ，</span></span><br><span class=\"line\">            <span class=\"comment\">// 第三个参数 addToLoaded(MutablePropertySources::addLast, false)，addToLoaded 返回的还是一个lambda表达式，整个的作用大概就是将解析出来的数据添加到 propertySources 的最后。</span></span><br><span class=\"line\">            load(profile, <span class=\"keyword\">this</span>::getPositiveProfileFilter,</span><br><span class=\"line\">                    addToLoaded(MutablePropertySources::addLast, <span class=\"keyword\">false</span>));</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.processedProfiles.add(profile);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        resetEnvironmentProfiles(<span class=\"keyword\">this</span>.processedProfiles);</span><br><span class=\"line\">        load(<span class=\"keyword\">null</span>, <span class=\"keyword\">this</span>::getNegativeProfileFilter,</span><br><span class=\"line\">                addToLoaded(MutablePropertySources::addFirst, <span class=\"keyword\">true</span>));</span><br><span class=\"line\">        addLoadedPropertySources();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><code>load</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 整个代码逻辑 就是：</span></span><br><span class=\"line\"><span class=\"comment\">// 获取所有扫描路径 和 扫描的文件名，然后便利load</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">load</span><span class=\"params\">(Profile profile, DocumentFilterFactory filterFactory,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        DocumentConsumer consumer)</span> </span>&#123;</span><br><span class=\"line\">    getSearchLocations().forEach((location) -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> isFolder = location.endsWith(<span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">        Set&lt;String&gt; names = isFolder ? getSearchNames() : NO_SEARCH_NAMES;</span><br><span class=\"line\">        names.forEach(</span><br><span class=\"line\">                (name) -&gt; load(location, name, profile, filterFactory, consumer));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置文件的路径</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Set&lt;String&gt; <span class=\"title\">getSearchLocations</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 首先如果配置了 spring.config.location ，就返回我们配置的路径</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.environment.containsProperty(CONFIG_LOCATION_PROPERTY)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getSearchLocations(CONFIG_LOCATION_PROPERTY);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 然后扫描 spring.config.additional-location 所配置的（这是让谁用的？可能是留给三方jar包的接口？）</span></span><br><span class=\"line\">    Set&lt;String&gt; locations = getSearchLocations(</span><br><span class=\"line\">            CONFIG_ADDITIONAL_LOCATION_PROPERTY);</span><br><span class=\"line\">    <span class=\"comment\">// 最后加上默认的扫描路径。DEFAULT_SEARCH_LOCATIONS = classpath:/,classpath:/config/,file:./,file:./config/</span></span><br><span class=\"line\">    locations.addAll(</span><br><span class=\"line\">            asResolvedSet(ConfigFileApplicationListener.<span class=\"keyword\">this</span>.searchLocations,</span><br><span class=\"line\">                    DEFAULT_SEARCH_LOCATIONS));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> locations;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置文件的名字</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Set&lt;String&gt; <span class=\"title\">getSearchNames</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果配置了 spring.config.name 属性，会返回我们配置的 配置文件名字，</span></span><br><span class=\"line\">    <span class=\"comment\">// 注意，这里可以配置多个 试用,分割</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.environment.containsProperty(CONFIG_NAME_PROPERTY)) &#123;</span><br><span class=\"line\">        String property = <span class=\"keyword\">this</span>.environment.getProperty(CONFIG_NAME_PROPERTY);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> asResolvedSet(property, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果没有配置返回默认的 DEFAULT_NAMES=application</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> asResolvedSet(ConfigFileApplicationListener.<span class=\"keyword\">this</span>.names, DEFAULT_NAMES);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 真正的load方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">load</span><span class=\"params\">(String location, String name, Profile profile,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        DocumentFilterFactory filterFactory, DocumentConsumer consumer)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这块代码不知道 何时 运行，因为 name 一般不会为空啊</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!StringUtils.hasText(name)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (PropertySourceLoader loader : <span class=\"keyword\">this</span>.propertySourceLoaders) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (canLoadFileExtension(loader, location)) &#123;</span><br><span class=\"line\">                load(loader, location, profile,</span><br><span class=\"line\">                        filterFactory.getDocumentFilter(profile), consumer);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// loader 有两种，PropertiesPropertySourceLoader和YamlPropertySourceLoader </span></span><br><span class=\"line\">    <span class=\"comment\">// 每个loader支持的文件后缀也有两种，分别便利，尝试去加载 </span></span><br><span class=\"line\">    Set&lt;String&gt; processed = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (PropertySourceLoader loader : <span class=\"keyword\">this</span>.propertySourceLoaders) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String fileExtension : loader.getFileExtensions()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (processed.add(fileExtension)) &#123;</span><br><span class=\"line\">                loadForFileExtension(loader, location + name, <span class=\"string\">\".\"</span> + fileExtension,</span><br><span class=\"line\">                        profile, filterFactory, consumer);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">loadForFileExtension</span><span class=\"params\">(PropertySourceLoader loader, String prefix,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        String fileExtension, Profile profile,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        DocumentFilterFactory filterFactory, DocumentConsumer consumer)</span> </span>&#123;</span><br><span class=\"line\">    DocumentFilter defaultFilter = filterFactory.getDocumentFilter(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    DocumentFilter profileFilter = filterFactory.getDocumentFilter(profile);</span><br><span class=\"line\">    <span class=\"comment\">// 不为空 组织成 prefix-profile.fileExtension的文件，去加载</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (profile != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Try profile-specific file &amp; profile section in profile file (gh-340)</span></span><br><span class=\"line\">        String profileSpecificFile = prefix + <span class=\"string\">\"-\"</span> + profile + fileExtension;</span><br><span class=\"line\">        load(loader, profileSpecificFile, profile, defaultFilter, consumer);</span><br><span class=\"line\">        load(loader, profileSpecificFile, profile, profileFilter, consumer);</span><br><span class=\"line\">        <span class=\"comment\">// Try profile specific sections in files we've already processed</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Profile processedProfile : <span class=\"keyword\">this</span>.processedProfiles) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (processedProfile != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                String previouslyLoaded = prefix + <span class=\"string\">\"-\"</span> + processedProfile</span><br><span class=\"line\">                        + fileExtension;</span><br><span class=\"line\">                load(loader, previouslyLoaded, profile, profileFilter, consumer);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Also try the profile-specific section (if any) of the normal file</span></span><br><span class=\"line\">    <span class=\"comment\">// 为null，组织成 prefix.fileExtension的文件，去加载</span></span><br><span class=\"line\">    <span class=\"comment\">// 所以在一开始的profiles中 要加入一个null，来加载 application.yml</span></span><br><span class=\"line\">    load(loader, prefix + fileExtension, profile, profileFilter, consumer);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">load</span><span class=\"params\">(PropertySourceLoader loader, String location, Profile profile,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        DocumentFilter filter, DocumentConsumer consumer)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Resource resource = <span class=\"keyword\">this</span>.resourceLoader.getResource(location);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (resource == <span class=\"keyword\">null</span> || !resource.exists()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">                StringBuilder description = getDescription(</span><br><span class=\"line\">                        <span class=\"string\">\"Skipped missing config \"</span>, location, resource, profile);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.logger.trace(description);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.hasText(</span><br><span class=\"line\">                StringUtils.getFilenameExtension(resource.getFilename()))) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">                StringBuilder description = getDescription(</span><br><span class=\"line\">                        <span class=\"string\">\"Skipped empty config extension \"</span>, location, resource,</span><br><span class=\"line\">                        profile);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.logger.trace(description);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 之前两步都是在判断 有没有这个文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//如果存在这个文件 name=applicationConfig: [classpath:/application.yml]</span></span><br><span class=\"line\">        String name = <span class=\"string\">\"applicationConfig: [\"</span> + location + <span class=\"string\">\"]\"</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 加载配置文件中的属性</span></span><br><span class=\"line\">        List&lt;Document&gt; documents = loadDocuments(loader, name, resource);</span><br><span class=\"line\">        <span class=\"comment\">// 为空，就是 里面没配置啥属性，还是返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (CollectionUtils.isEmpty(documents)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">                StringBuilder description = getDescription(</span><br><span class=\"line\">                        <span class=\"string\">\"Skipped unloaded config \"</span>, location, resource, profile);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.logger.trace(description);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 不知道 大家是否还记得 filter，在第一个load方法传入的参数，分析过了，是用来过滤属性的</span></span><br><span class=\"line\">        List&lt;Document&gt; loaded = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Document document : documents) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (filter.match(document)) &#123;</span><br><span class=\"line\">                addActiveProfiles(document.getActiveProfiles());</span><br><span class=\"line\">                addIncludedProfiles(document.getIncludeProfiles());</span><br><span class=\"line\">                loaded.add(document);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Collections.reverse(loaded);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// consume 也是一个 lambda，也是第一个load方法传入的参数，是用来添加到Environment</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!loaded.isEmpty()) &#123;</span><br><span class=\"line\">            loaded.forEach((document) -&gt; consumer.accept(profile, document));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">                StringBuilder description = getDescription(<span class=\"string\">\"Loaded config file \"</span>,</span><br><span class=\"line\">                        location, resource, profile);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.logger.debug(description);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Failed to load property \"</span></span><br><span class=\"line\">                + <span class=\"string\">\"source from location '\"</span> + location + <span class=\"string\">\"'\"</span>, ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>读源码的时候，一开始这里还是读的比较难受的，难受在使用了很多的lambda表达式，并且循环很多。但是 当理解了整个逻辑之后，还是非常清晰的。</p>\n<p>以我们当前环境，传入了参数 <code>--spring.profiles.active=wyj</code></p>\n<ol>\n<li>第一层循环：profiles=[null, wyj]</li>\n<li>第二层循环：searchLocation=[classpath:/, classpath:/config/, file:./, file:./config/]</li>\n<li>第三层循环：searchName=[application]</li>\n<li>第四层循环：propertySourceLoaders=[PropertiesPropertySourceLoader, YamlPropertySourceLoader]</li>\n<li>第五层循环：loader.getFileExtensions=[.xml, .properties] or [.yaml, .yml]</li>\n</ol>\n<p><strong>最后组织成<code>filename = searchLocation+searchName+&quot;-&quot;+profiles+fileExtension</code>，如果最后解析出来了，就以<code>&quot;applicationConfig: [&quot; + location + &quot;]&quot;</code>为propertySource的名字将他保存在Environment中。</strong> </p>\n<p><br></p>\n<p><strong><code>3.3. loadAfter</code></strong></p>\n<p>最后全部配置文件都加载了之后，返回到一开始的load方法。</p>\n<p>执行 <code>addLoadedPropertySources()</code> 把刚刚加载出来的属性配置文件添加到envrioment 中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addLoadedPropertySources</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    MutablePropertySources destination = <span class=\"keyword\">this</span>.environment.getPropertySources();</span><br><span class=\"line\">    <span class=\"comment\">// 刚刚解析出来的放在 loaded中</span></span><br><span class=\"line\">    List&lt;MutablePropertySources&gt; loaded = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"keyword\">this</span>.loaded.values());</span><br><span class=\"line\">    <span class=\"comment\">// 上面也说过了，解析的顺序是 [null, wyj]，所以 需要反转，这样在遍历读取某个属性的时候，就可以使 application-wyj 的优先级比 application 高 </span></span><br><span class=\"line\">    Collections.reverse(loaded);</span><br><span class=\"line\">    String lastAdded = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    Set&lt;String&gt; added = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (MutablePropertySources sources : loaded) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (PropertySource&lt;?&gt; source : sources) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (added.add(source.getName())) &#123;</span><br><span class=\"line\">                addLoadedPropertySource(destination, lastAdded, source);</span><br><span class=\"line\">                lastAdded = source.getName();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从 <code>ConfigFileApplicationListener</code> 中出来，回到 SpringApplication中，就是一个bind，其他的也没什么了。</p>\n<p>到此结束。</p>\n<p><br></p>\n<ul>\n<li><a href=\"https://www.jb51.net/article/145192.htm\" target=\"_blank\" rel=\"noopener\">Environment 和 PropertySource 讲解</a></li>\n<li><a href=\"https://blog.csdn.net/liaokailin/article/details/48878447\" target=\"_blank\" rel=\"noopener\">spring boot实战(第六篇)加载application资源文件源码分析</a></li>\n<li><a href=\"http://jinnianshilongnian.iteye.com/blog/2000183\" target=\"_blank\" rel=\"noopener\">Spring3.1新属性管理API：PropertySource、Environment、Profile</a></li>\n</ul>\n"},{"title":"Spring BeanDefinition & createBean","_content":"\n# BeanDefinition & createBean\n\n分析Bean在spring中解析后的定义BeanDefinition，以及createBean的过程\n\n<br>\n\n- [BeanDefinition & createBean](#beandefinition--createbean)\n  - [BeanDefinition](#beandefinition)\n  - [createBean](#createbean)\n    - [Prototype 类型的实例化](#prototype-类型的实例化)\n    - [Singleton 类型的实例化](#singleton-类型的实例化)\n    - [doCreateBean](#docreatebean)\n\n\n<br>\n\n测试的代码如下：\n\nmain\n\n```java\npublic class Hello {\n\n    public static void main(String[] args) {\n        ClassPathResource resource = new ClassPathResource(\"beans.xml\");\n        DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();\n        XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(beanFactory);\n        reader.loadBeanDefinitions(resource);\n        Student myBean = beanFactory.getBean(\"myBean\", Student.class);\n        System.out.println(myBean.toString());\n    }\n}\n\n```\n\n<br>\n\npom.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.wyj.alipay</groupId>\n    <artifactId>hello-spring</artifactId>\n    <version>1.0</version>\n\n    <properties>\n        <spring.version></spring.version>\n        <jdk.version></jdk.version>\n    </properties>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework</groupId>\n                <artifactId>spring-framework-bom</artifactId>\n                <version>5.1.1.RELEASE</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-beans</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-context</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-core</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <version>1.16.22</version>\n            <optional>true</optional>\n        </dependency>\n\n\n    </dependencies>\n\n\n</project>\n\n```\n\n<br>\n\nbeans.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\">\n\n    <bean id=\"myBean\" class=\"com.wyj.alipay.spring.bean.Student\">\n        <property name=\"name\" value=\"zhangsan\"/>\n        <property name=\"age\" value=\"16\" />\n    </bean>\n\n\n</beans>\n```\n\n## BeanDefinition\n\n\n在上一篇分析基本容器的时候，解析配置文件，扫描Bean，找到Bean的定义 -- `BeanDefinition`是在`DefaultBeanDefinitionDocumentReader`中完成的。\n\n扫描我们的bean的配置文件，拿到配置文件的解析结果`Element`对象，并根据不同的标签类型使用不同的方法解析，基本代码如下：\n\n```java\n\n// 循环遍历解析 每一个 node\nprotected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate) {\n    if (delegate.isDefaultNamespace(root)) {\n        NodeList nl = root.getChildNodes();\n        for (int i = 0; i < nl.getLength(); i++) {\n            Node node = nl.item(i);\n            if (node instanceof Element) {\n                Element ele = (Element) node;\n                if (delegate.isDefaultNamespace(ele)) {\n                    parseDefaultElement(ele, delegate);\n                }\n                else {\n                    delegate.parseCustomElement(ele);\n                }\n            }\n        }\n    }\n    else {\n        delegate.parseCustomElement(root);\n    }\n}\n\nprivate void parseDefaultElement(Element ele, BeanDefinitionParserDelegate delegate) {\n    if (delegate.nodeNameEquals(ele, IMPORT_ELEMENT)) {\n        importBeanDefinitionResource(ele);\n    }\n    else if (delegate.nodeNameEquals(ele, ALIAS_ELEMENT)) {\n        processAliasRegistration(ele);\n    }\n    else if (delegate.nodeNameEquals(ele, BEAN_ELEMENT)) {\n        processBeanDefinition(ele, delegate);\n    }\n    else if (delegate.nodeNameEquals(ele, NESTED_BEANS_ELEMENT)) {\n        // recurse\n        doRegisterBeanDefinitions(ele);\n    }\n}\n\n```\n\n剩下的任务就是解析每一个扫描xml文件中得出的`Element`标签，并将`Element`对象转换为bean的定义对象`BeanDefinition`。而这些任务在Spring的架构中都是委托给`BeanDefinitionParserDelegate`实现的，该类是专门负责将`Element`xml标签对象，转换为相应的`BeanDefinition`对象。\n\n下面我们先看下`BeanDefinitionParserDelegate`的初始化过程：\n\n```java\n// DefaultBeanDefinitionDocumentReader 中\nprotected BeanDefinitionParserDelegate createDelegate(\n        XmlReaderContext readerContext, Element root, @Nullable BeanDefinitionParserDelegate parentDelegate) {\n\n    BeanDefinitionParserDelegate delegate = new BeanDefinitionParserDelegate(readerContext);\n    delegate.initDefaults(root, parentDelegate);\n    return delegate;\n}\n\n// BeanDefinitionParserDelegate\npublic BeanDefinitionParserDelegate(XmlReaderContext readerContext) {\n    Assert.notNull(readerContext, \"XmlReaderContext must not be null\");\n    this.readerContext = readerContext;\n}\n\n/*\n * populateDefaults 的任务就是扫描根标签beans有没有对所有bean的默认配置。Initialize the default lazy-init, autowire,\n * dependency check settings,init-method, destroy-method and merge settings。\n * fireDefaultsRegistered 就是会掉readerContext中对reader各种事件的监听。\n */\npublic void initDefaults(Element root, @Nullable BeanDefinitionParserDelegate parent) {\n    populateDefaults(this.defaults, (parent != null ? parent.defaults : null), root);\n    this.readerContext.fireDefaultsRegistered(this.defaults);\n}\n\n```\n\n然后，我们再来认识下`ReaderContext`。一般使用的是他的子类`XmlReaderContext`\n\n```java\n/**\n * reading bean definition process(过程) 的 context，封装了所有的相关配置和状态。\n */\npublic class ReaderContext {\n\n    // 源文件\n\tprivate final Resource resource;\n    // 解析过程中如果出现问题，向汇报器汇报\n\tprivate final ProblemReporter problemReporter;\n    // reader过程的监听器，默认实现是 EmptyReaderEventListener 每个方法都是空实现。\n\tprivate final ReaderEventListener eventListener;\n    // 就是上文说的从跟标签 beans 中解析出来的一些属性的默认配置\n    // 如 lazy-init, autowire, dependency check settings,init-method, destroy-method\n\tprivate final SourceExtractor sourceExtractor;\n\n    ...\n\n}\n```\n\n> 在Spring中，像使用`ReaderContext`这种环境类特别多，这种设计模式应该细细品味，好好体会，有时间了还应该专门写一篇日志分析记录一下。\n\n好，到这里，基础工作做好了之后，下面开始真正的解析。\n\n-------------\n\n首先看看解析bean标签的过程。`processBeanDefinition`\n\n```java\nprotected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate) {\n    //1. 解析标签，将标签转换为 BeanDefinition 并用 BeanDefinitionHolder 连同beanName，aliasArray一并封装起来。\n    BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);\n    if (bdHolder != null) {\n        // 2. 还要对子标签下的自定义属性调用decorateBeanDefinitionIfRequired方法进行解析，这回是自定义属性\n        bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);\n        try {\n            // Register the final decorated instance.\n            // 3. 注册\n            BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());\n        }\n        catch (BeanDefinitionStoreException ex) {\n            getReaderContext().error(\"Failed to register bean definition with name '\" +\n                    bdHolder.getBeanName() + \"'\", ele, ex);\n        }\n        // Send registration event.\n        //4. 触发监听器，通知监听器的相关方法\n        getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder));\n    }\n}\n```\n\n第一步：解析标签，完成Element 到 BeanDefinition 的转换。\n\n```java\n/**\n * 该方法 先取出  beanName，看是否已经注册过。有的话，抛出异常。\n * 如果没有，才调用 parseBeanDefinitionElement 真正的去解析node中的每一个元素。\n * 解析完成之后，将 beanDefinition, beanName, aliasesArray 一起封装到 BeanDefinitionHolder中返回。\n */\npublic BeanDefinitionHolder parseBeanDefinitionElement(Element ele, @Nullable BeanDefinition containingBean) {\n    String id = ele.getAttribute(ID_ATTRIBUTE);\n    String nameAttr = ele.getAttribute(NAME_ATTRIBUTE);\n\n    List<String> aliases = new ArrayList<>();\n    if (StringUtils.hasLength(nameAttr)) {\n        String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS);\n        aliases.addAll(Arrays.asList(nameArr));\n    }\n\n    String beanName = id;\n    if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) {\n        beanName = aliases.remove(0);\n        if (logger.isTraceEnabled()) {\n            logger.trace(\"No XML 'id' specified - using '\" + beanName +\n                    \"' as bean name and \" + aliases + \" as aliases\");\n        }\n    }\n\n    if (containingBean == null) {\n        checkNameUniqueness(beanName, aliases, ele);\n    }\n\n    AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean);\n    if (beanDefinition != null) {\n        if (!StringUtils.hasText(beanName)) {\n            try {\n                if (containingBean != null) {\n                    beanName = BeanDefinitionReaderUtils.generateBeanName(\n                            beanDefinition, this.readerContext.getRegistry(), true);\n                }\n                else {\n                    beanName = this.readerContext.generateBeanName(beanDefinition);\n                    // Register an alias for the plain bean class name, if still possible,\n                    // if the generator returned the class name plus a suffix.\n                    // This is expected for Spring 1.2/2.0 backwards compatibility.\n                    String beanClassName = beanDefinition.getBeanClassName();\n                    if (beanClassName != null &&\n                            beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() &&\n                            !this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) {\n                        aliases.add(beanClassName);\n                    }\n                }\n                if (logger.isTraceEnabled()) {\n                    logger.trace(\"Neither XML 'id' nor 'name' specified - \" +\n                            \"using generated bean name [\" + beanName + \"]\");\n                }\n            }\n            catch (Exception ex) {\n                error(ex.getMessage(), ele);\n                return null;\n            }\n        }\n        String[] aliasesArray = StringUtils.toStringArray(aliases);\n        return new BeanDefinitionHolder(beanDefinition, beanName, aliasesArray);\n    }\n\n    return null;\n}\n\n/**\n * 真正的解析Element标签中每一个元素、子标签，并将结果封装到BeanDefinition中\n */\npublic AbstractBeanDefinition parseBeanDefinitionElement(\n        Element ele, String beanName, @Nullable BeanDefinition containingBean) {\n\n    // 这里 使用了一个栈将解析的标签栈也就是当前解析的状态全部都保存了起来。\n    // 比如说，当前解析到哪个标签了，（因为一个bean下面会有很多的子标签），当前是哪个bean\n    this.parseState.push(new BeanEntry(beanName));\n\n    String className = null;\n    if (ele.hasAttribute(CLASS_ATTRIBUTE)) {\n        className = ele.getAttribute(CLASS_ATTRIBUTE).trim();\n    }\n    String parent = null;\n    if (ele.hasAttribute(PARENT_ATTRIBUTE)) {\n        parent = ele.getAttribute(PARENT_ATTRIBUTE);\n    }\n\n    try {\n        AbstractBeanDefinition bd = createBeanDefinition(className, parent);\n\n        parseBeanDefinitionAttributes(ele, beanName, containingBean, bd);\n        bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT));\n\n        parseMetaElements(ele, bd);\n        parseLookupOverrideSubElements(ele, bd.getMethodOverrides());\n        parseReplacedMethodSubElements(ele, bd.getMethodOverrides());\n\n        parseConstructorArgElements(ele, bd);\n        parsePropertyElements(ele, bd);\n        parseQualifierElements(ele, bd);\n\n        bd.setResource(this.readerContext.getResource());\n        bd.setSource(extractSource(ele));\n\n        return bd;\n    }\n    catch (...) {\n        ...\n    }\n    finally {\n        this.parseState.pop();\n    }\n\n    return null;\n}\n```\n\n<br>\n\n第二步，就是根据扫描一下自定义属性什么的，看源码，就是根据命名空间这些，去找相应标签的相应属性有没有被定义等等。\n\n<br>\n\n第三步，注册到Registry，也就是我们的BeanFactory\n\n```java\n// BeanDefinitionReaderUtils\npublic static void registerBeanDefinition(\n        BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)\n        throws BeanDefinitionStoreException {\n\n    // Register bean definition under primary name.\n    String beanName = definitionHolder.getBeanName();\n    // 注册 beanName 和 BeanDefinition\n    registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition());\n\n    // Register aliases for bean name, if any.\n    // 注册 beanName对应的 alias\n    String[] aliases = definitionHolder.getAliases();\n    if (aliases != null) {\n        for (String alias : aliases) {\n            registry.registerAlias(beanName, alias);\n        }\n    }\n}\n\n\n\n@Override\npublic void registerBeanDefinition(String beanName, BeanDefinition beanDefinition)\n        throws BeanDefinitionStoreException {\n\n    ...\n\n    BeanDefinition existingDefinition = this.beanDefinitionMap.get(beanName);\n    if (existingDefinition != null) {\n        // 根据设置 是否允许同名 覆盖，不允许 抛出异常，允许 根据相应规则处理\n    } else {\n        // 如果已经开始创建，使用同步（可能创建开始会有多个线程访问 beanDefinitionMap）\n        if (hasBeanCreationStarted()) {\n            // Cannot modify startup-time collection elements anymore (for stable iteration)\n            synchronized (this.beanDefinitionMap) {\n                this.beanDefinitionMap.put(beanName, beanDefinition);\n                List<String> updatedDefinitions = new ArrayList<>(this.beanDefinitionNames.size() + 1);\n                updatedDefinitions.addAll(this.beanDefinitionNames);\n                updatedDefinitions.add(beanName);\n                this.beanDefinitionNames = updatedDefinitions;\n                if (this.manualSingletonNames.contains(beanName)) {\n                    Set<String> updatedSingletons = new LinkedHashSet<>(this.manualSingletonNames);\n                    updatedSingletons.remove(beanName);\n                    this.manualSingletonNames = updatedSingletons;\n                }\n            }\n        }\n        else {\n            // Still in startup registration phase\n            // 如果还是 startup 阶段，直接更新相应的数据\n            this.beanDefinitionMap.put(beanName, beanDefinition);\n            this.beanDefinitionNames.add(beanName);\n            this.manualSingletonNames.remove(beanName);\n        }\n        this.frozenBeanDefinitionNames = null;\n    }\n\n    if (existingDefinition != null || containsSingleton(beanName)) {\n        resetBeanDefinition(beanName);\n    }\n}\n\n\n// 判断是否开始创建 仅仅是判断 alreadyCreated set是否为空\n// alreadyCreated 在之后的 bean的创建中还会再次接触到，当 bean创建完了之后，会放在该set中保存。\nprotected boolean hasBeanCreationStarted() {\n    return !this.alreadyCreated.isEmpty();\n}\n\n// 之后注册 别名 也比较简单。\n```\n\n到这里为止，根root下的所有bean element都以`BeanDefinition`的形式保存在了`BeanFactory`中。\n\n其他类型的基本标签和这个过程都是类似的，比`bean`标签简单，而且最后都要回归到bean标签。\n\n\n<br>\n\n-------------\n\n## createBean\n\n现在，所有的bean都以`BeanDefinition`的格式保存在`BeanFactory`中。当调用类似`getBean`方法的时候就会实例化该bean。\n\n这是我们的入口：\n\n```java\nStudent myBean = beanFactory.getBean(\"myBean\", Student.class);\n```\n\n到最后都是执行的`AbstractBeanFactory.doCetBean`\n\n```java\nprotected <T> T doGetBean(final String name, @Nullable final Class<T> requiredType,\n        @Nullable final Object[] args, boolean typeCheckOnly) throws BeansException {\n\n    final String beanName = transformedBeanName(name);\n    Object bean;\n\n    // Eagerly check singleton cache for manually registered singletone.\n    // 1. 首先 会从singleton缓存中获取\n    Object sharedInstance = getSingleton(beanName);\n    if (sharedInstance != null && args == null) {\n        if (logger.isTraceEnabled()) {\n            if (isSingletonCurrentlyInCreation(beanName)) {\n                logger.trace(\"Returning eagerly cached instance of singleton bean '\" + beanName +\n                        \"' that is not fully initialized yet - a consequence of a circular reference\");\n            }\n            else {\n                logger.trace(\"Returning cached instance of singleton bean '\" + beanName + \"'\");\n            }\n        }\n        bean = getObjectForBeanInstance(sharedInstance, name, beanName, null);\n    }\n\n    else {\n        // Fail if we're already creating this bean instance:\n        // We're assumably within a circular reference.\n        if (isPrototypeCurrentlyInCreation(beanName)) {\n            throw new BeanCurrentlyInCreationException(beanName);\n        }\n\n        // 2. 如果当前singleton中没有，则看看 parentBeanFactory\n        // Check if bean definition exists in this factory.\n        BeanFactory parentBeanFactory = getParentBeanFactory();\n        if (parentBeanFactory != null && !containsBeanDefinition(beanName)) {\n            // Not found -> check parent.\n            String nameToLookup = originalBeanName(name);\n            if (parentBeanFactory instanceof AbstractBeanFactory) {\n                return ((AbstractBeanFactory) parentBeanFactory).doGetBean(\n                        nameToLookup, requiredType, args, typeCheckOnly);\n            }\n            else if (args != null) {\n                // Delegation to parent with explicit args.\n                return (T) parentBeanFactory.getBean(nameToLookup, args);\n            }\n            else if (requiredType != null) {\n                // No args -> delegate to standard getBean method.\n                return parentBeanFactory.getBean(nameToLookup, requiredType);\n            }\n            else {\n                return (T) parentBeanFactory.getBean(nameToLookup);\n            }\n        }\n\n        // 3. 如果还没有，如果本次操作不是 仅仅判断类型 则由当前的beanFactory完成创建该bean。\n        if (!typeCheckOnly) {\n            markBeanAsCreated(beanName);\n        }\n\n        try {\n            // 3.1 merge BeanDefinition\n            final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);\n            checkMergedBeanDefinition(mbd, beanName, args);\n\n            // 3.2 创建依赖\n            // Guarantee initialization of beans that the current bean depends on.\n            String[] dependsOn = mbd.getDependsOn();\n            if (dependsOn != null) {\n                for (String dep : dependsOn) {\n                    if (isDependent(beanName, dep)) {\n                        throw new BeanCreationException(mbd.getResourceDescription(), beanName,\n                                \"Circular depends-on relationship between '\" + beanName + \"' and '\" + dep + \"'\");\n                    }\n                    registerDependentBean(dep, beanName);\n                    try {\n                        getBean(dep);\n                    }\n                    catch (NoSuchBeanDefinitionException ex) {\n                        throw new BeanCreationException(mbd.getResourceDescription(), beanName,\n                                \"'\" + beanName + \"' depends on missing bean '\" + dep + \"'\", ex);\n                    }\n                }\n            }\n\n            // Create bean instance.\n            // 3.3 根据不同的 Scope 创建不同的Bean\n            if (mbd.isSingleton()) {\n                sharedInstance = getSingleton(beanName, () -> {\n                    try {\n                        return createBean(beanName, mbd, args);\n                    }\n                    catch (BeansException ex) {\n                        // Explicitly remove instance from singleton cache: It might have been put there\n                        // eagerly by the creation process, to allow for circular reference resolution.\n                        // Also remove any beans that received a temporary reference to the bean.\n                        destroySingleton(beanName);\n                        throw ex;\n                    }\n                });\n                bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);\n            }\n\n            else if (mbd.isPrototype()) {\n                // It's a prototype -> create a new instance.\n                Object prototypeInstance = null;\n                try {\n                    beforePrototypeCreation(beanName);\n                    prototypeInstance = createBean(beanName, mbd, args);\n                }\n                finally {\n                    afterPrototypeCreation(beanName);\n                }\n                bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);\n            }\n\n            else {\n                String scopeName = mbd.getScope();\n                final Scope scope = this.scopes.get(scopeName);\n                if (scope == null) {\n                    throw new IllegalStateException(\"No Scope registered for scope name '\" + scopeName + \"'\");\n                }\n                try {\n                    Object scopedInstance = scope.get(beanName, () -> {\n                        beforePrototypeCreation(beanName);\n                        try {\n                            return createBean(beanName, mbd, args);\n                        }\n                        finally {\n                            afterPrototypeCreation(beanName);\n                        }\n                    });\n                    bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);\n                }\n                catch (IllegalStateException ex) {\n                    throw new BeanCreationException(beanName,\n                            \"Scope '\" + scopeName + \"' is not active for the current thread; consider \" +\n                            \"defining a scoped proxy for this bean if you intend to refer to it from a singleton\",\n                            ex);\n                }\n            }\n        }\n        catch (BeansException ex) {\n            cleanupAfterBeanCreationFailure(beanName);\n            throw ex;\n        }\n    }\n\n    // Check if required type matches the type of the actual bean instance.\n    if (requiredType != null && !requiredType.isInstance(bean)) {\n        try {\n            T convertedBean = getTypeConverter().convertIfNecessary(bean, requiredType);\n            if (convertedBean == null) {\n                throw new BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());\n            }\n            return convertedBean;\n        }\n        catch (TypeMismatchException ex) {\n            if (logger.isTraceEnabled()) {\n                logger.trace(\"Failed to convert bean '\" + name + \"' to required type '\" +\n                        ClassUtils.getQualifiedName(requiredType) + \"'\", ex);\n            }\n            throw new BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());\n        }\n    }\n    return (T) bean;\n}\n\n```\n\n**整个getBean的流程都包含在上面的函数中，总体应该分为两大类来讨论，一个是`singleton`，一个是普通类`Prototype`**\n\n<br>\n\n------------\n\n### Prototype 类型的实例化\n\n首先，分析普通类型的实例化。 每次`getBean` 都需要 调用`createBean`,整个逻辑也比较简单。\n\n在之前，先了解一下整个过程涉及到的几个变量。他们都在`AbstractBeanFactory`\n\n```java\npublic abstract class AbstractBeanFactory extends FactoryBeanRegistrySupport implements ConfigurableBeanFactory {\n\n\t/** Map from bean name to merged RootBeanDefinition. */\n\tprivate final Map<String, RootBeanDefinition> mergedBeanDefinitions = new ConcurrentHashMap<>(256);\n\n\t/** Names of beans that have already been created at least once. */\n\tprivate final Set<String> alreadyCreated = Collections.newSetFromMap(new ConcurrentHashMap<>(256));\n\n\t/** Names of beans that are currently in creation. */\n\tprivate final ThreadLocal<Object> prototypesCurrentlyInCreation =\n\t\t\tnew NamedThreadLocal<>(\"Prototype beans currently in creation\");\n\n\n    /**\n\t * Mark the specified bean as already created (or about to be created).\n\t * <p>This allows the bean factory to optimize its caching for repeated\n\t * creation of the specified bean.\n\t * @param beanName the name of the bean\n\t */\n    protected void markBeanAsCreated(String beanName) {\n\t\tif (!this.alreadyCreated.contains(beanName)) {\n\t\t\tsynchronized (this.mergedBeanDefinitions) {\n\t\t\t\tif (!this.alreadyCreated.contains(beanName)) {\n\t\t\t\t\t// Let the bean definition get re-merged now that we're actually creating\n\t\t\t\t\t// the bean... just in case some of its metadata changed in the meantime.\n\t\t\t\t\tclearMergedBeanDefinition(beanName);\n\t\t\t\t\tthis.alreadyCreated.add(beanName);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected boolean hasBeanCreationStarted() {\n\t\treturn !this.alreadyCreated.isEmpty();\n\t}\n\n\n\t/**\n\t * Return whether the specified prototype bean is currently in creation\n\t * (within the current thread).\n\t * @param beanName the name of the bean\n\t */\n\tprotected boolean isPrototypeCurrentlyInCreation(String beanName) {\n\t\tObject curVal = this.prototypesCurrentlyInCreation.get();\n\t\treturn (curVal != null &&\n\t\t\t\t(curVal.equals(beanName) || (curVal instanceof Set && ((Set<?>) curVal).contains(beanName))));\n\t}\n\n\t/**\n\t * Callback before prototype creation.\n\t * <p>The default implementation register the prototype as currently in creation.\n\t * @param beanName the name of the prototype about to be created\n\t * @see #isPrototypeCurrentlyInCreation\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tprotected void beforePrototypeCreation(String beanName) {\n\t\tObject curVal = this.prototypesCurrentlyInCreation.get();\n\t\tif (curVal == null) {\n\t\t\tthis.prototypesCurrentlyInCreation.set(beanName);\n\t\t}\n\t\telse if (curVal instanceof String) {\n\t\t\tSet<String> beanNameSet = new HashSet<>(2);\n\t\t\tbeanNameSet.add((String) curVal);\n\t\t\tbeanNameSet.add(beanName);\n\t\t\tthis.prototypesCurrentlyInCreation.set(beanNameSet);\n\t\t}\n\t\telse {\n\t\t\tSet<String> beanNameSet = (Set<String>) curVal;\n\t\t\tbeanNameSet.add(beanName);\n\t\t}\n\t}\n\n\t/**\n\t * Callback after prototype creation.\n\t * <p>The default implementation marks the prototype as not in creation anymore.\n\t * @param beanName the name of the prototype that has been created\n\t * @see #isPrototypeCurrentlyInCreation\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tprotected void afterPrototypeCreation(String beanName) {\n\t\tObject curVal = this.prototypesCurrentlyInCreation.get();\n\t\tif (curVal instanceof String) {\n\t\t\tthis.prototypesCurrentlyInCreation.remove();\n\t\t}\n\t\telse if (curVal instanceof Set) {\n\t\t\tSet<String> beanNameSet = (Set<String>) curVal;\n\t\t\tbeanNameSet.remove(beanName);\n\t\t\tif (beanNameSet.isEmpty()) {\n\t\t\t\tthis.prototypesCurrentlyInCreation.remove();\n\t\t\t}\n\t\t}\n\t}\n\n\n}\n```\n\n- `mergedBeanDefinitions` 每个bean在创建之前都需要将普通的`BeanDefinition`转换为`RootBeanDefinition`也就是该成员变量中存储的对象。 而且，他也作为创建对象过程中的同步锁，\n- `alreadyCreated` 每个第一次创建的对象的 beanName都会被保存到该成员变量中。也是用来标志创建过程是否开始，某个bean是否开始创建\n- `prototypesCurrentlyInCreation` 主要是针对`Prototype`（普通）类型的bean。因为可能被同时多个线程创建，所以保存在ThreadLocal`中.    \n<br>\n\n下面我们看 整个bean的创建过程：\n\n第一步，检测是否仅仅是来检查类型的，如果不是，那就是来创建对象的，就将该对象标记被在创建中。`markAsCreated()`代码上面已经给出了。\n\n第二步，`getMergedLocalBeanDefinition`。整个merge的过程就是将 父BeanDefinition合并到子BeanDefinition中。整个过程的细节以及几个BeanDefinition关系可以查看[bean的parent属性详解和获取RootBeanDefinition](https://blog.csdn.net/disiwei1012/article/details/77142167)。该步骤会设置默认scope为singleton\n\n\n```java\nprotected RootBeanDefinition getMergedLocalBeanDefinition(String beanName) throws BeansException {\n    // Quick check on the concurrent map first, with minimal locking.\n    RootBeanDefinition mbd = this.mergedBeanDefinitions.get(beanName);\n    if (mbd != null) {\n        return mbd;\n    }\n    return getMergedBeanDefinition(beanName, getBeanDefinition(beanName), null);\n}\n\n\nprotected RootBeanDefinition getMergedBeanDefinition(\n        String beanName, BeanDefinition bd, @Nullable BeanDefinition containingBd)\n        throws BeanDefinitionStoreException{\n\n    synchronized (this.mergedBeanDefinitions) {\n        RootBeanDefinition mbd = null;\n\n        // Check with full lock now in order to enforce the same merged instance.\n        if (containingBd == null) {\n            mbd = this.mergedBeanDefinitions.get(beanName);\n        }\n\n        if (mbd == null) {\n            if (bd.getParentName() == null) {\n                // Use copy of given root bean definition.\n                if (bd instanceof RootBeanDefinition) {\n                    mbd = ((RootBeanDefinition) bd).cloneBeanDefinition();\n                }\n                else {\n                    mbd = new RootBeanDefinition(bd);\n                }\n            }\n            else {\n                // Child bean definition: needs to be merged with parent.\n                BeanDefinition pbd;\n                try {\n                    String parentBeanName = transformedBeanName(bd.getParentName());\n                    if (!beanName.equals(parentBeanName)) {\n                        pbd = getMergedBeanDefinition(parentBeanName);\n                    }\n                    else {\n                        BeanFactory parent = getParentBeanFactory();\n                        if (parent instanceof ConfigurableBeanFactory) {\n                            pbd = ((ConfigurableBeanFactory) parent).getMergedBeanDefinition(parentBeanName);\n                        }\n                        else {\n                            throw new NoSuchBeanDefinitionException(parentBeanName,\n                                    \"Parent name '\" + parentBeanName + \"' is equal to bean name '\" + beanName +\n                                    \"': cannot be resolved without an AbstractBeanFactory parent\");\n                        }\n                    }\n                }\n                catch (NoSuchBeanDefinitionException ex) {\n                    throw new BeanDefinitionStoreException(bd.getResourceDescription(), beanName,\n                            \"Could not resolve parent bean definition '\" + bd.getParentName() + \"'\", ex);\n                }\n                // Deep copy with overridden values.\n                mbd = new RootBeanDefinition(pbd);\n                mbd.overrideFrom(bd);\n            }\n\n            // Set default singleton scope, if not configured before.\n            // 设置默认的scope -- singleton\n            if (!StringUtils.hasLength(mbd.getScope())) {\n                mbd.setScope(RootBeanDefinition.SCOPE_SINGLETON);\n            }\n\n            // A bean contained in a non-singleton bean cannot be a singleton itself.\n            // Let's correct this on the fly here, since this might be the result of\n            // parent-child merging for the outer bean, in which case the original inner bean\n            // definition will not have inherited the merged outer bean's singleton status.\n            if (containingBd != null && !containingBd.isSingleton() && mbd.isSingleton()) {\n                mbd.setScope(containingBd.getScope());\n            }\n\n            // Cache the merged bean definition for the time being\n            // (it might still get re-merged later on in order to pick up metadata changes)\n            if (containingBd == null && isCacheBeanMetadata()) {\n                this.mergedBeanDefinitions.put(beanName, mbd);\n            }\n        }\n\n        return mbd;\n    }\n}\n\n```\n\n第三步，获取依赖。就是检测BeanDefinition中dependOn属性，get所有dependOn的bean。\n\n第四步，创建实例。\n\n第五步，调用`getObjectForBeanInstance`，获取真正的实例对象。\n\n```java\nprotected Object getObjectForBeanInstance(\n        Object beanInstance, String name, String beanName, @Nullable RootBeanDefinition mbd) {\n\n    // 判空\n    // Don't let calling code try to dereference the factory if the bean isn't a factory.\n    if (BeanFactoryUtils.isFactoryDereference(name)) {\n        if (beanInstance instanceof NullBean) {\n            return beanInstance;\n        }\n        if (!(beanInstance instanceof FactoryBean)) {\n            throw new BeanIsNotAFactoryException(transformedBeanName(name), beanInstance.getClass());\n        }\n    }\n\n    // Now we have the bean instance, which may be a normal bean or a FactoryBean.\n    // If it's a FactoryBean, we use it to create a bean instance, unless the\n    // caller actually wants a reference to the factory.\n    // 这时已经持有了对象，如果不是FactoryBean 直接返回，如果用户想获取的就是FactoryBean 也直接返回\n    if (!(beanInstance instanceof FactoryBean) || BeanFactoryUtils.isFactoryDereference(name)) {\n        return beanInstance;\n    }\n\n    // 说明这是一个FactoryBean，并且想获取其中的bean\n    Object object = null;\n    if (mbd == null) {\n        object = getCachedObjectForFactoryBean(beanName);\n    }\n    if (object == null) {\n        // Return bean instance from factory.\n        FactoryBean<?> factory = (FactoryBean<?>) beanInstance;\n        // Caches object obtained from FactoryBean if it is a singleton.\n        if (mbd == null && containsBeanDefinition(beanName)) {\n            mbd = getMergedLocalBeanDefinition(beanName);\n        }\n        boolean synthetic = (mbd != null && mbd.isSynthetic());\n        object = getObjectFromFactoryBean(factory, beanName, !synthetic);\n    }\n    return object;\n}\n\n```\n\n<br>\n\n------------\n\n### Singleton 类型的实例化\n\n用来操作Singleton相关实例的类是`DefaultSingletonBeanRegistry`，首先，先来好好了解下该类。\n\n```java\npublic class DefaultSingletonBeanRegistry extends SimpleAliasRegistry implements SingletonBeanRegistry {\n\n\t/** Cache of singleton objects: bean name to bean instance. */\n    // 也作为一些需要同步操作的锁\n\tprivate final Map<String, Object> singletonObjects = new ConcurrentHashMap<>(256);\n\n\t/** Cache of singleton factories: bean name to ObjectFactory. */\n\tprivate final Map<String, ObjectFactory<?>> singletonFactories = new HashMap<>(16);\n\n\t/** Cache of early singleton objects: bean name to bean instance. */\n\tprivate final Map<String, Object> earlySingletonObjects = new HashMap<>(16);\n\n\t/** Set of registered singletons, containing the bean names in registration order. */\n    // 用来判断 singleton 是否存在的依据\n\tprivate final Set<String> registeredSingletons = new LinkedHashSet<>(256);\n\n    // ---------------对singleton、singletonFactory的添加删除等操作，都是操作的以上变量-------------------\n\n\t/** Names of beans that are currently in creation. */\n\tprivate final Set<String> singletonsCurrentlyInCreation =\n\t\t\tCollections.newSetFromMap(new ConcurrentHashMap<>(16));\n\n\t/** Flag that indicates whether we're currently within destroySingletons. */\n\tprivate boolean singletonsCurrentlyInDestruction = false;\n\n\t/** Disposable bean instances: bean name to disposable instance. */\n    /*\n     registering its DisposableBean interface and/or the given destroy method to be called on factory shutdown\n     singleton 如果需要在销毁时执行某些操作，可以在创建好对象之后，将singleton放入该collection中。\n     在该collection中的singleton在BeanFactroy销毁的时候会执行 他的 destroy method 或者 DisposableBean接口的回调方法\n    */\n\tprivate final Map<String, Object> disposableBeans = new LinkedHashMap<>();\n\n    ...\n    // 还有其他变量，没有列全\n\n\n\t@Override\n\tpublic void registerSingleton(String beanName, Object singletonObject) throws IllegalStateException {\n\t\tsynchronized (this.singletonObjects) {\n\t\t\tObject oldObject = this.singletonObjects.get(beanName);\n\t\t\tif (oldObject != null) {\n\t\t\t\tthrow new IllegalStateException(\"Could not register object [\" + singletonObject +\n\t\t\t\t\t\t\"] under bean name '\" + beanName + \"': there is already object [\" + oldObject + \"] bound\");\n\t\t\t}\n\t\t\taddSingleton(beanName, singletonObject);\n\t\t}\n\t}\n\n\t/**\n\t * Add the given singleton object to the singleton cache of this factory.\n\t * <p>To be called for eager registration of singletons.\n\t * @param beanName the name of the bean\n\t * @param singletonObject the singleton object\n\t */\n\tprotected void addSingleton(String beanName, Object singletonObject) {\n        // 说明我们已经创建出来了对象\n        /*\n         添加到singletonObjects中\n         从singletonFactories删除\n         从earlySingletonObjects删除\n         添加到registerSingletons，表示 已注册，下次判断的时候 就返回true了\n        */\n\t\tsynchronized (this.singletonObjects) {\n\t\t\tthis.singletonObjects.put(beanName, singletonObject);\n\t\t\tthis.singletonFactories.remove(beanName);\n\t\t\tthis.earlySingletonObjects.remove(beanName);\n\t\t\tthis.registeredSingletons.add(beanName);\n\t\t}\n\t}\n\n\t/**\n\t * Add the given singleton factory for building the specified singleton\n\t * if necessary.\n\t * <p>To be called for eager registration of singletons, e.g. to be able to\n\t * resolve circular references.\n\t * @param beanName the name of the bean\n\t * @param singletonFactory the factory for the singleton object\n\t */\n\tprotected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory) {\n\t\tAssert.notNull(singletonFactory, \"Singleton factory must not be null\");\n\t\tsynchronized (this.singletonObjects) {\n\t\t\tif (!this.singletonObjects.containsKey(beanName)) {\n\t\t\t\tthis.singletonFactories.put(beanName, singletonFactory);\n\t\t\t\tthis.earlySingletonObjects.remove(beanName);\n\t\t\t\tthis.registeredSingletons.add(beanName);\n\t\t\t}\n\t\t}\n\t}\n\n\t@Override\n\t@Nullable\n\tpublic Object getSingleton(String beanName) {\n\t\treturn getSingleton(beanName, true);\n\t}\n\n\t/**\n\t * Return the (raw) singleton object registered under the given name.\n\t * <p>Checks already instantiated singletons and also allows for an early\n\t * reference to a currently created singleton (resolving a circular reference).\n\t * @param beanName the name of the bean to look for\n\t * @param allowEarlyReference whether early references should be created or not\n\t * @return the registered singleton object, or {@code null} if none found\n\t */\n\t@Nullable\n\tprotected Object getSingleton(String beanName, boolean allowEarlyReference) {\n        // 先从 singltonObjects 中获取，看是否已经存在真正实例化好的对象\n\t\tObject singletonObject = this.singletonObjects.get(beanName);\n\t\tif (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {\n\t\t\tsynchronized (this.singletonObjects) {\n                // 在从early中取\n\t\t\t\tsingletonObject = this.earlySingletonObjects.get(beanName);\n\t\t\t\tif (singletonObject == null && allowEarlyReference) {\n                    // 再从singleFactory中取\n\t\t\t\t\tObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName);\n\t\t\t\t\tif (singletonFactory != null) {\n\t\t\t\t\t\tsingletonObject = singletonFactory.getObject();\n\t\t\t\t\t\tthis.earlySingletonObjects.put(beanName, singletonObject);\n\t\t\t\t\t\tthis.singletonFactories.remove(beanName);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn singletonObject;\n\t}\n\n\tprotected void removeSingleton(String beanName) {\n\t\tsynchronized (this.singletonObjects) {\n\t\t\tthis.singletonObjects.remove(beanName);\n\t\t\tthis.singletonFactories.remove(beanName);\n\t\t\tthis.earlySingletonObjects.remove(beanName);\n\t\t\tthis.registeredSingletons.remove(beanName);\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean containsSingleton(String beanName) {\n\t\treturn this.singletonObjects.containsKey(beanName);\n\t}\n\n\n\tpublic boolean isSingletonCurrentlyInCreation(String beanName) {\n\t\treturn this.singletonsCurrentlyInCreation.contains(beanName);\n\t}\n\n\t/**\n\t * Callback before singleton creation.\n\t */\n\tprotected void beforeSingletonCreation(String beanName) {\n\t\tif (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.add(beanName)) {\n\t\t\tthrow new BeanCurrentlyInCreationException(beanName);\n\t\t}\n\t}\n\n\t/**\n\t * Callback after singleton creation.\n\t */\n\tprotected void afterSingletonCreation(String beanName) {\n\t\tif (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.remove(beanName)) {\n\t\t\tthrow new IllegalStateException(\"Singleton '\" + beanName + \"' isn't currently in creation\");\n\t\t}\n\t}\n\n\tpublic void registerDisposableBean(String beanName, DisposableBean bean) {\n\t\tsynchronized (this.disposableBeans) {\n\t\t\tthis.disposableBeans.put(beanName, bean);\n\t\t}\n\t}\n\n\n\tpublic void destroySingletons() {\n\t\tif (logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"Destroying singletons in \" + this);\n\t\t}\n\t\tsynchronized (this.singletonObjects) {\n\t\t\tthis.singletonsCurrentlyInDestruction = true;\n\t\t}\n\n\t\tString[] disposableBeanNames;\n\t\tsynchronized (this.disposableBeans) {\n\t\t\tdisposableBeanNames = StringUtils.toStringArray(this.disposableBeans.keySet());\n\t\t}\n\t\tfor (int i = disposableBeanNames.length - 1; i >= 0; i--) {\n\t\t\tdestroySingleton(disposableBeanNames[i]);\n\t\t}\n\n\t\tthis.containedBeanMap.clear();\n\t\tthis.dependentBeanMap.clear();\n\t\tthis.dependenciesForBeanMap.clear();\n\n\t\tclearSingletonCache();\n\t}\n\n```\n\n第一步，查看之前解析过没有。不管是之前放到early，singletonFactories中 都可以获取到。剩下的和Prototype基本差不多。\n\n第二步，从parent BeanFactory获取。\n\n第三步，标记创建中\n\n第四步，mergeBeanDefinition\n\n第五步，createBeanInstance\n\n除了createBean之外，还有一些singletonBean的特殊操作。\n\n\n```java\npublic Object getSingleton(String beanName, ObjectFactory<?> singletonFactory) {\n    Assert.notNull(beanName, \"Bean name must not be null\");\n    synchronized (this.singletonObjects) {\n        Object singletonObject = this.singletonObjects.get(beanName);\n        if (singletonObject == null) {\n            if (this.singletonsCurrentlyInDestruction) {\n                throw new BeanCreationNotAllowedException(beanName,\n                        \"Singleton bean creation not allowed while singletons of this factory are in destruction \" +\n                        \"(Do not request a bean from a BeanFactory in a destroy method implementation!)\");\n            }\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"Creating shared instance of singleton bean '\" + beanName + \"'\");\n            }\n            // 先回调 beforeCreate \n            beforeSingletonCreation(beanName);\n            boolean newSingleton = false;\n            boolean recordSuppressedExceptions = (this.suppressedExceptions == null);\n            if (recordSuppressedExceptions) {\n                this.suppressedExceptions = new LinkedHashSet<>();\n            }\n            try {\n                // getObject 工厂方法 其实就是 createBean 方法\n                singletonObject = singletonFactory.getObject();\n                newSingleton = true;\n            }\n            catch (IllegalStateException ex) {\n                // Has the singleton object implicitly appeared in the meantime ->\n                // if yes, proceed with it since the exception indicates that state.\n                singletonObject = this.singletonObjects.get(beanName);\n                if (singletonObject == null) {\n                    throw ex;\n                }\n            }\n            catch (BeanCreationException ex) {\n                if (recordSuppressedExceptions) {\n                    for (Exception suppressedException : this.suppressedExceptions) {\n                        ex.addRelatedCause(suppressedException);\n                    }\n                }\n                throw ex;\n            }\n            finally {\n                if (recordSuppressedExceptions) {\n                    this.suppressedExceptions = null;\n                }\n                // 创建完成 回调 afterCreate\n                afterSingletonCreation(beanName);\n            }\n            if (newSingleton) {\n                // 最后添加到 cache中\n                addSingleton(beanName, singletonObject);\n            }\n        }\n        return singletonObject;\n    }\n}\n\n\n```\n\n第六步，调用`getObjectForBeanInstance`，获取真正的实例对象。\n\n<br>\n\n-------------\n\n### doCreateBean\n\n整个创建bean的过程 大致如下：\n\n1. 给 `InstantiationAwareBeanPostProcessor` 接口最后的机会，在实例化之前修改bean。\n2. 进入 doCreateBean\n3. 创建对象实例\n4. 给`MergedBeanDefinitionPostProcessor`接口修改 `RootBeanDefinition`的机会\n5. 应用 BeanDefinition 中的 property\n    1. 如果存在，回调接口 InstantiationAwareBeanPostProcessor 的方法 postProcessAfterInstantiation\n    2. 将PropertyValue中的 beanName beanClass 替换为 对应的 bean 实例\n    3. 如果存在，调用 接口 InstantiationAwareBeanPostProcessor 的方法 postProcessPropertyValues 对PropertyValues 应用修改\n    4. 最后将 PropertyValues 赋值给 bean 实例对象\n6. 调用初始化方法\n    1. 如果该bean 实现了 aware 接口，则调用相应aware 接口的set方法\n    2. BeanPostProcessor.postProcessBeforeInitialization\n    3. 如果实现了接口InitializingBean，则回调 afterPropertySet 方法\n    4. 调用 init 方法\n    5. BeanPostProcessor.postProcessAfterInitialization\n\n<br>\n\n`doCreateBean`\n\n```java\nprotected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final @Nullable Object[] args)\n        throws BeanCreationException {\n\n    // Instantiate the bean.\n    BeanWrapper instanceWrapper = null;\n    if (mbd.isSingleton()) {\n        instanceWrapper = this.factoryBeanInstanceCache.remove(beanName);\n    }\n    if (instanceWrapper == null) {\n        //1. 根据不用的策略创建实例对象，如果没有指定策略，调用默认无参构造函数。\n        // 另外 还向 wrapper中放入了 ConvertService CustomEditor 等对象，暂时不知道这是干嘛的。\n        instanceWrapper = createBeanInstance(beanName, mbd, args);\n    }\n    final Object bean = instanceWrapper.getWrappedInstance();\n    Class<?> beanType = instanceWrapper.getWrappedClass();\n    if (beanType != NullBean.class) {\n        mbd.resolvedTargetType = beanType;\n    }\n\n    // Allow post-processors to modify the merged bean definition.\n    synchronized (mbd.postProcessingLock) {\n        if (!mbd.postProcessed) {\n            try {\n                // 2. 给 MergedBeanDefinitionPostProcessor 接口 机会修改 RootBeanDefinition\n                applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);\n            }\n            catch (Throwable ex) {\n                throw new BeanCreationException(mbd.getResourceDescription(), beanName,\n                        \"Post-processing of merged bean definition failed\", ex);\n            }\n            mbd.postProcessed = true;\n        }\n    }\n\n    // Eagerly cache singletons to be able to resolve circular references\n    // even when triggered by lifecycle interfaces like BeanFactoryAware.\n    boolean earlySingletonExposure = (mbd.isSingleton() && this.allowCircularReferences &&\n            isSingletonCurrentlyInCreation(beanName));\n    if (earlySingletonExposure) {\n        if (logger.isTraceEnabled()) {\n            logger.trace(\"Eagerly caching bean '\" + beanName +\n                    \"' to allow for resolving potential circular references\");\n        }\n        addSingletonFactory(beanName, () -> getEarlyBeanReference(beanName, mbd, bean));\n    }\n\n    // Initialize the bean instance.\n    Object exposedObject = bean;\n    try {\n        // 应用 BeanDefinition 中的 property \n        populateBean(beanName, mbd, instanceWrapper);\n        // 调用初始化方法\n        exposedObject = initializeBean(beanName, exposedObject, mbd);\n    }\n    catch (Throwable ex) {\n        if (ex instanceof BeanCreationException && beanName.equals(((BeanCreationException) ex).getBeanName())) {\n            throw (BeanCreationException) ex;\n        }\n        else {\n            throw new BeanCreationException(\n                    mbd.getResourceDescription(), beanName, \"Initialization of bean failed\", ex);\n        }\n    }\n\n    if (earlySingletonExposure) {\n        Object earlySingletonReference = getSingleton(beanName, false);\n        if (earlySingletonReference != null) {\n            if (exposedObject == bean) {\n                exposedObject = earlySingletonReference;\n            }\n            else if (!this.allowRawInjectionDespiteWrapping && hasDependentBean(beanName)) {\n                String[] dependentBeans = getDependentBeans(beanName);\n                Set<String> actualDependentBeans = new LinkedHashSet<>(dependentBeans.length);\n                for (String dependentBean : dependentBeans) {\n                    if (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) {\n                        actualDependentBeans.add(dependentBean);\n                    }\n                }\n                if (!actualDependentBeans.isEmpty()) {\n                    throw new BeanCurrentlyInCreationException(beanName,\n                            \"Bean with name '\" + beanName + \"' has been injected into other beans [\" +\n                            StringUtils.collectionToCommaDelimitedString(actualDependentBeans) +\n                            \"] in its raw version as part of a circular reference, but has eventually been \" +\n                            \"wrapped. This means that said other beans do not use the final version of the \" +\n                            \"bean. This is often the result of over-eager type matching - consider using \" +\n                            \"'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example.\");\n                }\n            }\n        }\n    }\n\n    // Register bean as disposable.\n    try {\n        // 如果需要在 BeanFactory destory 的时候 回调 destory 方法 则 注册\n        registerDisposableBeanIfNecessary(beanName, bean, mbd);\n    }\n    catch (BeanDefinitionValidationException ex) {\n        throw new BeanCreationException(\n                mbd.getResourceDescription(), beanName, \"Invalid destruction signature\", ex);\n    }\n\n    return exposedObject;\n}\n\n```\n\n<br>\n\n`populateBean`\n\n```java\nprotected void populateBean(String beanName, RootBeanDefinition mbd, @Nullable BeanWrapper bw) {\n\n    ...\n\n    // 回调接口 InstantiationAwareBeanPostProcessor 的方法 postProcessAfterInstantiation\n    // 如果发生了 修改 这里就直接返回 ，不会再给 bean 设置 BeanDefinition 中的 property\n    if (!mbd.isSynthetic() && hasInstantiationAwareBeanPostProcessors()) {\n        for (BeanPostProcessor bp : getBeanPostProcessors()) {\n            if (bp instanceof InstantiationAwareBeanPostProcessor) {\n                InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;\n                if (!ibp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) {\n                    continueWithPropertyPopulation = false;\n                    break;\n                }\n            }\n        }\n    }\n\n    if (!continueWithPropertyPopulation) {\n        return;\n    }\n\n    // 获取 property\n    PropertyValues pvs = (mbd.hasPropertyValues() ? mbd.getPropertyValues() : null);\n\n    // 如果 property 中的 value 是 beanClass 或者 beanName，则需要先getBean，得到该bean实例，替换value中的 beanName 或 beanClass\n    if (mbd.getResolvedAutowireMode() == AUTOWIRE_BY_NAME || mbd.getResolvedAutowireMode() == AUTOWIRE_BY_TYPE) {\n        MutablePropertyValues newPvs = new MutablePropertyValues(pvs);\n        // Add property values based on autowire by name if applicable.\n        if (mbd.getResolvedAutowireMode() == AUTOWIRE_BY_NAME) {\n            autowireByName(beanName, mbd, bw, newPvs);\n        }\n        // Add property values based on autowire by type if applicable.\n        if (mbd.getResolvedAutowireMode() == AUTOWIRE_BY_TYPE) {\n            autowireByType(beanName, mbd, bw, newPvs);\n        }\n        pvs = newPvs;\n    }\n\n    boolean hasInstAwareBpps = hasInstantiationAwareBeanPostProcessors();\n    boolean needsDepCheck = (mbd.getDependencyCheck() != AbstractBeanDefinition.DEPENDENCY_CHECK_NONE);\n\n\n    // 调用 接口 InstantiationAwareBeanPostProcessor 的方法 postProcessPropertyValues 对PropertyValues 应用修改\n    PropertyDescriptor[] filteredPds = null;\n    if (hasInstAwareBpps) {\n        if (pvs == null) {\n            pvs = mbd.getPropertyValues();\n        }\n        for (BeanPostProcessor bp : getBeanPostProcessors()) {\n            if (bp instanceof InstantiationAwareBeanPostProcessor) {\n                InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;\n                PropertyValues pvsToUse = ibp.postProcessProperties(pvs, bw.getWrappedInstance(), beanName);\n                if (pvsToUse == null) {\n                    if (filteredPds == null) {\n                        filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);\n                    }\n                    pvsToUse = ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName);\n                    if (pvsToUse == null) {\n                        return;\n                    }\n                }\n                pvs = pvsToUse;\n            }\n        }\n    }\n    if (needsDepCheck) {\n        if (filteredPds == null) {\n            filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);\n        }\n        checkDependencies(beanName, mbd, filteredPds, pvs);\n    }\n\n    // 最后将 PropertyValues  赋值给 bean 实例\n    if (pvs != null) {\n        applyPropertyValues(beanName, mbd, bw, pvs);\n    }\n\n}\n\n```\n\n<br>\n\n`initializeBean`\n\n```java\nprotected Object initializeBean(final String beanName, final Object bean, @Nullable RootBeanDefinition mbd) {\n    if (System.getSecurityManager() != null) {\n        AccessController.doPrivileged((PrivilegedAction<Object>) () -> {\n            invokeAwareMethods(beanName, bean);\n            return null;\n        }, getAccessControlContext());\n    }\n    else {\n        // 如果该bean 实现了 aware 接口，则调用相应aware 接口的set方法\n        invokeAwareMethods(beanName, bean);\n    }\n\n    Object wrappedBean = bean;\n    if (mbd == null || !mbd.isSynthetic()) {\n        // BeanPostProcessor.postProcessBeforeInitialization\n        wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);\n    }\n\n    try {\n        // 如果实现了接口InitializingBean，则回调 afterPropertySet 方法\n        // 调用init 方法\n        invokeInitMethods(beanName, wrappedBean, mbd);\n    }\n    catch (Throwable ex) {\n        throw new BeanCreationException(\n                (mbd != null ? mbd.getResourceDescription() : null),\n                beanName, \"Invocation of init method failed\", ex);\n    }\n    if (mbd == null || !mbd.isSynthetic()) {\n        // BeanPostProcessor.postProcessAfterInitialization\n        wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);\n    }\n\n    return wrappedBean;\n}\n\n```\n\n\n<br>\n\n其他的 doCreateBean 很多代码都没有分析，是这些代码主要在做一些 singleton 循环引用的处理。\n","source":"_posts/beandefination和createbean.md","raw":"---\ntitle: Spring BeanDefinition & createBean\ncategories:\n  - Spring\ntags:\n  - spring\n  - beanDefinition\n  - createBean\n  - 源码分析\n---\n\n# BeanDefinition & createBean\n\n分析Bean在spring中解析后的定义BeanDefinition，以及createBean的过程\n\n<br>\n\n- [BeanDefinition & createBean](#beandefinition--createbean)\n  - [BeanDefinition](#beandefinition)\n  - [createBean](#createbean)\n    - [Prototype 类型的实例化](#prototype-类型的实例化)\n    - [Singleton 类型的实例化](#singleton-类型的实例化)\n    - [doCreateBean](#docreatebean)\n\n\n<br>\n\n测试的代码如下：\n\nmain\n\n```java\npublic class Hello {\n\n    public static void main(String[] args) {\n        ClassPathResource resource = new ClassPathResource(\"beans.xml\");\n        DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();\n        XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(beanFactory);\n        reader.loadBeanDefinitions(resource);\n        Student myBean = beanFactory.getBean(\"myBean\", Student.class);\n        System.out.println(myBean.toString());\n    }\n}\n\n```\n\n<br>\n\npom.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.wyj.alipay</groupId>\n    <artifactId>hello-spring</artifactId>\n    <version>1.0</version>\n\n    <properties>\n        <spring.version></spring.version>\n        <jdk.version></jdk.version>\n    </properties>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework</groupId>\n                <artifactId>spring-framework-bom</artifactId>\n                <version>5.1.1.RELEASE</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-beans</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-context</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-core</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <version>1.16.22</version>\n            <optional>true</optional>\n        </dependency>\n\n\n    </dependencies>\n\n\n</project>\n\n```\n\n<br>\n\nbeans.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\">\n\n    <bean id=\"myBean\" class=\"com.wyj.alipay.spring.bean.Student\">\n        <property name=\"name\" value=\"zhangsan\"/>\n        <property name=\"age\" value=\"16\" />\n    </bean>\n\n\n</beans>\n```\n\n## BeanDefinition\n\n\n在上一篇分析基本容器的时候，解析配置文件，扫描Bean，找到Bean的定义 -- `BeanDefinition`是在`DefaultBeanDefinitionDocumentReader`中完成的。\n\n扫描我们的bean的配置文件，拿到配置文件的解析结果`Element`对象，并根据不同的标签类型使用不同的方法解析，基本代码如下：\n\n```java\n\n// 循环遍历解析 每一个 node\nprotected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate) {\n    if (delegate.isDefaultNamespace(root)) {\n        NodeList nl = root.getChildNodes();\n        for (int i = 0; i < nl.getLength(); i++) {\n            Node node = nl.item(i);\n            if (node instanceof Element) {\n                Element ele = (Element) node;\n                if (delegate.isDefaultNamespace(ele)) {\n                    parseDefaultElement(ele, delegate);\n                }\n                else {\n                    delegate.parseCustomElement(ele);\n                }\n            }\n        }\n    }\n    else {\n        delegate.parseCustomElement(root);\n    }\n}\n\nprivate void parseDefaultElement(Element ele, BeanDefinitionParserDelegate delegate) {\n    if (delegate.nodeNameEquals(ele, IMPORT_ELEMENT)) {\n        importBeanDefinitionResource(ele);\n    }\n    else if (delegate.nodeNameEquals(ele, ALIAS_ELEMENT)) {\n        processAliasRegistration(ele);\n    }\n    else if (delegate.nodeNameEquals(ele, BEAN_ELEMENT)) {\n        processBeanDefinition(ele, delegate);\n    }\n    else if (delegate.nodeNameEquals(ele, NESTED_BEANS_ELEMENT)) {\n        // recurse\n        doRegisterBeanDefinitions(ele);\n    }\n}\n\n```\n\n剩下的任务就是解析每一个扫描xml文件中得出的`Element`标签，并将`Element`对象转换为bean的定义对象`BeanDefinition`。而这些任务在Spring的架构中都是委托给`BeanDefinitionParserDelegate`实现的，该类是专门负责将`Element`xml标签对象，转换为相应的`BeanDefinition`对象。\n\n下面我们先看下`BeanDefinitionParserDelegate`的初始化过程：\n\n```java\n// DefaultBeanDefinitionDocumentReader 中\nprotected BeanDefinitionParserDelegate createDelegate(\n        XmlReaderContext readerContext, Element root, @Nullable BeanDefinitionParserDelegate parentDelegate) {\n\n    BeanDefinitionParserDelegate delegate = new BeanDefinitionParserDelegate(readerContext);\n    delegate.initDefaults(root, parentDelegate);\n    return delegate;\n}\n\n// BeanDefinitionParserDelegate\npublic BeanDefinitionParserDelegate(XmlReaderContext readerContext) {\n    Assert.notNull(readerContext, \"XmlReaderContext must not be null\");\n    this.readerContext = readerContext;\n}\n\n/*\n * populateDefaults 的任务就是扫描根标签beans有没有对所有bean的默认配置。Initialize the default lazy-init, autowire,\n * dependency check settings,init-method, destroy-method and merge settings。\n * fireDefaultsRegistered 就是会掉readerContext中对reader各种事件的监听。\n */\npublic void initDefaults(Element root, @Nullable BeanDefinitionParserDelegate parent) {\n    populateDefaults(this.defaults, (parent != null ? parent.defaults : null), root);\n    this.readerContext.fireDefaultsRegistered(this.defaults);\n}\n\n```\n\n然后，我们再来认识下`ReaderContext`。一般使用的是他的子类`XmlReaderContext`\n\n```java\n/**\n * reading bean definition process(过程) 的 context，封装了所有的相关配置和状态。\n */\npublic class ReaderContext {\n\n    // 源文件\n\tprivate final Resource resource;\n    // 解析过程中如果出现问题，向汇报器汇报\n\tprivate final ProblemReporter problemReporter;\n    // reader过程的监听器，默认实现是 EmptyReaderEventListener 每个方法都是空实现。\n\tprivate final ReaderEventListener eventListener;\n    // 就是上文说的从跟标签 beans 中解析出来的一些属性的默认配置\n    // 如 lazy-init, autowire, dependency check settings,init-method, destroy-method\n\tprivate final SourceExtractor sourceExtractor;\n\n    ...\n\n}\n```\n\n> 在Spring中，像使用`ReaderContext`这种环境类特别多，这种设计模式应该细细品味，好好体会，有时间了还应该专门写一篇日志分析记录一下。\n\n好，到这里，基础工作做好了之后，下面开始真正的解析。\n\n-------------\n\n首先看看解析bean标签的过程。`processBeanDefinition`\n\n```java\nprotected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate) {\n    //1. 解析标签，将标签转换为 BeanDefinition 并用 BeanDefinitionHolder 连同beanName，aliasArray一并封装起来。\n    BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);\n    if (bdHolder != null) {\n        // 2. 还要对子标签下的自定义属性调用decorateBeanDefinitionIfRequired方法进行解析，这回是自定义属性\n        bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);\n        try {\n            // Register the final decorated instance.\n            // 3. 注册\n            BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());\n        }\n        catch (BeanDefinitionStoreException ex) {\n            getReaderContext().error(\"Failed to register bean definition with name '\" +\n                    bdHolder.getBeanName() + \"'\", ele, ex);\n        }\n        // Send registration event.\n        //4. 触发监听器，通知监听器的相关方法\n        getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder));\n    }\n}\n```\n\n第一步：解析标签，完成Element 到 BeanDefinition 的转换。\n\n```java\n/**\n * 该方法 先取出  beanName，看是否已经注册过。有的话，抛出异常。\n * 如果没有，才调用 parseBeanDefinitionElement 真正的去解析node中的每一个元素。\n * 解析完成之后，将 beanDefinition, beanName, aliasesArray 一起封装到 BeanDefinitionHolder中返回。\n */\npublic BeanDefinitionHolder parseBeanDefinitionElement(Element ele, @Nullable BeanDefinition containingBean) {\n    String id = ele.getAttribute(ID_ATTRIBUTE);\n    String nameAttr = ele.getAttribute(NAME_ATTRIBUTE);\n\n    List<String> aliases = new ArrayList<>();\n    if (StringUtils.hasLength(nameAttr)) {\n        String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS);\n        aliases.addAll(Arrays.asList(nameArr));\n    }\n\n    String beanName = id;\n    if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) {\n        beanName = aliases.remove(0);\n        if (logger.isTraceEnabled()) {\n            logger.trace(\"No XML 'id' specified - using '\" + beanName +\n                    \"' as bean name and \" + aliases + \" as aliases\");\n        }\n    }\n\n    if (containingBean == null) {\n        checkNameUniqueness(beanName, aliases, ele);\n    }\n\n    AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean);\n    if (beanDefinition != null) {\n        if (!StringUtils.hasText(beanName)) {\n            try {\n                if (containingBean != null) {\n                    beanName = BeanDefinitionReaderUtils.generateBeanName(\n                            beanDefinition, this.readerContext.getRegistry(), true);\n                }\n                else {\n                    beanName = this.readerContext.generateBeanName(beanDefinition);\n                    // Register an alias for the plain bean class name, if still possible,\n                    // if the generator returned the class name plus a suffix.\n                    // This is expected for Spring 1.2/2.0 backwards compatibility.\n                    String beanClassName = beanDefinition.getBeanClassName();\n                    if (beanClassName != null &&\n                            beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() &&\n                            !this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) {\n                        aliases.add(beanClassName);\n                    }\n                }\n                if (logger.isTraceEnabled()) {\n                    logger.trace(\"Neither XML 'id' nor 'name' specified - \" +\n                            \"using generated bean name [\" + beanName + \"]\");\n                }\n            }\n            catch (Exception ex) {\n                error(ex.getMessage(), ele);\n                return null;\n            }\n        }\n        String[] aliasesArray = StringUtils.toStringArray(aliases);\n        return new BeanDefinitionHolder(beanDefinition, beanName, aliasesArray);\n    }\n\n    return null;\n}\n\n/**\n * 真正的解析Element标签中每一个元素、子标签，并将结果封装到BeanDefinition中\n */\npublic AbstractBeanDefinition parseBeanDefinitionElement(\n        Element ele, String beanName, @Nullable BeanDefinition containingBean) {\n\n    // 这里 使用了一个栈将解析的标签栈也就是当前解析的状态全部都保存了起来。\n    // 比如说，当前解析到哪个标签了，（因为一个bean下面会有很多的子标签），当前是哪个bean\n    this.parseState.push(new BeanEntry(beanName));\n\n    String className = null;\n    if (ele.hasAttribute(CLASS_ATTRIBUTE)) {\n        className = ele.getAttribute(CLASS_ATTRIBUTE).trim();\n    }\n    String parent = null;\n    if (ele.hasAttribute(PARENT_ATTRIBUTE)) {\n        parent = ele.getAttribute(PARENT_ATTRIBUTE);\n    }\n\n    try {\n        AbstractBeanDefinition bd = createBeanDefinition(className, parent);\n\n        parseBeanDefinitionAttributes(ele, beanName, containingBean, bd);\n        bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT));\n\n        parseMetaElements(ele, bd);\n        parseLookupOverrideSubElements(ele, bd.getMethodOverrides());\n        parseReplacedMethodSubElements(ele, bd.getMethodOverrides());\n\n        parseConstructorArgElements(ele, bd);\n        parsePropertyElements(ele, bd);\n        parseQualifierElements(ele, bd);\n\n        bd.setResource(this.readerContext.getResource());\n        bd.setSource(extractSource(ele));\n\n        return bd;\n    }\n    catch (...) {\n        ...\n    }\n    finally {\n        this.parseState.pop();\n    }\n\n    return null;\n}\n```\n\n<br>\n\n第二步，就是根据扫描一下自定义属性什么的，看源码，就是根据命名空间这些，去找相应标签的相应属性有没有被定义等等。\n\n<br>\n\n第三步，注册到Registry，也就是我们的BeanFactory\n\n```java\n// BeanDefinitionReaderUtils\npublic static void registerBeanDefinition(\n        BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)\n        throws BeanDefinitionStoreException {\n\n    // Register bean definition under primary name.\n    String beanName = definitionHolder.getBeanName();\n    // 注册 beanName 和 BeanDefinition\n    registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition());\n\n    // Register aliases for bean name, if any.\n    // 注册 beanName对应的 alias\n    String[] aliases = definitionHolder.getAliases();\n    if (aliases != null) {\n        for (String alias : aliases) {\n            registry.registerAlias(beanName, alias);\n        }\n    }\n}\n\n\n\n@Override\npublic void registerBeanDefinition(String beanName, BeanDefinition beanDefinition)\n        throws BeanDefinitionStoreException {\n\n    ...\n\n    BeanDefinition existingDefinition = this.beanDefinitionMap.get(beanName);\n    if (existingDefinition != null) {\n        // 根据设置 是否允许同名 覆盖，不允许 抛出异常，允许 根据相应规则处理\n    } else {\n        // 如果已经开始创建，使用同步（可能创建开始会有多个线程访问 beanDefinitionMap）\n        if (hasBeanCreationStarted()) {\n            // Cannot modify startup-time collection elements anymore (for stable iteration)\n            synchronized (this.beanDefinitionMap) {\n                this.beanDefinitionMap.put(beanName, beanDefinition);\n                List<String> updatedDefinitions = new ArrayList<>(this.beanDefinitionNames.size() + 1);\n                updatedDefinitions.addAll(this.beanDefinitionNames);\n                updatedDefinitions.add(beanName);\n                this.beanDefinitionNames = updatedDefinitions;\n                if (this.manualSingletonNames.contains(beanName)) {\n                    Set<String> updatedSingletons = new LinkedHashSet<>(this.manualSingletonNames);\n                    updatedSingletons.remove(beanName);\n                    this.manualSingletonNames = updatedSingletons;\n                }\n            }\n        }\n        else {\n            // Still in startup registration phase\n            // 如果还是 startup 阶段，直接更新相应的数据\n            this.beanDefinitionMap.put(beanName, beanDefinition);\n            this.beanDefinitionNames.add(beanName);\n            this.manualSingletonNames.remove(beanName);\n        }\n        this.frozenBeanDefinitionNames = null;\n    }\n\n    if (existingDefinition != null || containsSingleton(beanName)) {\n        resetBeanDefinition(beanName);\n    }\n}\n\n\n// 判断是否开始创建 仅仅是判断 alreadyCreated set是否为空\n// alreadyCreated 在之后的 bean的创建中还会再次接触到，当 bean创建完了之后，会放在该set中保存。\nprotected boolean hasBeanCreationStarted() {\n    return !this.alreadyCreated.isEmpty();\n}\n\n// 之后注册 别名 也比较简单。\n```\n\n到这里为止，根root下的所有bean element都以`BeanDefinition`的形式保存在了`BeanFactory`中。\n\n其他类型的基本标签和这个过程都是类似的，比`bean`标签简单，而且最后都要回归到bean标签。\n\n\n<br>\n\n-------------\n\n## createBean\n\n现在，所有的bean都以`BeanDefinition`的格式保存在`BeanFactory`中。当调用类似`getBean`方法的时候就会实例化该bean。\n\n这是我们的入口：\n\n```java\nStudent myBean = beanFactory.getBean(\"myBean\", Student.class);\n```\n\n到最后都是执行的`AbstractBeanFactory.doCetBean`\n\n```java\nprotected <T> T doGetBean(final String name, @Nullable final Class<T> requiredType,\n        @Nullable final Object[] args, boolean typeCheckOnly) throws BeansException {\n\n    final String beanName = transformedBeanName(name);\n    Object bean;\n\n    // Eagerly check singleton cache for manually registered singletone.\n    // 1. 首先 会从singleton缓存中获取\n    Object sharedInstance = getSingleton(beanName);\n    if (sharedInstance != null && args == null) {\n        if (logger.isTraceEnabled()) {\n            if (isSingletonCurrentlyInCreation(beanName)) {\n                logger.trace(\"Returning eagerly cached instance of singleton bean '\" + beanName +\n                        \"' that is not fully initialized yet - a consequence of a circular reference\");\n            }\n            else {\n                logger.trace(\"Returning cached instance of singleton bean '\" + beanName + \"'\");\n            }\n        }\n        bean = getObjectForBeanInstance(sharedInstance, name, beanName, null);\n    }\n\n    else {\n        // Fail if we're already creating this bean instance:\n        // We're assumably within a circular reference.\n        if (isPrototypeCurrentlyInCreation(beanName)) {\n            throw new BeanCurrentlyInCreationException(beanName);\n        }\n\n        // 2. 如果当前singleton中没有，则看看 parentBeanFactory\n        // Check if bean definition exists in this factory.\n        BeanFactory parentBeanFactory = getParentBeanFactory();\n        if (parentBeanFactory != null && !containsBeanDefinition(beanName)) {\n            // Not found -> check parent.\n            String nameToLookup = originalBeanName(name);\n            if (parentBeanFactory instanceof AbstractBeanFactory) {\n                return ((AbstractBeanFactory) parentBeanFactory).doGetBean(\n                        nameToLookup, requiredType, args, typeCheckOnly);\n            }\n            else if (args != null) {\n                // Delegation to parent with explicit args.\n                return (T) parentBeanFactory.getBean(nameToLookup, args);\n            }\n            else if (requiredType != null) {\n                // No args -> delegate to standard getBean method.\n                return parentBeanFactory.getBean(nameToLookup, requiredType);\n            }\n            else {\n                return (T) parentBeanFactory.getBean(nameToLookup);\n            }\n        }\n\n        // 3. 如果还没有，如果本次操作不是 仅仅判断类型 则由当前的beanFactory完成创建该bean。\n        if (!typeCheckOnly) {\n            markBeanAsCreated(beanName);\n        }\n\n        try {\n            // 3.1 merge BeanDefinition\n            final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);\n            checkMergedBeanDefinition(mbd, beanName, args);\n\n            // 3.2 创建依赖\n            // Guarantee initialization of beans that the current bean depends on.\n            String[] dependsOn = mbd.getDependsOn();\n            if (dependsOn != null) {\n                for (String dep : dependsOn) {\n                    if (isDependent(beanName, dep)) {\n                        throw new BeanCreationException(mbd.getResourceDescription(), beanName,\n                                \"Circular depends-on relationship between '\" + beanName + \"' and '\" + dep + \"'\");\n                    }\n                    registerDependentBean(dep, beanName);\n                    try {\n                        getBean(dep);\n                    }\n                    catch (NoSuchBeanDefinitionException ex) {\n                        throw new BeanCreationException(mbd.getResourceDescription(), beanName,\n                                \"'\" + beanName + \"' depends on missing bean '\" + dep + \"'\", ex);\n                    }\n                }\n            }\n\n            // Create bean instance.\n            // 3.3 根据不同的 Scope 创建不同的Bean\n            if (mbd.isSingleton()) {\n                sharedInstance = getSingleton(beanName, () -> {\n                    try {\n                        return createBean(beanName, mbd, args);\n                    }\n                    catch (BeansException ex) {\n                        // Explicitly remove instance from singleton cache: It might have been put there\n                        // eagerly by the creation process, to allow for circular reference resolution.\n                        // Also remove any beans that received a temporary reference to the bean.\n                        destroySingleton(beanName);\n                        throw ex;\n                    }\n                });\n                bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);\n            }\n\n            else if (mbd.isPrototype()) {\n                // It's a prototype -> create a new instance.\n                Object prototypeInstance = null;\n                try {\n                    beforePrototypeCreation(beanName);\n                    prototypeInstance = createBean(beanName, mbd, args);\n                }\n                finally {\n                    afterPrototypeCreation(beanName);\n                }\n                bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);\n            }\n\n            else {\n                String scopeName = mbd.getScope();\n                final Scope scope = this.scopes.get(scopeName);\n                if (scope == null) {\n                    throw new IllegalStateException(\"No Scope registered for scope name '\" + scopeName + \"'\");\n                }\n                try {\n                    Object scopedInstance = scope.get(beanName, () -> {\n                        beforePrototypeCreation(beanName);\n                        try {\n                            return createBean(beanName, mbd, args);\n                        }\n                        finally {\n                            afterPrototypeCreation(beanName);\n                        }\n                    });\n                    bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);\n                }\n                catch (IllegalStateException ex) {\n                    throw new BeanCreationException(beanName,\n                            \"Scope '\" + scopeName + \"' is not active for the current thread; consider \" +\n                            \"defining a scoped proxy for this bean if you intend to refer to it from a singleton\",\n                            ex);\n                }\n            }\n        }\n        catch (BeansException ex) {\n            cleanupAfterBeanCreationFailure(beanName);\n            throw ex;\n        }\n    }\n\n    // Check if required type matches the type of the actual bean instance.\n    if (requiredType != null && !requiredType.isInstance(bean)) {\n        try {\n            T convertedBean = getTypeConverter().convertIfNecessary(bean, requiredType);\n            if (convertedBean == null) {\n                throw new BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());\n            }\n            return convertedBean;\n        }\n        catch (TypeMismatchException ex) {\n            if (logger.isTraceEnabled()) {\n                logger.trace(\"Failed to convert bean '\" + name + \"' to required type '\" +\n                        ClassUtils.getQualifiedName(requiredType) + \"'\", ex);\n            }\n            throw new BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());\n        }\n    }\n    return (T) bean;\n}\n\n```\n\n**整个getBean的流程都包含在上面的函数中，总体应该分为两大类来讨论，一个是`singleton`，一个是普通类`Prototype`**\n\n<br>\n\n------------\n\n### Prototype 类型的实例化\n\n首先，分析普通类型的实例化。 每次`getBean` 都需要 调用`createBean`,整个逻辑也比较简单。\n\n在之前，先了解一下整个过程涉及到的几个变量。他们都在`AbstractBeanFactory`\n\n```java\npublic abstract class AbstractBeanFactory extends FactoryBeanRegistrySupport implements ConfigurableBeanFactory {\n\n\t/** Map from bean name to merged RootBeanDefinition. */\n\tprivate final Map<String, RootBeanDefinition> mergedBeanDefinitions = new ConcurrentHashMap<>(256);\n\n\t/** Names of beans that have already been created at least once. */\n\tprivate final Set<String> alreadyCreated = Collections.newSetFromMap(new ConcurrentHashMap<>(256));\n\n\t/** Names of beans that are currently in creation. */\n\tprivate final ThreadLocal<Object> prototypesCurrentlyInCreation =\n\t\t\tnew NamedThreadLocal<>(\"Prototype beans currently in creation\");\n\n\n    /**\n\t * Mark the specified bean as already created (or about to be created).\n\t * <p>This allows the bean factory to optimize its caching for repeated\n\t * creation of the specified bean.\n\t * @param beanName the name of the bean\n\t */\n    protected void markBeanAsCreated(String beanName) {\n\t\tif (!this.alreadyCreated.contains(beanName)) {\n\t\t\tsynchronized (this.mergedBeanDefinitions) {\n\t\t\t\tif (!this.alreadyCreated.contains(beanName)) {\n\t\t\t\t\t// Let the bean definition get re-merged now that we're actually creating\n\t\t\t\t\t// the bean... just in case some of its metadata changed in the meantime.\n\t\t\t\t\tclearMergedBeanDefinition(beanName);\n\t\t\t\t\tthis.alreadyCreated.add(beanName);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected boolean hasBeanCreationStarted() {\n\t\treturn !this.alreadyCreated.isEmpty();\n\t}\n\n\n\t/**\n\t * Return whether the specified prototype bean is currently in creation\n\t * (within the current thread).\n\t * @param beanName the name of the bean\n\t */\n\tprotected boolean isPrototypeCurrentlyInCreation(String beanName) {\n\t\tObject curVal = this.prototypesCurrentlyInCreation.get();\n\t\treturn (curVal != null &&\n\t\t\t\t(curVal.equals(beanName) || (curVal instanceof Set && ((Set<?>) curVal).contains(beanName))));\n\t}\n\n\t/**\n\t * Callback before prototype creation.\n\t * <p>The default implementation register the prototype as currently in creation.\n\t * @param beanName the name of the prototype about to be created\n\t * @see #isPrototypeCurrentlyInCreation\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tprotected void beforePrototypeCreation(String beanName) {\n\t\tObject curVal = this.prototypesCurrentlyInCreation.get();\n\t\tif (curVal == null) {\n\t\t\tthis.prototypesCurrentlyInCreation.set(beanName);\n\t\t}\n\t\telse if (curVal instanceof String) {\n\t\t\tSet<String> beanNameSet = new HashSet<>(2);\n\t\t\tbeanNameSet.add((String) curVal);\n\t\t\tbeanNameSet.add(beanName);\n\t\t\tthis.prototypesCurrentlyInCreation.set(beanNameSet);\n\t\t}\n\t\telse {\n\t\t\tSet<String> beanNameSet = (Set<String>) curVal;\n\t\t\tbeanNameSet.add(beanName);\n\t\t}\n\t}\n\n\t/**\n\t * Callback after prototype creation.\n\t * <p>The default implementation marks the prototype as not in creation anymore.\n\t * @param beanName the name of the prototype that has been created\n\t * @see #isPrototypeCurrentlyInCreation\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tprotected void afterPrototypeCreation(String beanName) {\n\t\tObject curVal = this.prototypesCurrentlyInCreation.get();\n\t\tif (curVal instanceof String) {\n\t\t\tthis.prototypesCurrentlyInCreation.remove();\n\t\t}\n\t\telse if (curVal instanceof Set) {\n\t\t\tSet<String> beanNameSet = (Set<String>) curVal;\n\t\t\tbeanNameSet.remove(beanName);\n\t\t\tif (beanNameSet.isEmpty()) {\n\t\t\t\tthis.prototypesCurrentlyInCreation.remove();\n\t\t\t}\n\t\t}\n\t}\n\n\n}\n```\n\n- `mergedBeanDefinitions` 每个bean在创建之前都需要将普通的`BeanDefinition`转换为`RootBeanDefinition`也就是该成员变量中存储的对象。 而且，他也作为创建对象过程中的同步锁，\n- `alreadyCreated` 每个第一次创建的对象的 beanName都会被保存到该成员变量中。也是用来标志创建过程是否开始，某个bean是否开始创建\n- `prototypesCurrentlyInCreation` 主要是针对`Prototype`（普通）类型的bean。因为可能被同时多个线程创建，所以保存在ThreadLocal`中.    \n<br>\n\n下面我们看 整个bean的创建过程：\n\n第一步，检测是否仅仅是来检查类型的，如果不是，那就是来创建对象的，就将该对象标记被在创建中。`markAsCreated()`代码上面已经给出了。\n\n第二步，`getMergedLocalBeanDefinition`。整个merge的过程就是将 父BeanDefinition合并到子BeanDefinition中。整个过程的细节以及几个BeanDefinition关系可以查看[bean的parent属性详解和获取RootBeanDefinition](https://blog.csdn.net/disiwei1012/article/details/77142167)。该步骤会设置默认scope为singleton\n\n\n```java\nprotected RootBeanDefinition getMergedLocalBeanDefinition(String beanName) throws BeansException {\n    // Quick check on the concurrent map first, with minimal locking.\n    RootBeanDefinition mbd = this.mergedBeanDefinitions.get(beanName);\n    if (mbd != null) {\n        return mbd;\n    }\n    return getMergedBeanDefinition(beanName, getBeanDefinition(beanName), null);\n}\n\n\nprotected RootBeanDefinition getMergedBeanDefinition(\n        String beanName, BeanDefinition bd, @Nullable BeanDefinition containingBd)\n        throws BeanDefinitionStoreException{\n\n    synchronized (this.mergedBeanDefinitions) {\n        RootBeanDefinition mbd = null;\n\n        // Check with full lock now in order to enforce the same merged instance.\n        if (containingBd == null) {\n            mbd = this.mergedBeanDefinitions.get(beanName);\n        }\n\n        if (mbd == null) {\n            if (bd.getParentName() == null) {\n                // Use copy of given root bean definition.\n                if (bd instanceof RootBeanDefinition) {\n                    mbd = ((RootBeanDefinition) bd).cloneBeanDefinition();\n                }\n                else {\n                    mbd = new RootBeanDefinition(bd);\n                }\n            }\n            else {\n                // Child bean definition: needs to be merged with parent.\n                BeanDefinition pbd;\n                try {\n                    String parentBeanName = transformedBeanName(bd.getParentName());\n                    if (!beanName.equals(parentBeanName)) {\n                        pbd = getMergedBeanDefinition(parentBeanName);\n                    }\n                    else {\n                        BeanFactory parent = getParentBeanFactory();\n                        if (parent instanceof ConfigurableBeanFactory) {\n                            pbd = ((ConfigurableBeanFactory) parent).getMergedBeanDefinition(parentBeanName);\n                        }\n                        else {\n                            throw new NoSuchBeanDefinitionException(parentBeanName,\n                                    \"Parent name '\" + parentBeanName + \"' is equal to bean name '\" + beanName +\n                                    \"': cannot be resolved without an AbstractBeanFactory parent\");\n                        }\n                    }\n                }\n                catch (NoSuchBeanDefinitionException ex) {\n                    throw new BeanDefinitionStoreException(bd.getResourceDescription(), beanName,\n                            \"Could not resolve parent bean definition '\" + bd.getParentName() + \"'\", ex);\n                }\n                // Deep copy with overridden values.\n                mbd = new RootBeanDefinition(pbd);\n                mbd.overrideFrom(bd);\n            }\n\n            // Set default singleton scope, if not configured before.\n            // 设置默认的scope -- singleton\n            if (!StringUtils.hasLength(mbd.getScope())) {\n                mbd.setScope(RootBeanDefinition.SCOPE_SINGLETON);\n            }\n\n            // A bean contained in a non-singleton bean cannot be a singleton itself.\n            // Let's correct this on the fly here, since this might be the result of\n            // parent-child merging for the outer bean, in which case the original inner bean\n            // definition will not have inherited the merged outer bean's singleton status.\n            if (containingBd != null && !containingBd.isSingleton() && mbd.isSingleton()) {\n                mbd.setScope(containingBd.getScope());\n            }\n\n            // Cache the merged bean definition for the time being\n            // (it might still get re-merged later on in order to pick up metadata changes)\n            if (containingBd == null && isCacheBeanMetadata()) {\n                this.mergedBeanDefinitions.put(beanName, mbd);\n            }\n        }\n\n        return mbd;\n    }\n}\n\n```\n\n第三步，获取依赖。就是检测BeanDefinition中dependOn属性，get所有dependOn的bean。\n\n第四步，创建实例。\n\n第五步，调用`getObjectForBeanInstance`，获取真正的实例对象。\n\n```java\nprotected Object getObjectForBeanInstance(\n        Object beanInstance, String name, String beanName, @Nullable RootBeanDefinition mbd) {\n\n    // 判空\n    // Don't let calling code try to dereference the factory if the bean isn't a factory.\n    if (BeanFactoryUtils.isFactoryDereference(name)) {\n        if (beanInstance instanceof NullBean) {\n            return beanInstance;\n        }\n        if (!(beanInstance instanceof FactoryBean)) {\n            throw new BeanIsNotAFactoryException(transformedBeanName(name), beanInstance.getClass());\n        }\n    }\n\n    // Now we have the bean instance, which may be a normal bean or a FactoryBean.\n    // If it's a FactoryBean, we use it to create a bean instance, unless the\n    // caller actually wants a reference to the factory.\n    // 这时已经持有了对象，如果不是FactoryBean 直接返回，如果用户想获取的就是FactoryBean 也直接返回\n    if (!(beanInstance instanceof FactoryBean) || BeanFactoryUtils.isFactoryDereference(name)) {\n        return beanInstance;\n    }\n\n    // 说明这是一个FactoryBean，并且想获取其中的bean\n    Object object = null;\n    if (mbd == null) {\n        object = getCachedObjectForFactoryBean(beanName);\n    }\n    if (object == null) {\n        // Return bean instance from factory.\n        FactoryBean<?> factory = (FactoryBean<?>) beanInstance;\n        // Caches object obtained from FactoryBean if it is a singleton.\n        if (mbd == null && containsBeanDefinition(beanName)) {\n            mbd = getMergedLocalBeanDefinition(beanName);\n        }\n        boolean synthetic = (mbd != null && mbd.isSynthetic());\n        object = getObjectFromFactoryBean(factory, beanName, !synthetic);\n    }\n    return object;\n}\n\n```\n\n<br>\n\n------------\n\n### Singleton 类型的实例化\n\n用来操作Singleton相关实例的类是`DefaultSingletonBeanRegistry`，首先，先来好好了解下该类。\n\n```java\npublic class DefaultSingletonBeanRegistry extends SimpleAliasRegistry implements SingletonBeanRegistry {\n\n\t/** Cache of singleton objects: bean name to bean instance. */\n    // 也作为一些需要同步操作的锁\n\tprivate final Map<String, Object> singletonObjects = new ConcurrentHashMap<>(256);\n\n\t/** Cache of singleton factories: bean name to ObjectFactory. */\n\tprivate final Map<String, ObjectFactory<?>> singletonFactories = new HashMap<>(16);\n\n\t/** Cache of early singleton objects: bean name to bean instance. */\n\tprivate final Map<String, Object> earlySingletonObjects = new HashMap<>(16);\n\n\t/** Set of registered singletons, containing the bean names in registration order. */\n    // 用来判断 singleton 是否存在的依据\n\tprivate final Set<String> registeredSingletons = new LinkedHashSet<>(256);\n\n    // ---------------对singleton、singletonFactory的添加删除等操作，都是操作的以上变量-------------------\n\n\t/** Names of beans that are currently in creation. */\n\tprivate final Set<String> singletonsCurrentlyInCreation =\n\t\t\tCollections.newSetFromMap(new ConcurrentHashMap<>(16));\n\n\t/** Flag that indicates whether we're currently within destroySingletons. */\n\tprivate boolean singletonsCurrentlyInDestruction = false;\n\n\t/** Disposable bean instances: bean name to disposable instance. */\n    /*\n     registering its DisposableBean interface and/or the given destroy method to be called on factory shutdown\n     singleton 如果需要在销毁时执行某些操作，可以在创建好对象之后，将singleton放入该collection中。\n     在该collection中的singleton在BeanFactroy销毁的时候会执行 他的 destroy method 或者 DisposableBean接口的回调方法\n    */\n\tprivate final Map<String, Object> disposableBeans = new LinkedHashMap<>();\n\n    ...\n    // 还有其他变量，没有列全\n\n\n\t@Override\n\tpublic void registerSingleton(String beanName, Object singletonObject) throws IllegalStateException {\n\t\tsynchronized (this.singletonObjects) {\n\t\t\tObject oldObject = this.singletonObjects.get(beanName);\n\t\t\tif (oldObject != null) {\n\t\t\t\tthrow new IllegalStateException(\"Could not register object [\" + singletonObject +\n\t\t\t\t\t\t\"] under bean name '\" + beanName + \"': there is already object [\" + oldObject + \"] bound\");\n\t\t\t}\n\t\t\taddSingleton(beanName, singletonObject);\n\t\t}\n\t}\n\n\t/**\n\t * Add the given singleton object to the singleton cache of this factory.\n\t * <p>To be called for eager registration of singletons.\n\t * @param beanName the name of the bean\n\t * @param singletonObject the singleton object\n\t */\n\tprotected void addSingleton(String beanName, Object singletonObject) {\n        // 说明我们已经创建出来了对象\n        /*\n         添加到singletonObjects中\n         从singletonFactories删除\n         从earlySingletonObjects删除\n         添加到registerSingletons，表示 已注册，下次判断的时候 就返回true了\n        */\n\t\tsynchronized (this.singletonObjects) {\n\t\t\tthis.singletonObjects.put(beanName, singletonObject);\n\t\t\tthis.singletonFactories.remove(beanName);\n\t\t\tthis.earlySingletonObjects.remove(beanName);\n\t\t\tthis.registeredSingletons.add(beanName);\n\t\t}\n\t}\n\n\t/**\n\t * Add the given singleton factory for building the specified singleton\n\t * if necessary.\n\t * <p>To be called for eager registration of singletons, e.g. to be able to\n\t * resolve circular references.\n\t * @param beanName the name of the bean\n\t * @param singletonFactory the factory for the singleton object\n\t */\n\tprotected void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory) {\n\t\tAssert.notNull(singletonFactory, \"Singleton factory must not be null\");\n\t\tsynchronized (this.singletonObjects) {\n\t\t\tif (!this.singletonObjects.containsKey(beanName)) {\n\t\t\t\tthis.singletonFactories.put(beanName, singletonFactory);\n\t\t\t\tthis.earlySingletonObjects.remove(beanName);\n\t\t\t\tthis.registeredSingletons.add(beanName);\n\t\t\t}\n\t\t}\n\t}\n\n\t@Override\n\t@Nullable\n\tpublic Object getSingleton(String beanName) {\n\t\treturn getSingleton(beanName, true);\n\t}\n\n\t/**\n\t * Return the (raw) singleton object registered under the given name.\n\t * <p>Checks already instantiated singletons and also allows for an early\n\t * reference to a currently created singleton (resolving a circular reference).\n\t * @param beanName the name of the bean to look for\n\t * @param allowEarlyReference whether early references should be created or not\n\t * @return the registered singleton object, or {@code null} if none found\n\t */\n\t@Nullable\n\tprotected Object getSingleton(String beanName, boolean allowEarlyReference) {\n        // 先从 singltonObjects 中获取，看是否已经存在真正实例化好的对象\n\t\tObject singletonObject = this.singletonObjects.get(beanName);\n\t\tif (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {\n\t\t\tsynchronized (this.singletonObjects) {\n                // 在从early中取\n\t\t\t\tsingletonObject = this.earlySingletonObjects.get(beanName);\n\t\t\t\tif (singletonObject == null && allowEarlyReference) {\n                    // 再从singleFactory中取\n\t\t\t\t\tObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName);\n\t\t\t\t\tif (singletonFactory != null) {\n\t\t\t\t\t\tsingletonObject = singletonFactory.getObject();\n\t\t\t\t\t\tthis.earlySingletonObjects.put(beanName, singletonObject);\n\t\t\t\t\t\tthis.singletonFactories.remove(beanName);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn singletonObject;\n\t}\n\n\tprotected void removeSingleton(String beanName) {\n\t\tsynchronized (this.singletonObjects) {\n\t\t\tthis.singletonObjects.remove(beanName);\n\t\t\tthis.singletonFactories.remove(beanName);\n\t\t\tthis.earlySingletonObjects.remove(beanName);\n\t\t\tthis.registeredSingletons.remove(beanName);\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean containsSingleton(String beanName) {\n\t\treturn this.singletonObjects.containsKey(beanName);\n\t}\n\n\n\tpublic boolean isSingletonCurrentlyInCreation(String beanName) {\n\t\treturn this.singletonsCurrentlyInCreation.contains(beanName);\n\t}\n\n\t/**\n\t * Callback before singleton creation.\n\t */\n\tprotected void beforeSingletonCreation(String beanName) {\n\t\tif (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.add(beanName)) {\n\t\t\tthrow new BeanCurrentlyInCreationException(beanName);\n\t\t}\n\t}\n\n\t/**\n\t * Callback after singleton creation.\n\t */\n\tprotected void afterSingletonCreation(String beanName) {\n\t\tif (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.remove(beanName)) {\n\t\t\tthrow new IllegalStateException(\"Singleton '\" + beanName + \"' isn't currently in creation\");\n\t\t}\n\t}\n\n\tpublic void registerDisposableBean(String beanName, DisposableBean bean) {\n\t\tsynchronized (this.disposableBeans) {\n\t\t\tthis.disposableBeans.put(beanName, bean);\n\t\t}\n\t}\n\n\n\tpublic void destroySingletons() {\n\t\tif (logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"Destroying singletons in \" + this);\n\t\t}\n\t\tsynchronized (this.singletonObjects) {\n\t\t\tthis.singletonsCurrentlyInDestruction = true;\n\t\t}\n\n\t\tString[] disposableBeanNames;\n\t\tsynchronized (this.disposableBeans) {\n\t\t\tdisposableBeanNames = StringUtils.toStringArray(this.disposableBeans.keySet());\n\t\t}\n\t\tfor (int i = disposableBeanNames.length - 1; i >= 0; i--) {\n\t\t\tdestroySingleton(disposableBeanNames[i]);\n\t\t}\n\n\t\tthis.containedBeanMap.clear();\n\t\tthis.dependentBeanMap.clear();\n\t\tthis.dependenciesForBeanMap.clear();\n\n\t\tclearSingletonCache();\n\t}\n\n```\n\n第一步，查看之前解析过没有。不管是之前放到early，singletonFactories中 都可以获取到。剩下的和Prototype基本差不多。\n\n第二步，从parent BeanFactory获取。\n\n第三步，标记创建中\n\n第四步，mergeBeanDefinition\n\n第五步，createBeanInstance\n\n除了createBean之外，还有一些singletonBean的特殊操作。\n\n\n```java\npublic Object getSingleton(String beanName, ObjectFactory<?> singletonFactory) {\n    Assert.notNull(beanName, \"Bean name must not be null\");\n    synchronized (this.singletonObjects) {\n        Object singletonObject = this.singletonObjects.get(beanName);\n        if (singletonObject == null) {\n            if (this.singletonsCurrentlyInDestruction) {\n                throw new BeanCreationNotAllowedException(beanName,\n                        \"Singleton bean creation not allowed while singletons of this factory are in destruction \" +\n                        \"(Do not request a bean from a BeanFactory in a destroy method implementation!)\");\n            }\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"Creating shared instance of singleton bean '\" + beanName + \"'\");\n            }\n            // 先回调 beforeCreate \n            beforeSingletonCreation(beanName);\n            boolean newSingleton = false;\n            boolean recordSuppressedExceptions = (this.suppressedExceptions == null);\n            if (recordSuppressedExceptions) {\n                this.suppressedExceptions = new LinkedHashSet<>();\n            }\n            try {\n                // getObject 工厂方法 其实就是 createBean 方法\n                singletonObject = singletonFactory.getObject();\n                newSingleton = true;\n            }\n            catch (IllegalStateException ex) {\n                // Has the singleton object implicitly appeared in the meantime ->\n                // if yes, proceed with it since the exception indicates that state.\n                singletonObject = this.singletonObjects.get(beanName);\n                if (singletonObject == null) {\n                    throw ex;\n                }\n            }\n            catch (BeanCreationException ex) {\n                if (recordSuppressedExceptions) {\n                    for (Exception suppressedException : this.suppressedExceptions) {\n                        ex.addRelatedCause(suppressedException);\n                    }\n                }\n                throw ex;\n            }\n            finally {\n                if (recordSuppressedExceptions) {\n                    this.suppressedExceptions = null;\n                }\n                // 创建完成 回调 afterCreate\n                afterSingletonCreation(beanName);\n            }\n            if (newSingleton) {\n                // 最后添加到 cache中\n                addSingleton(beanName, singletonObject);\n            }\n        }\n        return singletonObject;\n    }\n}\n\n\n```\n\n第六步，调用`getObjectForBeanInstance`，获取真正的实例对象。\n\n<br>\n\n-------------\n\n### doCreateBean\n\n整个创建bean的过程 大致如下：\n\n1. 给 `InstantiationAwareBeanPostProcessor` 接口最后的机会，在实例化之前修改bean。\n2. 进入 doCreateBean\n3. 创建对象实例\n4. 给`MergedBeanDefinitionPostProcessor`接口修改 `RootBeanDefinition`的机会\n5. 应用 BeanDefinition 中的 property\n    1. 如果存在，回调接口 InstantiationAwareBeanPostProcessor 的方法 postProcessAfterInstantiation\n    2. 将PropertyValue中的 beanName beanClass 替换为 对应的 bean 实例\n    3. 如果存在，调用 接口 InstantiationAwareBeanPostProcessor 的方法 postProcessPropertyValues 对PropertyValues 应用修改\n    4. 最后将 PropertyValues 赋值给 bean 实例对象\n6. 调用初始化方法\n    1. 如果该bean 实现了 aware 接口，则调用相应aware 接口的set方法\n    2. BeanPostProcessor.postProcessBeforeInitialization\n    3. 如果实现了接口InitializingBean，则回调 afterPropertySet 方法\n    4. 调用 init 方法\n    5. BeanPostProcessor.postProcessAfterInitialization\n\n<br>\n\n`doCreateBean`\n\n```java\nprotected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final @Nullable Object[] args)\n        throws BeanCreationException {\n\n    // Instantiate the bean.\n    BeanWrapper instanceWrapper = null;\n    if (mbd.isSingleton()) {\n        instanceWrapper = this.factoryBeanInstanceCache.remove(beanName);\n    }\n    if (instanceWrapper == null) {\n        //1. 根据不用的策略创建实例对象，如果没有指定策略，调用默认无参构造函数。\n        // 另外 还向 wrapper中放入了 ConvertService CustomEditor 等对象，暂时不知道这是干嘛的。\n        instanceWrapper = createBeanInstance(beanName, mbd, args);\n    }\n    final Object bean = instanceWrapper.getWrappedInstance();\n    Class<?> beanType = instanceWrapper.getWrappedClass();\n    if (beanType != NullBean.class) {\n        mbd.resolvedTargetType = beanType;\n    }\n\n    // Allow post-processors to modify the merged bean definition.\n    synchronized (mbd.postProcessingLock) {\n        if (!mbd.postProcessed) {\n            try {\n                // 2. 给 MergedBeanDefinitionPostProcessor 接口 机会修改 RootBeanDefinition\n                applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);\n            }\n            catch (Throwable ex) {\n                throw new BeanCreationException(mbd.getResourceDescription(), beanName,\n                        \"Post-processing of merged bean definition failed\", ex);\n            }\n            mbd.postProcessed = true;\n        }\n    }\n\n    // Eagerly cache singletons to be able to resolve circular references\n    // even when triggered by lifecycle interfaces like BeanFactoryAware.\n    boolean earlySingletonExposure = (mbd.isSingleton() && this.allowCircularReferences &&\n            isSingletonCurrentlyInCreation(beanName));\n    if (earlySingletonExposure) {\n        if (logger.isTraceEnabled()) {\n            logger.trace(\"Eagerly caching bean '\" + beanName +\n                    \"' to allow for resolving potential circular references\");\n        }\n        addSingletonFactory(beanName, () -> getEarlyBeanReference(beanName, mbd, bean));\n    }\n\n    // Initialize the bean instance.\n    Object exposedObject = bean;\n    try {\n        // 应用 BeanDefinition 中的 property \n        populateBean(beanName, mbd, instanceWrapper);\n        // 调用初始化方法\n        exposedObject = initializeBean(beanName, exposedObject, mbd);\n    }\n    catch (Throwable ex) {\n        if (ex instanceof BeanCreationException && beanName.equals(((BeanCreationException) ex).getBeanName())) {\n            throw (BeanCreationException) ex;\n        }\n        else {\n            throw new BeanCreationException(\n                    mbd.getResourceDescription(), beanName, \"Initialization of bean failed\", ex);\n        }\n    }\n\n    if (earlySingletonExposure) {\n        Object earlySingletonReference = getSingleton(beanName, false);\n        if (earlySingletonReference != null) {\n            if (exposedObject == bean) {\n                exposedObject = earlySingletonReference;\n            }\n            else if (!this.allowRawInjectionDespiteWrapping && hasDependentBean(beanName)) {\n                String[] dependentBeans = getDependentBeans(beanName);\n                Set<String> actualDependentBeans = new LinkedHashSet<>(dependentBeans.length);\n                for (String dependentBean : dependentBeans) {\n                    if (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) {\n                        actualDependentBeans.add(dependentBean);\n                    }\n                }\n                if (!actualDependentBeans.isEmpty()) {\n                    throw new BeanCurrentlyInCreationException(beanName,\n                            \"Bean with name '\" + beanName + \"' has been injected into other beans [\" +\n                            StringUtils.collectionToCommaDelimitedString(actualDependentBeans) +\n                            \"] in its raw version as part of a circular reference, but has eventually been \" +\n                            \"wrapped. This means that said other beans do not use the final version of the \" +\n                            \"bean. This is often the result of over-eager type matching - consider using \" +\n                            \"'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example.\");\n                }\n            }\n        }\n    }\n\n    // Register bean as disposable.\n    try {\n        // 如果需要在 BeanFactory destory 的时候 回调 destory 方法 则 注册\n        registerDisposableBeanIfNecessary(beanName, bean, mbd);\n    }\n    catch (BeanDefinitionValidationException ex) {\n        throw new BeanCreationException(\n                mbd.getResourceDescription(), beanName, \"Invalid destruction signature\", ex);\n    }\n\n    return exposedObject;\n}\n\n```\n\n<br>\n\n`populateBean`\n\n```java\nprotected void populateBean(String beanName, RootBeanDefinition mbd, @Nullable BeanWrapper bw) {\n\n    ...\n\n    // 回调接口 InstantiationAwareBeanPostProcessor 的方法 postProcessAfterInstantiation\n    // 如果发生了 修改 这里就直接返回 ，不会再给 bean 设置 BeanDefinition 中的 property\n    if (!mbd.isSynthetic() && hasInstantiationAwareBeanPostProcessors()) {\n        for (BeanPostProcessor bp : getBeanPostProcessors()) {\n            if (bp instanceof InstantiationAwareBeanPostProcessor) {\n                InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;\n                if (!ibp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) {\n                    continueWithPropertyPopulation = false;\n                    break;\n                }\n            }\n        }\n    }\n\n    if (!continueWithPropertyPopulation) {\n        return;\n    }\n\n    // 获取 property\n    PropertyValues pvs = (mbd.hasPropertyValues() ? mbd.getPropertyValues() : null);\n\n    // 如果 property 中的 value 是 beanClass 或者 beanName，则需要先getBean，得到该bean实例，替换value中的 beanName 或 beanClass\n    if (mbd.getResolvedAutowireMode() == AUTOWIRE_BY_NAME || mbd.getResolvedAutowireMode() == AUTOWIRE_BY_TYPE) {\n        MutablePropertyValues newPvs = new MutablePropertyValues(pvs);\n        // Add property values based on autowire by name if applicable.\n        if (mbd.getResolvedAutowireMode() == AUTOWIRE_BY_NAME) {\n            autowireByName(beanName, mbd, bw, newPvs);\n        }\n        // Add property values based on autowire by type if applicable.\n        if (mbd.getResolvedAutowireMode() == AUTOWIRE_BY_TYPE) {\n            autowireByType(beanName, mbd, bw, newPvs);\n        }\n        pvs = newPvs;\n    }\n\n    boolean hasInstAwareBpps = hasInstantiationAwareBeanPostProcessors();\n    boolean needsDepCheck = (mbd.getDependencyCheck() != AbstractBeanDefinition.DEPENDENCY_CHECK_NONE);\n\n\n    // 调用 接口 InstantiationAwareBeanPostProcessor 的方法 postProcessPropertyValues 对PropertyValues 应用修改\n    PropertyDescriptor[] filteredPds = null;\n    if (hasInstAwareBpps) {\n        if (pvs == null) {\n            pvs = mbd.getPropertyValues();\n        }\n        for (BeanPostProcessor bp : getBeanPostProcessors()) {\n            if (bp instanceof InstantiationAwareBeanPostProcessor) {\n                InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;\n                PropertyValues pvsToUse = ibp.postProcessProperties(pvs, bw.getWrappedInstance(), beanName);\n                if (pvsToUse == null) {\n                    if (filteredPds == null) {\n                        filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);\n                    }\n                    pvsToUse = ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName);\n                    if (pvsToUse == null) {\n                        return;\n                    }\n                }\n                pvs = pvsToUse;\n            }\n        }\n    }\n    if (needsDepCheck) {\n        if (filteredPds == null) {\n            filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);\n        }\n        checkDependencies(beanName, mbd, filteredPds, pvs);\n    }\n\n    // 最后将 PropertyValues  赋值给 bean 实例\n    if (pvs != null) {\n        applyPropertyValues(beanName, mbd, bw, pvs);\n    }\n\n}\n\n```\n\n<br>\n\n`initializeBean`\n\n```java\nprotected Object initializeBean(final String beanName, final Object bean, @Nullable RootBeanDefinition mbd) {\n    if (System.getSecurityManager() != null) {\n        AccessController.doPrivileged((PrivilegedAction<Object>) () -> {\n            invokeAwareMethods(beanName, bean);\n            return null;\n        }, getAccessControlContext());\n    }\n    else {\n        // 如果该bean 实现了 aware 接口，则调用相应aware 接口的set方法\n        invokeAwareMethods(beanName, bean);\n    }\n\n    Object wrappedBean = bean;\n    if (mbd == null || !mbd.isSynthetic()) {\n        // BeanPostProcessor.postProcessBeforeInitialization\n        wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);\n    }\n\n    try {\n        // 如果实现了接口InitializingBean，则回调 afterPropertySet 方法\n        // 调用init 方法\n        invokeInitMethods(beanName, wrappedBean, mbd);\n    }\n    catch (Throwable ex) {\n        throw new BeanCreationException(\n                (mbd != null ? mbd.getResourceDescription() : null),\n                beanName, \"Invocation of init method failed\", ex);\n    }\n    if (mbd == null || !mbd.isSynthetic()) {\n        // BeanPostProcessor.postProcessAfterInitialization\n        wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);\n    }\n\n    return wrappedBean;\n}\n\n```\n\n\n<br>\n\n其他的 doCreateBean 很多代码都没有分析，是这些代码主要在做一些 singleton 循环引用的处理。\n","slug":"beandefination和createbean","published":1,"date":"2019-02-14T09:54:36.165Z","updated":"2019-02-14T09:57:35.620Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjt9ymryp000tlf6vqwpmp8w3","content":"<h1 id=\"BeanDefinition-amp-createBean\"><a href=\"#BeanDefinition-amp-createBean\" class=\"headerlink\" title=\"BeanDefinition &amp; createBean\"></a>BeanDefinition &amp; createBean</h1><p>分析Bean在spring中解析后的定义BeanDefinition，以及createBean的过程</p>\n<p><br></p>\n<ul>\n<li><a href=\"#beandefinition--createbean\">BeanDefinition &amp; createBean</a><ul>\n<li><a href=\"#beandefinition\">BeanDefinition</a></li>\n<li><a href=\"#createbean\">createBean</a><ul>\n<li><a href=\"#prototype-类型的实例化\">Prototype 类型的实例化</a></li>\n<li><a href=\"#singleton-类型的实例化\">Singleton 类型的实例化</a></li>\n<li><a href=\"#docreatebean\">doCreateBean</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><br></p>\n<p>测试的代码如下：</p>\n<p>main</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ClassPathResource resource = <span class=\"keyword\">new</span> ClassPathResource(<span class=\"string\">\"beans.xml\"</span>);</span><br><span class=\"line\">        DefaultListableBeanFactory beanFactory = <span class=\"keyword\">new</span> DefaultListableBeanFactory();</span><br><span class=\"line\">        XmlBeanDefinitionReader reader = <span class=\"keyword\">new</span> XmlBeanDefinitionReader(beanFactory);</span><br><span class=\"line\">        reader.loadBeanDefinitions(resource);</span><br><span class=\"line\">        Student myBean = beanFactory.getBean(<span class=\"string\">\"myBean\"</span>, Student.class);</span><br><span class=\"line\">        System.out.println(myBean.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p>pom.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.wyj.alipay<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hello-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring.version</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">spring.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">jdk.version</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">jdk.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-framework-bom<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.1.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-beans<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.16.22<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p>beans.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myBean\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.wyj.alipay.spring.bean.Student\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"zhangsan\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"16\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"BeanDefinition\"><a href=\"#BeanDefinition\" class=\"headerlink\" title=\"BeanDefinition\"></a>BeanDefinition</h2><p>在上一篇分析基本容器的时候，解析配置文件，扫描Bean，找到Bean的定义 – <code>BeanDefinition</code>是在<code>DefaultBeanDefinitionDocumentReader</code>中完成的。</p>\n<p>扫描我们的bean的配置文件，拿到配置文件的解析结果<code>Element</code>对象，并根据不同的标签类型使用不同的方法解析，基本代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 循环遍历解析 每一个 node</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">parseBeanDefinitions</span><span class=\"params\">(Element root, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (delegate.isDefaultNamespace(root)) &#123;</span><br><span class=\"line\">        NodeList nl = root.getChildNodes();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class=\"line\">            Node node = nl.item(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node <span class=\"keyword\">instanceof</span> Element) &#123;</span><br><span class=\"line\">                Element ele = (Element) node;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (delegate.isDefaultNamespace(ele)) &#123;</span><br><span class=\"line\">                    parseDefaultElement(ele, delegate);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    delegate.parseCustomElement(ele);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        delegate.parseCustomElement(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">parseDefaultElement</span><span class=\"params\">(Element ele, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (delegate.nodeNameEquals(ele, IMPORT_ELEMENT)) &#123;</span><br><span class=\"line\">        importBeanDefinitionResource(ele);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (delegate.nodeNameEquals(ele, ALIAS_ELEMENT)) &#123;</span><br><span class=\"line\">        processAliasRegistration(ele);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (delegate.nodeNameEquals(ele, BEAN_ELEMENT)) &#123;</span><br><span class=\"line\">        processBeanDefinition(ele, delegate);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (delegate.nodeNameEquals(ele, NESTED_BEANS_ELEMENT)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// recurse</span></span><br><span class=\"line\">        doRegisterBeanDefinitions(ele);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>剩下的任务就是解析每一个扫描xml文件中得出的<code>Element</code>标签，并将<code>Element</code>对象转换为bean的定义对象<code>BeanDefinition</code>。而这些任务在Spring的架构中都是委托给<code>BeanDefinitionParserDelegate</code>实现的，该类是专门负责将<code>Element</code>xml标签对象，转换为相应的<code>BeanDefinition</code>对象。</p>\n<p>下面我们先看下<code>BeanDefinitionParserDelegate</code>的初始化过程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DefaultBeanDefinitionDocumentReader 中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> BeanDefinitionParserDelegate <span class=\"title\">createDelegate</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        XmlReaderContext readerContext, Element root, @Nullable BeanDefinitionParserDelegate parentDelegate)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    BeanDefinitionParserDelegate delegate = <span class=\"keyword\">new</span> BeanDefinitionParserDelegate(readerContext);</span><br><span class=\"line\">    delegate.initDefaults(root, parentDelegate);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> delegate;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// BeanDefinitionParserDelegate</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BeanDefinitionParserDelegate</span><span class=\"params\">(XmlReaderContext readerContext)</span> </span>&#123;</span><br><span class=\"line\">    Assert.notNull(readerContext, <span class=\"string\">\"XmlReaderContext must not be null\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.readerContext = readerContext;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * populateDefaults 的任务就是扫描根标签beans有没有对所有bean的默认配置。Initialize the default lazy-init, autowire,</span></span><br><span class=\"line\"><span class=\"comment\"> * dependency check settings,init-method, destroy-method and merge settings。</span></span><br><span class=\"line\"><span class=\"comment\"> * fireDefaultsRegistered 就是会掉readerContext中对reader各种事件的监听。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initDefaults</span><span class=\"params\">(Element root, @Nullable BeanDefinitionParserDelegate parent)</span> </span>&#123;</span><br><span class=\"line\">    populateDefaults(<span class=\"keyword\">this</span>.defaults, (parent != <span class=\"keyword\">null</span> ? parent.defaults : <span class=\"keyword\">null</span>), root);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.readerContext.fireDefaultsRegistered(<span class=\"keyword\">this</span>.defaults);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后，我们再来认识下<code>ReaderContext</code>。一般使用的是他的子类<code>XmlReaderContext</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * reading bean definition process(过程) 的 context，封装了所有的相关配置和状态。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReaderContext</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 源文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Resource resource;</span><br><span class=\"line\">    <span class=\"comment\">// 解析过程中如果出现问题，向汇报器汇报</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ProblemReporter problemReporter;</span><br><span class=\"line\">    <span class=\"comment\">// reader过程的监听器，默认实现是 EmptyReaderEventListener 每个方法都是空实现。</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ReaderEventListener eventListener;</span><br><span class=\"line\">    <span class=\"comment\">// 就是上文说的从跟标签 beans 中解析出来的一些属性的默认配置</span></span><br><span class=\"line\">    <span class=\"comment\">// 如 lazy-init, autowire, dependency check settings,init-method, destroy-method</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> SourceExtractor sourceExtractor;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在Spring中，像使用<code>ReaderContext</code>这种环境类特别多，这种设计模式应该细细品味，好好体会，有时间了还应该专门写一篇日志分析记录一下。</p>\n</blockquote>\n<p>好，到这里，基础工作做好了之后，下面开始真正的解析。</p>\n<hr>\n<p>首先看看解析bean标签的过程。<code>processBeanDefinition</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">processBeanDefinition</span><span class=\"params\">(Element ele, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1. 解析标签，将标签转换为 BeanDefinition 并用 BeanDefinitionHolder 连同beanName，aliasArray一并封装起来。</span></span><br><span class=\"line\">    BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bdHolder != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 2. 还要对子标签下的自定义属性调用decorateBeanDefinitionIfRequired方法进行解析，这回是自定义属性</span></span><br><span class=\"line\">        bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Register the final decorated instance.</span></span><br><span class=\"line\">            <span class=\"comment\">// 3. 注册</span></span><br><span class=\"line\">            BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class=\"line\">            getReaderContext().error(<span class=\"string\">\"Failed to register bean definition with name '\"</span> +</span><br><span class=\"line\">                    bdHolder.getBeanName() + <span class=\"string\">\"'\"</span>, ele, ex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Send registration event.</span></span><br><span class=\"line\">        <span class=\"comment\">//4. 触发监听器，通知监听器的相关方法</span></span><br><span class=\"line\">        getReaderContext().fireComponentRegistered(<span class=\"keyword\">new</span> BeanComponentDefinition(bdHolder));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第一步：解析标签，完成Element 到 BeanDefinition 的转换。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 该方法 先取出  beanName，看是否已经注册过。有的话，抛出异常。</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果没有，才调用 parseBeanDefinitionElement 真正的去解析node中的每一个元素。</span></span><br><span class=\"line\"><span class=\"comment\"> * 解析完成之后，将 beanDefinition, beanName, aliasesArray 一起封装到 BeanDefinitionHolder中返回。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> BeanDefinitionHolder <span class=\"title\">parseBeanDefinitionElement</span><span class=\"params\">(Element ele, @Nullable BeanDefinition containingBean)</span> </span>&#123;</span><br><span class=\"line\">    String id = ele.getAttribute(ID_ATTRIBUTE);</span><br><span class=\"line\">    String nameAttr = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;String&gt; aliases = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StringUtils.hasLength(nameAttr)) &#123;</span><br><span class=\"line\">        String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span><br><span class=\"line\">        aliases.addAll(Arrays.asList(nameArr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    String beanName = id;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!StringUtils.hasText(beanName) &amp;&amp; !aliases.isEmpty()) &#123;</span><br><span class=\"line\">        beanName = aliases.remove(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">            logger.trace(<span class=\"string\">\"No XML 'id' specified - using '\"</span> + beanName +</span><br><span class=\"line\">                    <span class=\"string\">\"' as bean name and \"</span> + aliases + <span class=\"string\">\" as aliases\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (containingBean == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        checkNameUniqueness(beanName, aliases, ele);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (beanDefinition != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.hasText(beanName)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (containingBean != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    beanName = BeanDefinitionReaderUtils.generateBeanName(</span><br><span class=\"line\">                            beanDefinition, <span class=\"keyword\">this</span>.readerContext.getRegistry(), <span class=\"keyword\">true</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    beanName = <span class=\"keyword\">this</span>.readerContext.generateBeanName(beanDefinition);</span><br><span class=\"line\">                    <span class=\"comment\">// Register an alias for the plain bean class name, if still possible,</span></span><br><span class=\"line\">                    <span class=\"comment\">// if the generator returned the class name plus a suffix.</span></span><br><span class=\"line\">                    <span class=\"comment\">// This is expected for Spring 1.2/2.0 backwards compatibility.</span></span><br><span class=\"line\">                    String beanClassName = beanDefinition.getBeanClassName();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (beanClassName != <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">                            beanName.startsWith(beanClassName) &amp;&amp; beanName.length() &gt; beanClassName.length() &amp;&amp;</span><br><span class=\"line\">                            !<span class=\"keyword\">this</span>.readerContext.getRegistry().isBeanNameInUse(beanClassName)) &#123;</span><br><span class=\"line\">                        aliases.add(beanClassName);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">                    logger.trace(<span class=\"string\">\"Neither XML 'id' nor 'name' specified - \"</span> +</span><br><span class=\"line\">                            <span class=\"string\">\"using generated bean name [\"</span> + beanName + <span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">                error(ex.getMessage(), ele);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String[] aliasesArray = StringUtils.toStringArray(aliases);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BeanDefinitionHolder(beanDefinition, beanName, aliasesArray);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 真正的解析Element标签中每一个元素、子标签，并将结果封装到BeanDefinition中</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> AbstractBeanDefinition <span class=\"title\">parseBeanDefinitionElement</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        Element ele, String beanName, @Nullable BeanDefinition containingBean)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这里 使用了一个栈将解析的标签栈也就是当前解析的状态全部都保存了起来。</span></span><br><span class=\"line\">    <span class=\"comment\">// 比如说，当前解析到哪个标签了，（因为一个bean下面会有很多的子标签），当前是哪个bean</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.parseState.push(<span class=\"keyword\">new</span> BeanEntry(beanName));</span><br><span class=\"line\"></span><br><span class=\"line\">    String className = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ele.hasAttribute(CLASS_ATTRIBUTE)) &#123;</span><br><span class=\"line\">        className = ele.getAttribute(CLASS_ATTRIBUTE).trim();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    String parent = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ele.hasAttribute(PARENT_ATTRIBUTE)) &#123;</span><br><span class=\"line\">        parent = ele.getAttribute(PARENT_ATTRIBUTE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        AbstractBeanDefinition bd = createBeanDefinition(className, parent);</span><br><span class=\"line\"></span><br><span class=\"line\">        parseBeanDefinitionAttributes(ele, beanName, containingBean, bd);</span><br><span class=\"line\">        bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT));</span><br><span class=\"line\"></span><br><span class=\"line\">        parseMetaElements(ele, bd);</span><br><span class=\"line\">        parseLookupOverrideSubElements(ele, bd.getMethodOverrides());</span><br><span class=\"line\">        parseReplacedMethodSubElements(ele, bd.getMethodOverrides());</span><br><span class=\"line\"></span><br><span class=\"line\">        parseConstructorArgElements(ele, bd);</span><br><span class=\"line\">        parsePropertyElements(ele, bd);</span><br><span class=\"line\">        parseQualifierElements(ele, bd);</span><br><span class=\"line\"></span><br><span class=\"line\">        bd.setResource(<span class=\"keyword\">this</span>.readerContext.getResource());</span><br><span class=\"line\">        bd.setSource(extractSource(ele));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> bd;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (...) &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.parseState.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p>第二步，就是根据扫描一下自定义属性什么的，看源码，就是根据命名空间这些，去找相应标签的相应属性有没有被定义等等。</p>\n<p><br></p>\n<p>第三步，注册到Registry，也就是我们的BeanFactory</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// BeanDefinitionReaderUtils</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">registerBeanDefinition</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Register bean definition under primary name.</span></span><br><span class=\"line\">    String beanName = definitionHolder.getBeanName();</span><br><span class=\"line\">    <span class=\"comment\">// 注册 beanName 和 BeanDefinition</span></span><br><span class=\"line\">    registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Register aliases for bean name, if any.</span></span><br><span class=\"line\">    <span class=\"comment\">// 注册 beanName对应的 alias</span></span><br><span class=\"line\">    String[] aliases = definitionHolder.getAliases();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (aliases != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String alias : aliases) &#123;</span><br><span class=\"line\">            registry.registerAlias(beanName, alias);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerBeanDefinition</span><span class=\"params\">(String beanName, BeanDefinition beanDefinition)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    BeanDefinition existingDefinition = <span class=\"keyword\">this</span>.beanDefinitionMap.get(beanName);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (existingDefinition != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 根据设置 是否允许同名 覆盖，不允许 抛出异常，允许 根据相应规则处理</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果已经开始创建，使用同步（可能创建开始会有多个线程访问 beanDefinitionMap）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hasBeanCreationStarted()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Cannot modify startup-time collection elements anymore (for stable iteration)</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.beanDefinitionMap) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class=\"line\">                List&lt;String&gt; updatedDefinitions = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"keyword\">this</span>.beanDefinitionNames.size() + <span class=\"number\">1</span>);</span><br><span class=\"line\">                updatedDefinitions.addAll(<span class=\"keyword\">this</span>.beanDefinitionNames);</span><br><span class=\"line\">                updatedDefinitions.add(beanName);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.beanDefinitionNames = updatedDefinitions;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.manualSingletonNames.contains(beanName)) &#123;</span><br><span class=\"line\">                    Set&lt;String&gt; updatedSingletons = <span class=\"keyword\">new</span> LinkedHashSet&lt;&gt;(<span class=\"keyword\">this</span>.manualSingletonNames);</span><br><span class=\"line\">                    updatedSingletons.remove(beanName);</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.manualSingletonNames = updatedSingletons;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Still in startup registration phase</span></span><br><span class=\"line\">            <span class=\"comment\">// 如果还是 startup 阶段，直接更新相应的数据</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.beanDefinitionNames.add(beanName);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.manualSingletonNames.remove(beanName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.frozenBeanDefinitionNames = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (existingDefinition != <span class=\"keyword\">null</span> || containsSingleton(beanName)) &#123;</span><br><span class=\"line\">        resetBeanDefinition(beanName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断是否开始创建 仅仅是判断 alreadyCreated set是否为空</span></span><br><span class=\"line\"><span class=\"comment\">// alreadyCreated 在之后的 bean的创建中还会再次接触到，当 bean创建完了之后，会放在该set中保存。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasBeanCreationStarted</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !<span class=\"keyword\">this</span>.alreadyCreated.isEmpty();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 之后注册 别名 也比较简单。</span></span><br></pre></td></tr></table></figure>\n<p>到这里为止，根root下的所有bean element都以<code>BeanDefinition</code>的形式保存在了<code>BeanFactory</code>中。</p>\n<p>其他类型的基本标签和这个过程都是类似的，比<code>bean</code>标签简单，而且最后都要回归到bean标签。</p>\n<p><br></p>\n<hr>\n<h2 id=\"createBean\"><a href=\"#createBean\" class=\"headerlink\" title=\"createBean\"></a>createBean</h2><p>现在，所有的bean都以<code>BeanDefinition</code>的格式保存在<code>BeanFactory</code>中。当调用类似<code>getBean</code>方法的时候就会实例化该bean。</p>\n<p>这是我们的入口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student myBean = beanFactory.getBean(<span class=\"string\">\"myBean\"</span>, Student.class);</span><br></pre></td></tr></table></figure>\n<p>到最后都是执行的<code>AbstractBeanFactory.doCetBean</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">doGetBean</span><span class=\"params\">(<span class=\"keyword\">final</span> String name, @Nullable <span class=\"keyword\">final</span> Class&lt;T&gt; requiredType,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        @Nullable <span class=\"keyword\">final</span> Object[] args, <span class=\"keyword\">boolean</span> typeCheckOnly)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> String beanName = transformedBeanName(name);</span><br><span class=\"line\">    Object bean;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Eagerly check singleton cache for manually registered singletone.</span></span><br><span class=\"line\">    <span class=\"comment\">// 1. 首先 会从singleton缓存中获取</span></span><br><span class=\"line\">    Object sharedInstance = getSingleton(beanName);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sharedInstance != <span class=\"keyword\">null</span> &amp;&amp; args == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class=\"line\">                logger.trace(<span class=\"string\">\"Returning eagerly cached instance of singleton bean '\"</span> + beanName +</span><br><span class=\"line\">                        <span class=\"string\">\"' that is not fully initialized yet - a consequence of a circular reference\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                logger.trace(<span class=\"string\">\"Returning cached instance of singleton bean '\"</span> + beanName + <span class=\"string\">\"'\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        bean = getObjectForBeanInstance(sharedInstance, name, beanName, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Fail if we're already creating this bean instance:</span></span><br><span class=\"line\">        <span class=\"comment\">// We're assumably within a circular reference.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isPrototypeCurrentlyInCreation(beanName)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanCurrentlyInCreationException(beanName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 2. 如果当前singleton中没有，则看看 parentBeanFactory</span></span><br><span class=\"line\">        <span class=\"comment\">// Check if bean definition exists in this factory.</span></span><br><span class=\"line\">        BeanFactory parentBeanFactory = getParentBeanFactory();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (parentBeanFactory != <span class=\"keyword\">null</span> &amp;&amp; !containsBeanDefinition(beanName)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Not found -&gt; check parent.</span></span><br><span class=\"line\">            String nameToLookup = originalBeanName(name);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (parentBeanFactory <span class=\"keyword\">instanceof</span> AbstractBeanFactory) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ((AbstractBeanFactory) parentBeanFactory).doGetBean(</span><br><span class=\"line\">                        nameToLookup, requiredType, args, typeCheckOnly);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (args != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Delegation to parent with explicit args.</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> (T) parentBeanFactory.getBean(nameToLookup, args);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (requiredType != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// No args -&gt; delegate to standard getBean method.</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> parentBeanFactory.getBean(nameToLookup, requiredType);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> (T) parentBeanFactory.getBean(nameToLookup);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3. 如果还没有，如果本次操作不是 仅仅判断类型 则由当前的beanFactory完成创建该bean。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!typeCheckOnly) &#123;</span><br><span class=\"line\">            markBeanAsCreated(beanName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 3.1 merge BeanDefinition</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class=\"line\">            checkMergedBeanDefinition(mbd, beanName, args);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 3.2 创建依赖</span></span><br><span class=\"line\">            <span class=\"comment\">// Guarantee initialization of beans that the current bean depends on.</span></span><br><span class=\"line\">            String[] dependsOn = mbd.getDependsOn();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dependsOn != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (String dep : dependsOn) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (isDependent(beanName, dep)) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class=\"line\">                                <span class=\"string\">\"Circular depends-on relationship between '\"</span> + beanName + <span class=\"string\">\"' and '\"</span> + dep + <span class=\"string\">\"'\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    registerDependentBean(dep, beanName);</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        getBean(dep);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class=\"line\">                                <span class=\"string\">\"'\"</span> + beanName + <span class=\"string\">\"' depends on missing bean '\"</span> + dep + <span class=\"string\">\"'\"</span>, ex);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Create bean instance.</span></span><br><span class=\"line\">            <span class=\"comment\">// 3.3 根据不同的 Scope 创建不同的Bean</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mbd.isSingleton()) &#123;</span><br><span class=\"line\">                sharedInstance = getSingleton(beanName, () -&gt; &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> createBean(beanName, mbd, args);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">catch</span> (BeansException ex) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// Explicitly remove instance from singleton cache: It might have been put there</span></span><br><span class=\"line\">                        <span class=\"comment\">// eagerly by the creation process, to allow for circular reference resolution.</span></span><br><span class=\"line\">                        <span class=\"comment\">// Also remove any beans that received a temporary reference to the bean.</span></span><br><span class=\"line\">                        destroySingleton(beanName);</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mbd.isPrototype()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// It's a prototype -&gt; create a new instance.</span></span><br><span class=\"line\">                Object prototypeInstance = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    beforePrototypeCreation(beanName);</span><br><span class=\"line\">                    prototypeInstance = createBean(beanName, mbd, args);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    afterPrototypeCreation(beanName);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                String scopeName = mbd.getScope();</span><br><span class=\"line\">                <span class=\"keyword\">final</span> Scope scope = <span class=\"keyword\">this</span>.scopes.get(scopeName);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (scope == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"No Scope registered for scope name '\"</span> + scopeName + <span class=\"string\">\"'\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Object scopedInstance = scope.get(beanName, () -&gt; &#123;</span><br><span class=\"line\">                        beforePrototypeCreation(beanName);</span><br><span class=\"line\">                        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> createBean(beanName, mbd, args);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                            afterPrototypeCreation(beanName);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                    bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">catch</span> (IllegalStateException ex) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanCreationException(beanName,</span><br><span class=\"line\">                            <span class=\"string\">\"Scope '\"</span> + scopeName + <span class=\"string\">\"' is not active for the current thread; consider \"</span> +</span><br><span class=\"line\">                            <span class=\"string\">\"defining a scoped proxy for this bean if you intend to refer to it from a singleton\"</span>,</span><br><span class=\"line\">                            ex);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (BeansException ex) &#123;</span><br><span class=\"line\">            cleanupAfterBeanCreationFailure(beanName);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Check if required type matches the type of the actual bean instance.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (requiredType != <span class=\"keyword\">null</span> &amp;&amp; !requiredType.isInstance(bean)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            T convertedBean = getTypeConverter().convertIfNecessary(bean, requiredType);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (convertedBean == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> convertedBean;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (TypeMismatchException ex) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">                logger.trace(<span class=\"string\">\"Failed to convert bean '\"</span> + name + <span class=\"string\">\"' to required type '\"</span> +</span><br><span class=\"line\">                        ClassUtils.getQualifiedName(requiredType) + <span class=\"string\">\"'\"</span>, ex);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (T) bean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>整个getBean的流程都包含在上面的函数中，总体应该分为两大类来讨论，一个是<code>singleton</code>，一个是普通类<code>Prototype</code></strong></p>\n<p><br></p>\n<hr>\n<h3 id=\"Prototype-类型的实例化\"><a href=\"#Prototype-类型的实例化\" class=\"headerlink\" title=\"Prototype 类型的实例化\"></a>Prototype 类型的实例化</h3><p>首先，分析普通类型的实例化。 每次<code>getBean</code> 都需要 调用<code>createBean</code>,整个逻辑也比较简单。</p>\n<p>在之前，先了解一下整个过程涉及到的几个变量。他们都在<code>AbstractBeanFactory</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractBeanFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">FactoryBeanRegistrySupport</span> <span class=\"keyword\">implements</span> <span class=\"title\">ConfigurableBeanFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** Map from bean name to merged RootBeanDefinition. */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, RootBeanDefinition&gt; mergedBeanDefinitions = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;(<span class=\"number\">256</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** Names of beans that have already been created at least once. */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Set&lt;String&gt; alreadyCreated = Collections.newSetFromMap(<span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;(<span class=\"number\">256</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** Names of beans that are currently in creation. */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ThreadLocal&lt;Object&gt; prototypesCurrentlyInCreation =</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> NamedThreadLocal&lt;&gt;(<span class=\"string\">\"Prototype beans currently in creation\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Mark the specified bean as already created (or about to be created).</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;This allows the bean factory to optimize its caching for repeated</span></span><br><span class=\"line\"><span class=\"comment\">\t * creation of the specified bean.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> beanName the name of the bean</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">markBeanAsCreated</span><span class=\"params\">(String beanName)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.alreadyCreated.contains(beanName)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.mergedBeanDefinitions) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.alreadyCreated.contains(beanName)) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// Let the bean definition get re-merged now that we're actually creating</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// the bean... just in case some of its metadata changed in the meantime.</span></span><br><span class=\"line\">\t\t\t\t\tclearMergedBeanDefinition(beanName);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">this</span>.alreadyCreated.add(beanName);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasBeanCreationStarted</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> !<span class=\"keyword\">this</span>.alreadyCreated.isEmpty();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return whether the specified prototype bean is currently in creation</span></span><br><span class=\"line\"><span class=\"comment\">\t * (within the current thread).</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> beanName the name of the bean</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPrototypeCurrentlyInCreation</span><span class=\"params\">(String beanName)</span> </span>&#123;</span><br><span class=\"line\">\t\tObject curVal = <span class=\"keyword\">this</span>.prototypesCurrentlyInCreation.get();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (curVal != <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">\t\t\t\t(curVal.equals(beanName) || (curVal <span class=\"keyword\">instanceof</span> Set &amp;&amp; ((Set&lt;?&gt;) curVal).contains(beanName))));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Callback before prototype creation.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;The default implementation register the prototype as currently in creation.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> beanName the name of the prototype about to be created</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@see</span> #isPrototypeCurrentlyInCreation</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">beforePrototypeCreation</span><span class=\"params\">(String beanName)</span> </span>&#123;</span><br><span class=\"line\">\t\tObject curVal = <span class=\"keyword\">this</span>.prototypesCurrentlyInCreation.get();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (curVal == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.prototypesCurrentlyInCreation.set(beanName);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (curVal <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">\t\t\tSet&lt;String&gt; beanNameSet = <span class=\"keyword\">new</span> HashSet&lt;&gt;(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t\tbeanNameSet.add((String) curVal);</span><br><span class=\"line\">\t\t\tbeanNameSet.add(beanName);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.prototypesCurrentlyInCreation.set(beanNameSet);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSet&lt;String&gt; beanNameSet = (Set&lt;String&gt;) curVal;</span><br><span class=\"line\">\t\t\tbeanNameSet.add(beanName);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Callback after prototype creation.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;The default implementation marks the prototype as not in creation anymore.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> beanName the name of the prototype that has been created</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@see</span> #isPrototypeCurrentlyInCreation</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">afterPrototypeCreation</span><span class=\"params\">(String beanName)</span> </span>&#123;</span><br><span class=\"line\">\t\tObject curVal = <span class=\"keyword\">this</span>.prototypesCurrentlyInCreation.get();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (curVal <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.prototypesCurrentlyInCreation.remove();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (curVal <span class=\"keyword\">instanceof</span> Set) &#123;</span><br><span class=\"line\">\t\t\tSet&lt;String&gt; beanNameSet = (Set&lt;String&gt;) curVal;</span><br><span class=\"line\">\t\t\tbeanNameSet.remove(beanName);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (beanNameSet.isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.prototypesCurrentlyInCreation.remove();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>mergedBeanDefinitions</code> 每个bean在创建之前都需要将普通的<code>BeanDefinition</code>转换为<code>RootBeanDefinition</code>也就是该成员变量中存储的对象。 而且，他也作为创建对象过程中的同步锁，</li>\n<li><code>alreadyCreated</code> 每个第一次创建的对象的 beanName都会被保存到该成员变量中。也是用来标志创建过程是否开始，某个bean是否开始创建</li>\n<li><code>prototypesCurrentlyInCreation</code> 主要是针对<code>Prototype</code>（普通）类型的bean。因为可能被同时多个线程创建，所以保存在ThreadLocal`中.<br><br></li>\n</ul>\n<p>下面我们看 整个bean的创建过程：</p>\n<p>第一步，检测是否仅仅是来检查类型的，如果不是，那就是来创建对象的，就将该对象标记被在创建中。<code>markAsCreated()</code>代码上面已经给出了。</p>\n<p>第二步，<code>getMergedLocalBeanDefinition</code>。整个merge的过程就是将 父BeanDefinition合并到子BeanDefinition中。整个过程的细节以及几个BeanDefinition关系可以查看<a href=\"https://blog.csdn.net/disiwei1012/article/details/77142167\" target=\"_blank\" rel=\"noopener\">bean的parent属性详解和获取RootBeanDefinition</a>。该步骤会设置默认scope为singleton</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> RootBeanDefinition <span class=\"title\">getMergedLocalBeanDefinition</span><span class=\"params\">(String beanName)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Quick check on the concurrent map first, with minimal locking.</span></span><br><span class=\"line\">    RootBeanDefinition mbd = <span class=\"keyword\">this</span>.mergedBeanDefinitions.get(beanName);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mbd != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mbd;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getMergedBeanDefinition(beanName, getBeanDefinition(beanName), <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> RootBeanDefinition <span class=\"title\">getMergedBeanDefinition</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        String beanName, BeanDefinition bd, @Nullable BeanDefinition containingBd)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> BeanDefinitionStoreException</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.mergedBeanDefinitions) &#123;</span><br><span class=\"line\">        RootBeanDefinition mbd = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Check with full lock now in order to enforce the same merged instance.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (containingBd == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            mbd = <span class=\"keyword\">this</span>.mergedBeanDefinitions.get(beanName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mbd == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bd.getParentName() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Use copy of given root bean definition.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (bd <span class=\"keyword\">instanceof</span> RootBeanDefinition) &#123;</span><br><span class=\"line\">                    mbd = ((RootBeanDefinition) bd).cloneBeanDefinition();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    mbd = <span class=\"keyword\">new</span> RootBeanDefinition(bd);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Child bean definition: needs to be merged with parent.</span></span><br><span class=\"line\">                BeanDefinition pbd;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    String parentBeanName = transformedBeanName(bd.getParentName());</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!beanName.equals(parentBeanName)) &#123;</span><br><span class=\"line\">                        pbd = getMergedBeanDefinition(parentBeanName);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        BeanFactory parent = getParentBeanFactory();</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (parent <span class=\"keyword\">instanceof</span> ConfigurableBeanFactory) &#123;</span><br><span class=\"line\">                            pbd = ((ConfigurableBeanFactory) parent).getMergedBeanDefinition(parentBeanName);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchBeanDefinitionException(parentBeanName,</span><br><span class=\"line\">                                    <span class=\"string\">\"Parent name '\"</span> + parentBeanName + <span class=\"string\">\"' is equal to bean name '\"</span> + beanName +</span><br><span class=\"line\">                                    <span class=\"string\">\"': cannot be resolved without an AbstractBeanFactory parent\"</span>);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanDefinitionStoreException(bd.getResourceDescription(), beanName,</span><br><span class=\"line\">                            <span class=\"string\">\"Could not resolve parent bean definition '\"</span> + bd.getParentName() + <span class=\"string\">\"'\"</span>, ex);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// Deep copy with overridden values.</span></span><br><span class=\"line\">                mbd = <span class=\"keyword\">new</span> RootBeanDefinition(pbd);</span><br><span class=\"line\">                mbd.overrideFrom(bd);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Set default singleton scope, if not configured before.</span></span><br><span class=\"line\">            <span class=\"comment\">// 设置默认的scope -- singleton</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!StringUtils.hasLength(mbd.getScope())) &#123;</span><br><span class=\"line\">                mbd.setScope(RootBeanDefinition.SCOPE_SINGLETON);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// A bean contained in a non-singleton bean cannot be a singleton itself.</span></span><br><span class=\"line\">            <span class=\"comment\">// Let's correct this on the fly here, since this might be the result of</span></span><br><span class=\"line\">            <span class=\"comment\">// parent-child merging for the outer bean, in which case the original inner bean</span></span><br><span class=\"line\">            <span class=\"comment\">// definition will not have inherited the merged outer bean's singleton status.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (containingBd != <span class=\"keyword\">null</span> &amp;&amp; !containingBd.isSingleton() &amp;&amp; mbd.isSingleton()) &#123;</span><br><span class=\"line\">                mbd.setScope(containingBd.getScope());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Cache the merged bean definition for the time being</span></span><br><span class=\"line\">            <span class=\"comment\">// (it might still get re-merged later on in order to pick up metadata changes)</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (containingBd == <span class=\"keyword\">null</span> &amp;&amp; isCacheBeanMetadata()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.mergedBeanDefinitions.put(beanName, mbd);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> mbd;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第三步，获取依赖。就是检测BeanDefinition中dependOn属性，get所有dependOn的bean。</p>\n<p>第四步，创建实例。</p>\n<p>第五步，调用<code>getObjectForBeanInstance</code>，获取真正的实例对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">getObjectForBeanInstance</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        Object beanInstance, String name, String beanName, @Nullable RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判空</span></span><br><span class=\"line\">    <span class=\"comment\">// Don't let calling code try to dereference the factory if the bean isn't a factory.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (BeanFactoryUtils.isFactoryDereference(name)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (beanInstance <span class=\"keyword\">instanceof</span> NullBean) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> beanInstance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(beanInstance <span class=\"keyword\">instanceof</span> FactoryBean)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanIsNotAFactoryException(transformedBeanName(name), beanInstance.getClass());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Now we have the bean instance, which may be a normal bean or a FactoryBean.</span></span><br><span class=\"line\">    <span class=\"comment\">// If it's a FactoryBean, we use it to create a bean instance, unless the</span></span><br><span class=\"line\">    <span class=\"comment\">// caller actually wants a reference to the factory.</span></span><br><span class=\"line\">    <span class=\"comment\">// 这时已经持有了对象，如果不是FactoryBean 直接返回，如果用户想获取的就是FactoryBean 也直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(beanInstance <span class=\"keyword\">instanceof</span> FactoryBean) || BeanFactoryUtils.isFactoryDereference(name)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> beanInstance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 说明这是一个FactoryBean，并且想获取其中的bean</span></span><br><span class=\"line\">    Object object = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mbd == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        object = getCachedObjectForFactoryBean(beanName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Return bean instance from factory.</span></span><br><span class=\"line\">        FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) beanInstance;</span><br><span class=\"line\">        <span class=\"comment\">// Caches object obtained from FactoryBean if it is a singleton.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mbd == <span class=\"keyword\">null</span> &amp;&amp; containsBeanDefinition(beanName)) &#123;</span><br><span class=\"line\">            mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> synthetic = (mbd != <span class=\"keyword\">null</span> &amp;&amp; mbd.isSynthetic());</span><br><span class=\"line\">        object = getObjectFromFactoryBean(factory, beanName, !synthetic);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<hr>\n<h3 id=\"Singleton-类型的实例化\"><a href=\"#Singleton-类型的实例化\" class=\"headerlink\" title=\"Singleton 类型的实例化\"></a>Singleton 类型的实例化</h3><p>用来操作Singleton相关实例的类是<code>DefaultSingletonBeanRegistry</code>，首先，先来好好了解下该类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DefaultSingletonBeanRegistry</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleAliasRegistry</span> <span class=\"keyword\">implements</span> <span class=\"title\">SingletonBeanRegistry</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** Cache of singleton objects: bean name to bean instance. */</span></span><br><span class=\"line\">    <span class=\"comment\">// 也作为一些需要同步操作的锁</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, Object&gt; singletonObjects = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;(<span class=\"number\">256</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** Cache of singleton factories: bean name to ObjectFactory. */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, ObjectFactory&lt;?&gt;&gt; singletonFactories = <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** Cache of early singleton objects: bean name to bean instance. */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, Object&gt; earlySingletonObjects = <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** Set of registered singletons, containing the bean names in registration order. */</span></span><br><span class=\"line\">    <span class=\"comment\">// 用来判断 singleton 是否存在的依据</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Set&lt;String&gt; registeredSingletons = <span class=\"keyword\">new</span> LinkedHashSet&lt;&gt;(<span class=\"number\">256</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ---------------对singleton、singletonFactory的添加删除等操作，都是操作的以上变量-------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** Names of beans that are currently in creation. */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Set&lt;String&gt; singletonsCurrentlyInCreation =</span><br><span class=\"line\">\t\t\tCollections.newSetFromMap(<span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;(<span class=\"number\">16</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** Flag that indicates whether we're currently within destroySingletons. */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> singletonsCurrentlyInDestruction = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** Disposable bean instances: bean name to disposable instance. */</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     registering its DisposableBean interface and/or the given destroy method to be called on factory shutdown</span></span><br><span class=\"line\"><span class=\"comment\">     singleton 如果需要在销毁时执行某些操作，可以在创建好对象之后，将singleton放入该collection中。</span></span><br><span class=\"line\"><span class=\"comment\">     在该collection中的singleton在BeanFactroy销毁的时候会执行 他的 destroy method 或者 DisposableBean接口的回调方法</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, Object&gt; disposableBeans = <span class=\"keyword\">new</span> LinkedHashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">// 还有其他变量，没有列全</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerSingleton</span><span class=\"params\">(String beanName, Object singletonObject)</span> <span class=\"keyword\">throws</span> IllegalStateException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.singletonObjects) &#123;</span><br><span class=\"line\">\t\t\tObject oldObject = <span class=\"keyword\">this</span>.singletonObjects.get(beanName);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (oldObject != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Could not register object [\"</span> + singletonObject +</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"string\">\"] under bean name '\"</span> + beanName + <span class=\"string\">\"': there is already object [\"</span> + oldObject + <span class=\"string\">\"] bound\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\taddSingleton(beanName, singletonObject);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Add the given singleton object to the singleton cache of this factory.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;To be called for eager registration of singletons.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> beanName the name of the bean</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> singletonObject the singleton object</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">addSingleton</span><span class=\"params\">(String beanName, Object singletonObject)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 说明我们已经创建出来了对象</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         添加到singletonObjects中</span></span><br><span class=\"line\"><span class=\"comment\">         从singletonFactories删除</span></span><br><span class=\"line\"><span class=\"comment\">         从earlySingletonObjects删除</span></span><br><span class=\"line\"><span class=\"comment\">         添加到registerSingletons，表示 已注册，下次判断的时候 就返回true了</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.singletonObjects) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.singletonObjects.put(beanName, singletonObject);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.singletonFactories.remove(beanName);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.earlySingletonObjects.remove(beanName);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.registeredSingletons.add(beanName);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Add the given singleton factory for building the specified singleton</span></span><br><span class=\"line\"><span class=\"comment\">\t * if necessary.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;To be called for eager registration of singletons, e.g. to be able to</span></span><br><span class=\"line\"><span class=\"comment\">\t * resolve circular references.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> beanName the name of the bean</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> singletonFactory the factory for the singleton object</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">addSingletonFactory</span><span class=\"params\">(String beanName, ObjectFactory&lt;?&gt; singletonFactory)</span> </span>&#123;</span><br><span class=\"line\">\t\tAssert.notNull(singletonFactory, <span class=\"string\">\"Singleton factory must not be null\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.singletonObjects) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.singletonObjects.containsKey(beanName)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.singletonFactories.put(beanName, singletonFactory);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.earlySingletonObjects.remove(beanName);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.registeredSingletons.add(beanName);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getSingleton</span><span class=\"params\">(String beanName)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> getSingleton(beanName, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return the (raw) singleton object registered under the given name.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;Checks already instantiated singletons and also allows for an early</span></span><br><span class=\"line\"><span class=\"comment\">\t * reference to a currently created singleton (resolving a circular reference).</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> beanName the name of the bean to look for</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> allowEarlyReference whether early references should be created or not</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> the registered singleton object, or &#123;<span class=\"doctag\">@code</span> null&#125; if none found</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">getSingleton</span><span class=\"params\">(String beanName, <span class=\"keyword\">boolean</span> allowEarlyReference)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 先从 singltonObjects 中获取，看是否已经存在真正实例化好的对象</span></span><br><span class=\"line\">\t\tObject singletonObject = <span class=\"keyword\">this</span>.singletonObjects.get(beanName);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (singletonObject == <span class=\"keyword\">null</span> &amp;&amp; isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.singletonObjects) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 在从early中取</span></span><br><span class=\"line\">\t\t\t\tsingletonObject = <span class=\"keyword\">this</span>.earlySingletonObjects.get(beanName);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (singletonObject == <span class=\"keyword\">null</span> &amp;&amp; allowEarlyReference) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 再从singleFactory中取</span></span><br><span class=\"line\">\t\t\t\t\tObjectFactory&lt;?&gt; singletonFactory = <span class=\"keyword\">this</span>.singletonFactories.get(beanName);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (singletonFactory != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tsingletonObject = singletonFactory.getObject();</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">this</span>.earlySingletonObjects.put(beanName, singletonObject);</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">this</span>.singletonFactories.remove(beanName);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> singletonObject;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">removeSingleton</span><span class=\"params\">(String beanName)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.singletonObjects) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.singletonObjects.remove(beanName);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.singletonFactories.remove(beanName);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.earlySingletonObjects.remove(beanName);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.registeredSingletons.remove(beanName);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">containsSingleton</span><span class=\"params\">(String beanName)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.singletonObjects.containsKey(beanName);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSingletonCurrentlyInCreation</span><span class=\"params\">(String beanName)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.singletonsCurrentlyInCreation.contains(beanName);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Callback before singleton creation.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeSingletonCreation</span><span class=\"params\">(String beanName)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.inCreationCheckExclusions.contains(beanName) &amp;&amp; !<span class=\"keyword\">this</span>.singletonsCurrentlyInCreation.add(beanName)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanCurrentlyInCreationException(beanName);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Callback after singleton creation.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">afterSingletonCreation</span><span class=\"params\">(String beanName)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.inCreationCheckExclusions.contains(beanName) &amp;&amp; !<span class=\"keyword\">this</span>.singletonsCurrentlyInCreation.remove(beanName)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Singleton '\"</span> + beanName + <span class=\"string\">\"' isn't currently in creation\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerDisposableBean</span><span class=\"params\">(String beanName, DisposableBean bean)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.disposableBeans) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.disposableBeans.put(beanName, bean);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroySingletons</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.trace(<span class=\"string\">\"Destroying singletons in \"</span> + <span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.singletonObjects) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.singletonsCurrentlyInDestruction = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString[] disposableBeanNames;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.disposableBeans) &#123;</span><br><span class=\"line\">\t\t\tdisposableBeanNames = StringUtils.toStringArray(<span class=\"keyword\">this</span>.disposableBeans.keySet());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = disposableBeanNames.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">\t\t\tdestroySingleton(disposableBeanNames[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.containedBeanMap.clear();</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.dependentBeanMap.clear();</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.dependenciesForBeanMap.clear();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tclearSingletonCache();</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>第一步，查看之前解析过没有。不管是之前放到early，singletonFactories中 都可以获取到。剩下的和Prototype基本差不多。</p>\n<p>第二步，从parent BeanFactory获取。</p>\n<p>第三步，标记创建中</p>\n<p>第四步，mergeBeanDefinition</p>\n<p>第五步，createBeanInstance</p>\n<p>除了createBean之外，还有一些singletonBean的特殊操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getSingleton</span><span class=\"params\">(String beanName, ObjectFactory&lt;?&gt; singletonFactory)</span> </span>&#123;</span><br><span class=\"line\">    Assert.notNull(beanName, <span class=\"string\">\"Bean name must not be null\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.singletonObjects) &#123;</span><br><span class=\"line\">        Object singletonObject = <span class=\"keyword\">this</span>.singletonObjects.get(beanName);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (singletonObject == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.singletonsCurrentlyInDestruction) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanCreationNotAllowedException(beanName,</span><br><span class=\"line\">                        <span class=\"string\">\"Singleton bean creation not allowed while singletons of this factory are in destruction \"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"(Do not request a bean from a BeanFactory in a destroy method implementation!)\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">                logger.debug(<span class=\"string\">\"Creating shared instance of singleton bean '\"</span> + beanName + <span class=\"string\">\"'\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 先回调 beforeCreate </span></span><br><span class=\"line\">            beforeSingletonCreation(beanName);</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> newSingleton = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> recordSuppressedExceptions = (<span class=\"keyword\">this</span>.suppressedExceptions == <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (recordSuppressedExceptions) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.suppressedExceptions = <span class=\"keyword\">new</span> LinkedHashSet&lt;&gt;();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// getObject 工厂方法 其实就是 createBean 方法</span></span><br><span class=\"line\">                singletonObject = singletonFactory.getObject();</span><br><span class=\"line\">                newSingleton = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> (IllegalStateException ex) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Has the singleton object implicitly appeared in the meantime -&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">// if yes, proceed with it since the exception indicates that state.</span></span><br><span class=\"line\">                singletonObject = <span class=\"keyword\">this</span>.singletonObjects.get(beanName);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (singletonObject == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> (BeanCreationException ex) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (recordSuppressedExceptions) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (Exception suppressedException : <span class=\"keyword\">this</span>.suppressedExceptions) &#123;</span><br><span class=\"line\">                        ex.addRelatedCause(suppressedException);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (recordSuppressedExceptions) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.suppressedExceptions = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 创建完成 回调 afterCreate</span></span><br><span class=\"line\">                afterSingletonCreation(beanName);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (newSingleton) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 最后添加到 cache中</span></span><br><span class=\"line\">                addSingleton(beanName, singletonObject);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> singletonObject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第六步，调用<code>getObjectForBeanInstance</code>，获取真正的实例对象。</p>\n<p><br></p>\n<hr>\n<h3 id=\"doCreateBean\"><a href=\"#doCreateBean\" class=\"headerlink\" title=\"doCreateBean\"></a>doCreateBean</h3><p>整个创建bean的过程 大致如下：</p>\n<ol>\n<li>给 <code>InstantiationAwareBeanPostProcessor</code> 接口最后的机会，在实例化之前修改bean。</li>\n<li>进入 doCreateBean</li>\n<li>创建对象实例</li>\n<li>给<code>MergedBeanDefinitionPostProcessor</code>接口修改 <code>RootBeanDefinition</code>的机会</li>\n<li>应用 BeanDefinition 中的 property<ol>\n<li>如果存在，回调接口 InstantiationAwareBeanPostProcessor 的方法 postProcessAfterInstantiation</li>\n<li>将PropertyValue中的 beanName beanClass 替换为 对应的 bean 实例</li>\n<li>如果存在，调用 接口 InstantiationAwareBeanPostProcessor 的方法 postProcessPropertyValues 对PropertyValues 应用修改</li>\n<li>最后将 PropertyValues 赋值给 bean 实例对象</li>\n</ol>\n</li>\n<li>调用初始化方法<ol>\n<li>如果该bean 实现了 aware 接口，则调用相应aware 接口的set方法</li>\n<li>BeanPostProcessor.postProcessBeforeInitialization</li>\n<li>如果实现了接口InitializingBean，则回调 afterPropertySet 方法</li>\n<li>调用 init 方法</li>\n<li>BeanPostProcessor.postProcessAfterInitialization</li>\n</ol>\n</li>\n</ol>\n<p><br></p>\n<p><code>doCreateBean</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">doCreateBean</span><span class=\"params\">(<span class=\"keyword\">final</span> String beanName, <span class=\"keyword\">final</span> RootBeanDefinition mbd, <span class=\"keyword\">final</span> @Nullable Object[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> BeanCreationException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Instantiate the bean.</span></span><br><span class=\"line\">    BeanWrapper instanceWrapper = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mbd.isSingleton()) &#123;</span><br><span class=\"line\">        instanceWrapper = <span class=\"keyword\">this</span>.factoryBeanInstanceCache.remove(beanName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (instanceWrapper == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//1. 根据不用的策略创建实例对象，如果没有指定策略，调用默认无参构造函数。</span></span><br><span class=\"line\">        <span class=\"comment\">// 另外 还向 wrapper中放入了 ConvertService CustomEditor 等对象，暂时不知道这是干嘛的。</span></span><br><span class=\"line\">        instanceWrapper = createBeanInstance(beanName, mbd, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Object bean = instanceWrapper.getWrappedInstance();</span><br><span class=\"line\">    Class&lt;?&gt; beanType = instanceWrapper.getWrappedClass();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (beanType != NullBean.class) &#123;</span><br><span class=\"line\">        mbd.resolvedTargetType = beanType;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Allow post-processors to modify the merged bean definition.</span></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (mbd.postProcessingLock) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!mbd.postProcessed) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 2. 给 MergedBeanDefinitionPostProcessor 接口 机会修改 RootBeanDefinition</span></span><br><span class=\"line\">                applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class=\"line\">                        <span class=\"string\">\"Post-processing of merged bean definition failed\"</span>, ex);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            mbd.postProcessed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Eagerly cache singletons to be able to resolve circular references</span></span><br><span class=\"line\">    <span class=\"comment\">// even when triggered by lifecycle interfaces like BeanFactoryAware.</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> earlySingletonExposure = (mbd.isSingleton() &amp;&amp; <span class=\"keyword\">this</span>.allowCircularReferences &amp;&amp;</span><br><span class=\"line\">            isSingletonCurrentlyInCreation(beanName));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (earlySingletonExposure) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">            logger.trace(<span class=\"string\">\"Eagerly caching bean '\"</span> + beanName +</span><br><span class=\"line\">                    <span class=\"string\">\"' to allow for resolving potential circular references\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        addSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, mbd, bean));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Initialize the bean instance.</span></span><br><span class=\"line\">    Object exposedObject = bean;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 应用 BeanDefinition 中的 property </span></span><br><span class=\"line\">        populateBean(beanName, mbd, instanceWrapper);</span><br><span class=\"line\">        <span class=\"comment\">// 调用初始化方法</span></span><br><span class=\"line\">        exposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ex <span class=\"keyword\">instanceof</span> BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException) ex).getBeanName())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> (BeanCreationException) ex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanCreationException(</span><br><span class=\"line\">                    mbd.getResourceDescription(), beanName, <span class=\"string\">\"Initialization of bean failed\"</span>, ex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (earlySingletonExposure) &#123;</span><br><span class=\"line\">        Object earlySingletonReference = getSingleton(beanName, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (earlySingletonReference != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (exposedObject == bean) &#123;</span><br><span class=\"line\">                exposedObject = earlySingletonReference;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.allowRawInjectionDespiteWrapping &amp;&amp; hasDependentBean(beanName)) &#123;</span><br><span class=\"line\">                String[] dependentBeans = getDependentBeans(beanName);</span><br><span class=\"line\">                Set&lt;String&gt; actualDependentBeans = <span class=\"keyword\">new</span> LinkedHashSet&lt;&gt;(dependentBeans.length);</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (String dependentBean : dependentBeans) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) &#123;</span><br><span class=\"line\">                        actualDependentBeans.add(dependentBean);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!actualDependentBeans.isEmpty()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanCurrentlyInCreationException(beanName,</span><br><span class=\"line\">                            <span class=\"string\">\"Bean with name '\"</span> + beanName + <span class=\"string\">\"' has been injected into other beans [\"</span> +</span><br><span class=\"line\">                            StringUtils.collectionToCommaDelimitedString(actualDependentBeans) +</span><br><span class=\"line\">                            <span class=\"string\">\"] in its raw version as part of a circular reference, but has eventually been \"</span> +</span><br><span class=\"line\">                            <span class=\"string\">\"wrapped. This means that said other beans do not use the final version of the \"</span> +</span><br><span class=\"line\">                            <span class=\"string\">\"bean. This is often the result of over-eager type matching - consider using \"</span> +</span><br><span class=\"line\">                            <span class=\"string\">\"'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example.\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Register bean as disposable.</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果需要在 BeanFactory destory 的时候 回调 destory 方法 则 注册</span></span><br><span class=\"line\">        registerDisposableBeanIfNecessary(beanName, bean, mbd);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanCreationException(</span><br><span class=\"line\">                mbd.getResourceDescription(), beanName, <span class=\"string\">\"Invalid destruction signature\"</span>, ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> exposedObject;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><code>populateBean</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">populateBean</span><span class=\"params\">(String beanName, RootBeanDefinition mbd, @Nullable BeanWrapper bw)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 回调接口 InstantiationAwareBeanPostProcessor 的方法 postProcessAfterInstantiation</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果发生了 修改 这里就直接返回 ，不会再给 bean 设置 BeanDefinition 中的 property</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bp <span class=\"keyword\">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class=\"line\">                InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!ibp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) &#123;</span><br><span class=\"line\">                    continueWithPropertyPopulation = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!continueWithPropertyPopulation) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取 property</span></span><br><span class=\"line\">    PropertyValues pvs = (mbd.hasPropertyValues() ? mbd.getPropertyValues() : <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果 property 中的 value 是 beanClass 或者 beanName，则需要先getBean，得到该bean实例，替换value中的 beanName 或 beanClass</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mbd.getResolvedAutowireMode() == AUTOWIRE_BY_NAME || mbd.getResolvedAutowireMode() == AUTOWIRE_BY_TYPE) &#123;</span><br><span class=\"line\">        MutablePropertyValues newPvs = <span class=\"keyword\">new</span> MutablePropertyValues(pvs);</span><br><span class=\"line\">        <span class=\"comment\">// Add property values based on autowire by name if applicable.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mbd.getResolvedAutowireMode() == AUTOWIRE_BY_NAME) &#123;</span><br><span class=\"line\">            autowireByName(beanName, mbd, bw, newPvs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Add property values based on autowire by type if applicable.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mbd.getResolvedAutowireMode() == AUTOWIRE_BY_TYPE) &#123;</span><br><span class=\"line\">            autowireByType(beanName, mbd, bw, newPvs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pvs = newPvs;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> hasInstAwareBpps = hasInstantiationAwareBeanPostProcessors();</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> needsDepCheck = (mbd.getDependencyCheck() != AbstractBeanDefinition.DEPENDENCY_CHECK_NONE);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调用 接口 InstantiationAwareBeanPostProcessor 的方法 postProcessPropertyValues 对PropertyValues 应用修改</span></span><br><span class=\"line\">    PropertyDescriptor[] filteredPds = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hasInstAwareBpps) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pvs == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            pvs = mbd.getPropertyValues();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bp <span class=\"keyword\">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class=\"line\">                InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;</span><br><span class=\"line\">                PropertyValues pvsToUse = ibp.postProcessProperties(pvs, bw.getWrappedInstance(), beanName);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (pvsToUse == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (filteredPds == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    pvsToUse = ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (pvsToUse == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                pvs = pvsToUse;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (needsDepCheck) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (filteredPds == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        checkDependencies(beanName, mbd, filteredPds, pvs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 最后将 PropertyValues  赋值给 bean 实例</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pvs != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        applyPropertyValues(beanName, mbd, bw, pvs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><code>initializeBean</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">initializeBean</span><span class=\"params\">(<span class=\"keyword\">final</span> String beanName, <span class=\"keyword\">final</span> Object bean, @Nullable RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (System.getSecurityManager() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class=\"line\">            invokeAwareMethods(beanName, bean);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;, getAccessControlContext());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果该bean 实现了 aware 接口，则调用相应aware 接口的set方法</span></span><br><span class=\"line\">        invokeAwareMethods(beanName, bean);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Object wrappedBean = bean;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mbd == <span class=\"keyword\">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// BeanPostProcessor.postProcessBeforeInitialization</span></span><br><span class=\"line\">        wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果实现了接口InitializingBean，则回调 afterPropertySet 方法</span></span><br><span class=\"line\">        <span class=\"comment\">// 调用init 方法</span></span><br><span class=\"line\">        invokeInitMethods(beanName, wrappedBean, mbd);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanCreationException(</span><br><span class=\"line\">                (mbd != <span class=\"keyword\">null</span> ? mbd.getResourceDescription() : <span class=\"keyword\">null</span>),</span><br><span class=\"line\">                beanName, <span class=\"string\">\"Invocation of init method failed\"</span>, ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mbd == <span class=\"keyword\">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// BeanPostProcessor.postProcessAfterInitialization</span></span><br><span class=\"line\">        wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrappedBean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p>其他的 doCreateBean 很多代码都没有分析，是这些代码主要在做一些 singleton 循环引用的处理。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"BeanDefinition-amp-createBean\"><a href=\"#BeanDefinition-amp-createBean\" class=\"headerlink\" title=\"BeanDefinition &amp; createBean\"></a>BeanDefinition &amp; createBean</h1><p>分析Bean在spring中解析后的定义BeanDefinition，以及createBean的过程</p>\n<p><br></p>\n<ul>\n<li><a href=\"#beandefinition--createbean\">BeanDefinition &amp; createBean</a><ul>\n<li><a href=\"#beandefinition\">BeanDefinition</a></li>\n<li><a href=\"#createbean\">createBean</a><ul>\n<li><a href=\"#prototype-类型的实例化\">Prototype 类型的实例化</a></li>\n<li><a href=\"#singleton-类型的实例化\">Singleton 类型的实例化</a></li>\n<li><a href=\"#docreatebean\">doCreateBean</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><br></p>\n<p>测试的代码如下：</p>\n<p>main</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ClassPathResource resource = <span class=\"keyword\">new</span> ClassPathResource(<span class=\"string\">\"beans.xml\"</span>);</span><br><span class=\"line\">        DefaultListableBeanFactory beanFactory = <span class=\"keyword\">new</span> DefaultListableBeanFactory();</span><br><span class=\"line\">        XmlBeanDefinitionReader reader = <span class=\"keyword\">new</span> XmlBeanDefinitionReader(beanFactory);</span><br><span class=\"line\">        reader.loadBeanDefinitions(resource);</span><br><span class=\"line\">        Student myBean = beanFactory.getBean(<span class=\"string\">\"myBean\"</span>, Student.class);</span><br><span class=\"line\">        System.out.println(myBean.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p>pom.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.wyj.alipay<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hello-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring.version</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">spring.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">jdk.version</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">jdk.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-framework-bom<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.1.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-beans<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.16.22<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p>beans.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myBean\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.wyj.alipay.spring.bean.Student\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"zhangsan\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"16\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"BeanDefinition\"><a href=\"#BeanDefinition\" class=\"headerlink\" title=\"BeanDefinition\"></a>BeanDefinition</h2><p>在上一篇分析基本容器的时候，解析配置文件，扫描Bean，找到Bean的定义 – <code>BeanDefinition</code>是在<code>DefaultBeanDefinitionDocumentReader</code>中完成的。</p>\n<p>扫描我们的bean的配置文件，拿到配置文件的解析结果<code>Element</code>对象，并根据不同的标签类型使用不同的方法解析，基本代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 循环遍历解析 每一个 node</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">parseBeanDefinitions</span><span class=\"params\">(Element root, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (delegate.isDefaultNamespace(root)) &#123;</span><br><span class=\"line\">        NodeList nl = root.getChildNodes();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class=\"line\">            Node node = nl.item(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node <span class=\"keyword\">instanceof</span> Element) &#123;</span><br><span class=\"line\">                Element ele = (Element) node;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (delegate.isDefaultNamespace(ele)) &#123;</span><br><span class=\"line\">                    parseDefaultElement(ele, delegate);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    delegate.parseCustomElement(ele);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        delegate.parseCustomElement(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">parseDefaultElement</span><span class=\"params\">(Element ele, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (delegate.nodeNameEquals(ele, IMPORT_ELEMENT)) &#123;</span><br><span class=\"line\">        importBeanDefinitionResource(ele);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (delegate.nodeNameEquals(ele, ALIAS_ELEMENT)) &#123;</span><br><span class=\"line\">        processAliasRegistration(ele);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (delegate.nodeNameEquals(ele, BEAN_ELEMENT)) &#123;</span><br><span class=\"line\">        processBeanDefinition(ele, delegate);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (delegate.nodeNameEquals(ele, NESTED_BEANS_ELEMENT)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// recurse</span></span><br><span class=\"line\">        doRegisterBeanDefinitions(ele);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>剩下的任务就是解析每一个扫描xml文件中得出的<code>Element</code>标签，并将<code>Element</code>对象转换为bean的定义对象<code>BeanDefinition</code>。而这些任务在Spring的架构中都是委托给<code>BeanDefinitionParserDelegate</code>实现的，该类是专门负责将<code>Element</code>xml标签对象，转换为相应的<code>BeanDefinition</code>对象。</p>\n<p>下面我们先看下<code>BeanDefinitionParserDelegate</code>的初始化过程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DefaultBeanDefinitionDocumentReader 中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> BeanDefinitionParserDelegate <span class=\"title\">createDelegate</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        XmlReaderContext readerContext, Element root, @Nullable BeanDefinitionParserDelegate parentDelegate)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    BeanDefinitionParserDelegate delegate = <span class=\"keyword\">new</span> BeanDefinitionParserDelegate(readerContext);</span><br><span class=\"line\">    delegate.initDefaults(root, parentDelegate);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> delegate;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// BeanDefinitionParserDelegate</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BeanDefinitionParserDelegate</span><span class=\"params\">(XmlReaderContext readerContext)</span> </span>&#123;</span><br><span class=\"line\">    Assert.notNull(readerContext, <span class=\"string\">\"XmlReaderContext must not be null\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.readerContext = readerContext;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * populateDefaults 的任务就是扫描根标签beans有没有对所有bean的默认配置。Initialize the default lazy-init, autowire,</span></span><br><span class=\"line\"><span class=\"comment\"> * dependency check settings,init-method, destroy-method and merge settings。</span></span><br><span class=\"line\"><span class=\"comment\"> * fireDefaultsRegistered 就是会掉readerContext中对reader各种事件的监听。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initDefaults</span><span class=\"params\">(Element root, @Nullable BeanDefinitionParserDelegate parent)</span> </span>&#123;</span><br><span class=\"line\">    populateDefaults(<span class=\"keyword\">this</span>.defaults, (parent != <span class=\"keyword\">null</span> ? parent.defaults : <span class=\"keyword\">null</span>), root);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.readerContext.fireDefaultsRegistered(<span class=\"keyword\">this</span>.defaults);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后，我们再来认识下<code>ReaderContext</code>。一般使用的是他的子类<code>XmlReaderContext</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * reading bean definition process(过程) 的 context，封装了所有的相关配置和状态。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReaderContext</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 源文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Resource resource;</span><br><span class=\"line\">    <span class=\"comment\">// 解析过程中如果出现问题，向汇报器汇报</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ProblemReporter problemReporter;</span><br><span class=\"line\">    <span class=\"comment\">// reader过程的监听器，默认实现是 EmptyReaderEventListener 每个方法都是空实现。</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ReaderEventListener eventListener;</span><br><span class=\"line\">    <span class=\"comment\">// 就是上文说的从跟标签 beans 中解析出来的一些属性的默认配置</span></span><br><span class=\"line\">    <span class=\"comment\">// 如 lazy-init, autowire, dependency check settings,init-method, destroy-method</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> SourceExtractor sourceExtractor;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在Spring中，像使用<code>ReaderContext</code>这种环境类特别多，这种设计模式应该细细品味，好好体会，有时间了还应该专门写一篇日志分析记录一下。</p>\n</blockquote>\n<p>好，到这里，基础工作做好了之后，下面开始真正的解析。</p>\n<hr>\n<p>首先看看解析bean标签的过程。<code>processBeanDefinition</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">processBeanDefinition</span><span class=\"params\">(Element ele, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1. 解析标签，将标签转换为 BeanDefinition 并用 BeanDefinitionHolder 连同beanName，aliasArray一并封装起来。</span></span><br><span class=\"line\">    BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bdHolder != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 2. 还要对子标签下的自定义属性调用decorateBeanDefinitionIfRequired方法进行解析，这回是自定义属性</span></span><br><span class=\"line\">        bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Register the final decorated instance.</span></span><br><span class=\"line\">            <span class=\"comment\">// 3. 注册</span></span><br><span class=\"line\">            BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class=\"line\">            getReaderContext().error(<span class=\"string\">\"Failed to register bean definition with name '\"</span> +</span><br><span class=\"line\">                    bdHolder.getBeanName() + <span class=\"string\">\"'\"</span>, ele, ex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Send registration event.</span></span><br><span class=\"line\">        <span class=\"comment\">//4. 触发监听器，通知监听器的相关方法</span></span><br><span class=\"line\">        getReaderContext().fireComponentRegistered(<span class=\"keyword\">new</span> BeanComponentDefinition(bdHolder));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第一步：解析标签，完成Element 到 BeanDefinition 的转换。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 该方法 先取出  beanName，看是否已经注册过。有的话，抛出异常。</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果没有，才调用 parseBeanDefinitionElement 真正的去解析node中的每一个元素。</span></span><br><span class=\"line\"><span class=\"comment\"> * 解析完成之后，将 beanDefinition, beanName, aliasesArray 一起封装到 BeanDefinitionHolder中返回。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> BeanDefinitionHolder <span class=\"title\">parseBeanDefinitionElement</span><span class=\"params\">(Element ele, @Nullable BeanDefinition containingBean)</span> </span>&#123;</span><br><span class=\"line\">    String id = ele.getAttribute(ID_ATTRIBUTE);</span><br><span class=\"line\">    String nameAttr = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;String&gt; aliases = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StringUtils.hasLength(nameAttr)) &#123;</span><br><span class=\"line\">        String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span><br><span class=\"line\">        aliases.addAll(Arrays.asList(nameArr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    String beanName = id;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!StringUtils.hasText(beanName) &amp;&amp; !aliases.isEmpty()) &#123;</span><br><span class=\"line\">        beanName = aliases.remove(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">            logger.trace(<span class=\"string\">\"No XML 'id' specified - using '\"</span> + beanName +</span><br><span class=\"line\">                    <span class=\"string\">\"' as bean name and \"</span> + aliases + <span class=\"string\">\" as aliases\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (containingBean == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        checkNameUniqueness(beanName, aliases, ele);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (beanDefinition != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.hasText(beanName)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (containingBean != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    beanName = BeanDefinitionReaderUtils.generateBeanName(</span><br><span class=\"line\">                            beanDefinition, <span class=\"keyword\">this</span>.readerContext.getRegistry(), <span class=\"keyword\">true</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    beanName = <span class=\"keyword\">this</span>.readerContext.generateBeanName(beanDefinition);</span><br><span class=\"line\">                    <span class=\"comment\">// Register an alias for the plain bean class name, if still possible,</span></span><br><span class=\"line\">                    <span class=\"comment\">// if the generator returned the class name plus a suffix.</span></span><br><span class=\"line\">                    <span class=\"comment\">// This is expected for Spring 1.2/2.0 backwards compatibility.</span></span><br><span class=\"line\">                    String beanClassName = beanDefinition.getBeanClassName();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (beanClassName != <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">                            beanName.startsWith(beanClassName) &amp;&amp; beanName.length() &gt; beanClassName.length() &amp;&amp;</span><br><span class=\"line\">                            !<span class=\"keyword\">this</span>.readerContext.getRegistry().isBeanNameInUse(beanClassName)) &#123;</span><br><span class=\"line\">                        aliases.add(beanClassName);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">                    logger.trace(<span class=\"string\">\"Neither XML 'id' nor 'name' specified - \"</span> +</span><br><span class=\"line\">                            <span class=\"string\">\"using generated bean name [\"</span> + beanName + <span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">                error(ex.getMessage(), ele);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String[] aliasesArray = StringUtils.toStringArray(aliases);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BeanDefinitionHolder(beanDefinition, beanName, aliasesArray);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 真正的解析Element标签中每一个元素、子标签，并将结果封装到BeanDefinition中</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> AbstractBeanDefinition <span class=\"title\">parseBeanDefinitionElement</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        Element ele, String beanName, @Nullable BeanDefinition containingBean)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这里 使用了一个栈将解析的标签栈也就是当前解析的状态全部都保存了起来。</span></span><br><span class=\"line\">    <span class=\"comment\">// 比如说，当前解析到哪个标签了，（因为一个bean下面会有很多的子标签），当前是哪个bean</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.parseState.push(<span class=\"keyword\">new</span> BeanEntry(beanName));</span><br><span class=\"line\"></span><br><span class=\"line\">    String className = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ele.hasAttribute(CLASS_ATTRIBUTE)) &#123;</span><br><span class=\"line\">        className = ele.getAttribute(CLASS_ATTRIBUTE).trim();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    String parent = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ele.hasAttribute(PARENT_ATTRIBUTE)) &#123;</span><br><span class=\"line\">        parent = ele.getAttribute(PARENT_ATTRIBUTE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        AbstractBeanDefinition bd = createBeanDefinition(className, parent);</span><br><span class=\"line\"></span><br><span class=\"line\">        parseBeanDefinitionAttributes(ele, beanName, containingBean, bd);</span><br><span class=\"line\">        bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT));</span><br><span class=\"line\"></span><br><span class=\"line\">        parseMetaElements(ele, bd);</span><br><span class=\"line\">        parseLookupOverrideSubElements(ele, bd.getMethodOverrides());</span><br><span class=\"line\">        parseReplacedMethodSubElements(ele, bd.getMethodOverrides());</span><br><span class=\"line\"></span><br><span class=\"line\">        parseConstructorArgElements(ele, bd);</span><br><span class=\"line\">        parsePropertyElements(ele, bd);</span><br><span class=\"line\">        parseQualifierElements(ele, bd);</span><br><span class=\"line\"></span><br><span class=\"line\">        bd.setResource(<span class=\"keyword\">this</span>.readerContext.getResource());</span><br><span class=\"line\">        bd.setSource(extractSource(ele));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> bd;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (...) &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.parseState.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p>第二步，就是根据扫描一下自定义属性什么的，看源码，就是根据命名空间这些，去找相应标签的相应属性有没有被定义等等。</p>\n<p><br></p>\n<p>第三步，注册到Registry，也就是我们的BeanFactory</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// BeanDefinitionReaderUtils</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">registerBeanDefinition</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Register bean definition under primary name.</span></span><br><span class=\"line\">    String beanName = definitionHolder.getBeanName();</span><br><span class=\"line\">    <span class=\"comment\">// 注册 beanName 和 BeanDefinition</span></span><br><span class=\"line\">    registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Register aliases for bean name, if any.</span></span><br><span class=\"line\">    <span class=\"comment\">// 注册 beanName对应的 alias</span></span><br><span class=\"line\">    String[] aliases = definitionHolder.getAliases();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (aliases != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String alias : aliases) &#123;</span><br><span class=\"line\">            registry.registerAlias(beanName, alias);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerBeanDefinition</span><span class=\"params\">(String beanName, BeanDefinition beanDefinition)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    BeanDefinition existingDefinition = <span class=\"keyword\">this</span>.beanDefinitionMap.get(beanName);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (existingDefinition != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 根据设置 是否允许同名 覆盖，不允许 抛出异常，允许 根据相应规则处理</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果已经开始创建，使用同步（可能创建开始会有多个线程访问 beanDefinitionMap）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hasBeanCreationStarted()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Cannot modify startup-time collection elements anymore (for stable iteration)</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.beanDefinitionMap) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class=\"line\">                List&lt;String&gt; updatedDefinitions = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"keyword\">this</span>.beanDefinitionNames.size() + <span class=\"number\">1</span>);</span><br><span class=\"line\">                updatedDefinitions.addAll(<span class=\"keyword\">this</span>.beanDefinitionNames);</span><br><span class=\"line\">                updatedDefinitions.add(beanName);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.beanDefinitionNames = updatedDefinitions;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.manualSingletonNames.contains(beanName)) &#123;</span><br><span class=\"line\">                    Set&lt;String&gt; updatedSingletons = <span class=\"keyword\">new</span> LinkedHashSet&lt;&gt;(<span class=\"keyword\">this</span>.manualSingletonNames);</span><br><span class=\"line\">                    updatedSingletons.remove(beanName);</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.manualSingletonNames = updatedSingletons;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Still in startup registration phase</span></span><br><span class=\"line\">            <span class=\"comment\">// 如果还是 startup 阶段，直接更新相应的数据</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.beanDefinitionNames.add(beanName);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.manualSingletonNames.remove(beanName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.frozenBeanDefinitionNames = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (existingDefinition != <span class=\"keyword\">null</span> || containsSingleton(beanName)) &#123;</span><br><span class=\"line\">        resetBeanDefinition(beanName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断是否开始创建 仅仅是判断 alreadyCreated set是否为空</span></span><br><span class=\"line\"><span class=\"comment\">// alreadyCreated 在之后的 bean的创建中还会再次接触到，当 bean创建完了之后，会放在该set中保存。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasBeanCreationStarted</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !<span class=\"keyword\">this</span>.alreadyCreated.isEmpty();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 之后注册 别名 也比较简单。</span></span><br></pre></td></tr></table></figure>\n<p>到这里为止，根root下的所有bean element都以<code>BeanDefinition</code>的形式保存在了<code>BeanFactory</code>中。</p>\n<p>其他类型的基本标签和这个过程都是类似的，比<code>bean</code>标签简单，而且最后都要回归到bean标签。</p>\n<p><br></p>\n<hr>\n<h2 id=\"createBean\"><a href=\"#createBean\" class=\"headerlink\" title=\"createBean\"></a>createBean</h2><p>现在，所有的bean都以<code>BeanDefinition</code>的格式保存在<code>BeanFactory</code>中。当调用类似<code>getBean</code>方法的时候就会实例化该bean。</p>\n<p>这是我们的入口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student myBean = beanFactory.getBean(<span class=\"string\">\"myBean\"</span>, Student.class);</span><br></pre></td></tr></table></figure>\n<p>到最后都是执行的<code>AbstractBeanFactory.doCetBean</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">doGetBean</span><span class=\"params\">(<span class=\"keyword\">final</span> String name, @Nullable <span class=\"keyword\">final</span> Class&lt;T&gt; requiredType,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        @Nullable <span class=\"keyword\">final</span> Object[] args, <span class=\"keyword\">boolean</span> typeCheckOnly)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> String beanName = transformedBeanName(name);</span><br><span class=\"line\">    Object bean;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Eagerly check singleton cache for manually registered singletone.</span></span><br><span class=\"line\">    <span class=\"comment\">// 1. 首先 会从singleton缓存中获取</span></span><br><span class=\"line\">    Object sharedInstance = getSingleton(beanName);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sharedInstance != <span class=\"keyword\">null</span> &amp;&amp; args == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class=\"line\">                logger.trace(<span class=\"string\">\"Returning eagerly cached instance of singleton bean '\"</span> + beanName +</span><br><span class=\"line\">                        <span class=\"string\">\"' that is not fully initialized yet - a consequence of a circular reference\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                logger.trace(<span class=\"string\">\"Returning cached instance of singleton bean '\"</span> + beanName + <span class=\"string\">\"'\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        bean = getObjectForBeanInstance(sharedInstance, name, beanName, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Fail if we're already creating this bean instance:</span></span><br><span class=\"line\">        <span class=\"comment\">// We're assumably within a circular reference.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isPrototypeCurrentlyInCreation(beanName)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanCurrentlyInCreationException(beanName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 2. 如果当前singleton中没有，则看看 parentBeanFactory</span></span><br><span class=\"line\">        <span class=\"comment\">// Check if bean definition exists in this factory.</span></span><br><span class=\"line\">        BeanFactory parentBeanFactory = getParentBeanFactory();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (parentBeanFactory != <span class=\"keyword\">null</span> &amp;&amp; !containsBeanDefinition(beanName)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Not found -&gt; check parent.</span></span><br><span class=\"line\">            String nameToLookup = originalBeanName(name);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (parentBeanFactory <span class=\"keyword\">instanceof</span> AbstractBeanFactory) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ((AbstractBeanFactory) parentBeanFactory).doGetBean(</span><br><span class=\"line\">                        nameToLookup, requiredType, args, typeCheckOnly);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (args != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Delegation to parent with explicit args.</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> (T) parentBeanFactory.getBean(nameToLookup, args);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (requiredType != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// No args -&gt; delegate to standard getBean method.</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> parentBeanFactory.getBean(nameToLookup, requiredType);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> (T) parentBeanFactory.getBean(nameToLookup);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3. 如果还没有，如果本次操作不是 仅仅判断类型 则由当前的beanFactory完成创建该bean。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!typeCheckOnly) &#123;</span><br><span class=\"line\">            markBeanAsCreated(beanName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 3.1 merge BeanDefinition</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class=\"line\">            checkMergedBeanDefinition(mbd, beanName, args);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 3.2 创建依赖</span></span><br><span class=\"line\">            <span class=\"comment\">// Guarantee initialization of beans that the current bean depends on.</span></span><br><span class=\"line\">            String[] dependsOn = mbd.getDependsOn();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dependsOn != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (String dep : dependsOn) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (isDependent(beanName, dep)) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class=\"line\">                                <span class=\"string\">\"Circular depends-on relationship between '\"</span> + beanName + <span class=\"string\">\"' and '\"</span> + dep + <span class=\"string\">\"'\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    registerDependentBean(dep, beanName);</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        getBean(dep);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class=\"line\">                                <span class=\"string\">\"'\"</span> + beanName + <span class=\"string\">\"' depends on missing bean '\"</span> + dep + <span class=\"string\">\"'\"</span>, ex);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Create bean instance.</span></span><br><span class=\"line\">            <span class=\"comment\">// 3.3 根据不同的 Scope 创建不同的Bean</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mbd.isSingleton()) &#123;</span><br><span class=\"line\">                sharedInstance = getSingleton(beanName, () -&gt; &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> createBean(beanName, mbd, args);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">catch</span> (BeansException ex) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// Explicitly remove instance from singleton cache: It might have been put there</span></span><br><span class=\"line\">                        <span class=\"comment\">// eagerly by the creation process, to allow for circular reference resolution.</span></span><br><span class=\"line\">                        <span class=\"comment\">// Also remove any beans that received a temporary reference to the bean.</span></span><br><span class=\"line\">                        destroySingleton(beanName);</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mbd.isPrototype()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// It's a prototype -&gt; create a new instance.</span></span><br><span class=\"line\">                Object prototypeInstance = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    beforePrototypeCreation(beanName);</span><br><span class=\"line\">                    prototypeInstance = createBean(beanName, mbd, args);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    afterPrototypeCreation(beanName);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                String scopeName = mbd.getScope();</span><br><span class=\"line\">                <span class=\"keyword\">final</span> Scope scope = <span class=\"keyword\">this</span>.scopes.get(scopeName);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (scope == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"No Scope registered for scope name '\"</span> + scopeName + <span class=\"string\">\"'\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Object scopedInstance = scope.get(beanName, () -&gt; &#123;</span><br><span class=\"line\">                        beforePrototypeCreation(beanName);</span><br><span class=\"line\">                        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> createBean(beanName, mbd, args);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                            afterPrototypeCreation(beanName);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                    bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">catch</span> (IllegalStateException ex) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanCreationException(beanName,</span><br><span class=\"line\">                            <span class=\"string\">\"Scope '\"</span> + scopeName + <span class=\"string\">\"' is not active for the current thread; consider \"</span> +</span><br><span class=\"line\">                            <span class=\"string\">\"defining a scoped proxy for this bean if you intend to refer to it from a singleton\"</span>,</span><br><span class=\"line\">                            ex);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (BeansException ex) &#123;</span><br><span class=\"line\">            cleanupAfterBeanCreationFailure(beanName);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Check if required type matches the type of the actual bean instance.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (requiredType != <span class=\"keyword\">null</span> &amp;&amp; !requiredType.isInstance(bean)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            T convertedBean = getTypeConverter().convertIfNecessary(bean, requiredType);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (convertedBean == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> convertedBean;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (TypeMismatchException ex) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">                logger.trace(<span class=\"string\">\"Failed to convert bean '\"</span> + name + <span class=\"string\">\"' to required type '\"</span> +</span><br><span class=\"line\">                        ClassUtils.getQualifiedName(requiredType) + <span class=\"string\">\"'\"</span>, ex);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (T) bean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>整个getBean的流程都包含在上面的函数中，总体应该分为两大类来讨论，一个是<code>singleton</code>，一个是普通类<code>Prototype</code></strong></p>\n<p><br></p>\n<hr>\n<h3 id=\"Prototype-类型的实例化\"><a href=\"#Prototype-类型的实例化\" class=\"headerlink\" title=\"Prototype 类型的实例化\"></a>Prototype 类型的实例化</h3><p>首先，分析普通类型的实例化。 每次<code>getBean</code> 都需要 调用<code>createBean</code>,整个逻辑也比较简单。</p>\n<p>在之前，先了解一下整个过程涉及到的几个变量。他们都在<code>AbstractBeanFactory</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractBeanFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">FactoryBeanRegistrySupport</span> <span class=\"keyword\">implements</span> <span class=\"title\">ConfigurableBeanFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** Map from bean name to merged RootBeanDefinition. */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, RootBeanDefinition&gt; mergedBeanDefinitions = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;(<span class=\"number\">256</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** Names of beans that have already been created at least once. */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Set&lt;String&gt; alreadyCreated = Collections.newSetFromMap(<span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;(<span class=\"number\">256</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** Names of beans that are currently in creation. */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ThreadLocal&lt;Object&gt; prototypesCurrentlyInCreation =</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> NamedThreadLocal&lt;&gt;(<span class=\"string\">\"Prototype beans currently in creation\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Mark the specified bean as already created (or about to be created).</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;This allows the bean factory to optimize its caching for repeated</span></span><br><span class=\"line\"><span class=\"comment\">\t * creation of the specified bean.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> beanName the name of the bean</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">markBeanAsCreated</span><span class=\"params\">(String beanName)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.alreadyCreated.contains(beanName)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.mergedBeanDefinitions) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.alreadyCreated.contains(beanName)) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// Let the bean definition get re-merged now that we're actually creating</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// the bean... just in case some of its metadata changed in the meantime.</span></span><br><span class=\"line\">\t\t\t\t\tclearMergedBeanDefinition(beanName);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">this</span>.alreadyCreated.add(beanName);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasBeanCreationStarted</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> !<span class=\"keyword\">this</span>.alreadyCreated.isEmpty();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return whether the specified prototype bean is currently in creation</span></span><br><span class=\"line\"><span class=\"comment\">\t * (within the current thread).</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> beanName the name of the bean</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPrototypeCurrentlyInCreation</span><span class=\"params\">(String beanName)</span> </span>&#123;</span><br><span class=\"line\">\t\tObject curVal = <span class=\"keyword\">this</span>.prototypesCurrentlyInCreation.get();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (curVal != <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">\t\t\t\t(curVal.equals(beanName) || (curVal <span class=\"keyword\">instanceof</span> Set &amp;&amp; ((Set&lt;?&gt;) curVal).contains(beanName))));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Callback before prototype creation.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;The default implementation register the prototype as currently in creation.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> beanName the name of the prototype about to be created</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@see</span> #isPrototypeCurrentlyInCreation</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">beforePrototypeCreation</span><span class=\"params\">(String beanName)</span> </span>&#123;</span><br><span class=\"line\">\t\tObject curVal = <span class=\"keyword\">this</span>.prototypesCurrentlyInCreation.get();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (curVal == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.prototypesCurrentlyInCreation.set(beanName);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (curVal <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">\t\t\tSet&lt;String&gt; beanNameSet = <span class=\"keyword\">new</span> HashSet&lt;&gt;(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t\tbeanNameSet.add((String) curVal);</span><br><span class=\"line\">\t\t\tbeanNameSet.add(beanName);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.prototypesCurrentlyInCreation.set(beanNameSet);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSet&lt;String&gt; beanNameSet = (Set&lt;String&gt;) curVal;</span><br><span class=\"line\">\t\t\tbeanNameSet.add(beanName);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Callback after prototype creation.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;The default implementation marks the prototype as not in creation anymore.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> beanName the name of the prototype that has been created</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@see</span> #isPrototypeCurrentlyInCreation</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">afterPrototypeCreation</span><span class=\"params\">(String beanName)</span> </span>&#123;</span><br><span class=\"line\">\t\tObject curVal = <span class=\"keyword\">this</span>.prototypesCurrentlyInCreation.get();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (curVal <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.prototypesCurrentlyInCreation.remove();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (curVal <span class=\"keyword\">instanceof</span> Set) &#123;</span><br><span class=\"line\">\t\t\tSet&lt;String&gt; beanNameSet = (Set&lt;String&gt;) curVal;</span><br><span class=\"line\">\t\t\tbeanNameSet.remove(beanName);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (beanNameSet.isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.prototypesCurrentlyInCreation.remove();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>mergedBeanDefinitions</code> 每个bean在创建之前都需要将普通的<code>BeanDefinition</code>转换为<code>RootBeanDefinition</code>也就是该成员变量中存储的对象。 而且，他也作为创建对象过程中的同步锁，</li>\n<li><code>alreadyCreated</code> 每个第一次创建的对象的 beanName都会被保存到该成员变量中。也是用来标志创建过程是否开始，某个bean是否开始创建</li>\n<li><code>prototypesCurrentlyInCreation</code> 主要是针对<code>Prototype</code>（普通）类型的bean。因为可能被同时多个线程创建，所以保存在ThreadLocal`中.<br><br></li>\n</ul>\n<p>下面我们看 整个bean的创建过程：</p>\n<p>第一步，检测是否仅仅是来检查类型的，如果不是，那就是来创建对象的，就将该对象标记被在创建中。<code>markAsCreated()</code>代码上面已经给出了。</p>\n<p>第二步，<code>getMergedLocalBeanDefinition</code>。整个merge的过程就是将 父BeanDefinition合并到子BeanDefinition中。整个过程的细节以及几个BeanDefinition关系可以查看<a href=\"https://blog.csdn.net/disiwei1012/article/details/77142167\" target=\"_blank\" rel=\"noopener\">bean的parent属性详解和获取RootBeanDefinition</a>。该步骤会设置默认scope为singleton</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> RootBeanDefinition <span class=\"title\">getMergedLocalBeanDefinition</span><span class=\"params\">(String beanName)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Quick check on the concurrent map first, with minimal locking.</span></span><br><span class=\"line\">    RootBeanDefinition mbd = <span class=\"keyword\">this</span>.mergedBeanDefinitions.get(beanName);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mbd != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mbd;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getMergedBeanDefinition(beanName, getBeanDefinition(beanName), <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> RootBeanDefinition <span class=\"title\">getMergedBeanDefinition</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        String beanName, BeanDefinition bd, @Nullable BeanDefinition containingBd)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> BeanDefinitionStoreException</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.mergedBeanDefinitions) &#123;</span><br><span class=\"line\">        RootBeanDefinition mbd = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Check with full lock now in order to enforce the same merged instance.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (containingBd == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            mbd = <span class=\"keyword\">this</span>.mergedBeanDefinitions.get(beanName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mbd == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bd.getParentName() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Use copy of given root bean definition.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (bd <span class=\"keyword\">instanceof</span> RootBeanDefinition) &#123;</span><br><span class=\"line\">                    mbd = ((RootBeanDefinition) bd).cloneBeanDefinition();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    mbd = <span class=\"keyword\">new</span> RootBeanDefinition(bd);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Child bean definition: needs to be merged with parent.</span></span><br><span class=\"line\">                BeanDefinition pbd;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    String parentBeanName = transformedBeanName(bd.getParentName());</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!beanName.equals(parentBeanName)) &#123;</span><br><span class=\"line\">                        pbd = getMergedBeanDefinition(parentBeanName);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        BeanFactory parent = getParentBeanFactory();</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (parent <span class=\"keyword\">instanceof</span> ConfigurableBeanFactory) &#123;</span><br><span class=\"line\">                            pbd = ((ConfigurableBeanFactory) parent).getMergedBeanDefinition(parentBeanName);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchBeanDefinitionException(parentBeanName,</span><br><span class=\"line\">                                    <span class=\"string\">\"Parent name '\"</span> + parentBeanName + <span class=\"string\">\"' is equal to bean name '\"</span> + beanName +</span><br><span class=\"line\">                                    <span class=\"string\">\"': cannot be resolved without an AbstractBeanFactory parent\"</span>);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanDefinitionStoreException(bd.getResourceDescription(), beanName,</span><br><span class=\"line\">                            <span class=\"string\">\"Could not resolve parent bean definition '\"</span> + bd.getParentName() + <span class=\"string\">\"'\"</span>, ex);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// Deep copy with overridden values.</span></span><br><span class=\"line\">                mbd = <span class=\"keyword\">new</span> RootBeanDefinition(pbd);</span><br><span class=\"line\">                mbd.overrideFrom(bd);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Set default singleton scope, if not configured before.</span></span><br><span class=\"line\">            <span class=\"comment\">// 设置默认的scope -- singleton</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!StringUtils.hasLength(mbd.getScope())) &#123;</span><br><span class=\"line\">                mbd.setScope(RootBeanDefinition.SCOPE_SINGLETON);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// A bean contained in a non-singleton bean cannot be a singleton itself.</span></span><br><span class=\"line\">            <span class=\"comment\">// Let's correct this on the fly here, since this might be the result of</span></span><br><span class=\"line\">            <span class=\"comment\">// parent-child merging for the outer bean, in which case the original inner bean</span></span><br><span class=\"line\">            <span class=\"comment\">// definition will not have inherited the merged outer bean's singleton status.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (containingBd != <span class=\"keyword\">null</span> &amp;&amp; !containingBd.isSingleton() &amp;&amp; mbd.isSingleton()) &#123;</span><br><span class=\"line\">                mbd.setScope(containingBd.getScope());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Cache the merged bean definition for the time being</span></span><br><span class=\"line\">            <span class=\"comment\">// (it might still get re-merged later on in order to pick up metadata changes)</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (containingBd == <span class=\"keyword\">null</span> &amp;&amp; isCacheBeanMetadata()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.mergedBeanDefinitions.put(beanName, mbd);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> mbd;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第三步，获取依赖。就是检测BeanDefinition中dependOn属性，get所有dependOn的bean。</p>\n<p>第四步，创建实例。</p>\n<p>第五步，调用<code>getObjectForBeanInstance</code>，获取真正的实例对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">getObjectForBeanInstance</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        Object beanInstance, String name, String beanName, @Nullable RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判空</span></span><br><span class=\"line\">    <span class=\"comment\">// Don't let calling code try to dereference the factory if the bean isn't a factory.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (BeanFactoryUtils.isFactoryDereference(name)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (beanInstance <span class=\"keyword\">instanceof</span> NullBean) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> beanInstance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(beanInstance <span class=\"keyword\">instanceof</span> FactoryBean)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanIsNotAFactoryException(transformedBeanName(name), beanInstance.getClass());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Now we have the bean instance, which may be a normal bean or a FactoryBean.</span></span><br><span class=\"line\">    <span class=\"comment\">// If it's a FactoryBean, we use it to create a bean instance, unless the</span></span><br><span class=\"line\">    <span class=\"comment\">// caller actually wants a reference to the factory.</span></span><br><span class=\"line\">    <span class=\"comment\">// 这时已经持有了对象，如果不是FactoryBean 直接返回，如果用户想获取的就是FactoryBean 也直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(beanInstance <span class=\"keyword\">instanceof</span> FactoryBean) || BeanFactoryUtils.isFactoryDereference(name)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> beanInstance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 说明这是一个FactoryBean，并且想获取其中的bean</span></span><br><span class=\"line\">    Object object = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mbd == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        object = getCachedObjectForFactoryBean(beanName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Return bean instance from factory.</span></span><br><span class=\"line\">        FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) beanInstance;</span><br><span class=\"line\">        <span class=\"comment\">// Caches object obtained from FactoryBean if it is a singleton.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mbd == <span class=\"keyword\">null</span> &amp;&amp; containsBeanDefinition(beanName)) &#123;</span><br><span class=\"line\">            mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> synthetic = (mbd != <span class=\"keyword\">null</span> &amp;&amp; mbd.isSynthetic());</span><br><span class=\"line\">        object = getObjectFromFactoryBean(factory, beanName, !synthetic);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<hr>\n<h3 id=\"Singleton-类型的实例化\"><a href=\"#Singleton-类型的实例化\" class=\"headerlink\" title=\"Singleton 类型的实例化\"></a>Singleton 类型的实例化</h3><p>用来操作Singleton相关实例的类是<code>DefaultSingletonBeanRegistry</code>，首先，先来好好了解下该类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DefaultSingletonBeanRegistry</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleAliasRegistry</span> <span class=\"keyword\">implements</span> <span class=\"title\">SingletonBeanRegistry</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** Cache of singleton objects: bean name to bean instance. */</span></span><br><span class=\"line\">    <span class=\"comment\">// 也作为一些需要同步操作的锁</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, Object&gt; singletonObjects = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;(<span class=\"number\">256</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** Cache of singleton factories: bean name to ObjectFactory. */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, ObjectFactory&lt;?&gt;&gt; singletonFactories = <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** Cache of early singleton objects: bean name to bean instance. */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, Object&gt; earlySingletonObjects = <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** Set of registered singletons, containing the bean names in registration order. */</span></span><br><span class=\"line\">    <span class=\"comment\">// 用来判断 singleton 是否存在的依据</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Set&lt;String&gt; registeredSingletons = <span class=\"keyword\">new</span> LinkedHashSet&lt;&gt;(<span class=\"number\">256</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ---------------对singleton、singletonFactory的添加删除等操作，都是操作的以上变量-------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** Names of beans that are currently in creation. */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Set&lt;String&gt; singletonsCurrentlyInCreation =</span><br><span class=\"line\">\t\t\tCollections.newSetFromMap(<span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;(<span class=\"number\">16</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** Flag that indicates whether we're currently within destroySingletons. */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> singletonsCurrentlyInDestruction = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** Disposable bean instances: bean name to disposable instance. */</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     registering its DisposableBean interface and/or the given destroy method to be called on factory shutdown</span></span><br><span class=\"line\"><span class=\"comment\">     singleton 如果需要在销毁时执行某些操作，可以在创建好对象之后，将singleton放入该collection中。</span></span><br><span class=\"line\"><span class=\"comment\">     在该collection中的singleton在BeanFactroy销毁的时候会执行 他的 destroy method 或者 DisposableBean接口的回调方法</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, Object&gt; disposableBeans = <span class=\"keyword\">new</span> LinkedHashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">// 还有其他变量，没有列全</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerSingleton</span><span class=\"params\">(String beanName, Object singletonObject)</span> <span class=\"keyword\">throws</span> IllegalStateException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.singletonObjects) &#123;</span><br><span class=\"line\">\t\t\tObject oldObject = <span class=\"keyword\">this</span>.singletonObjects.get(beanName);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (oldObject != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Could not register object [\"</span> + singletonObject +</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"string\">\"] under bean name '\"</span> + beanName + <span class=\"string\">\"': there is already object [\"</span> + oldObject + <span class=\"string\">\"] bound\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\taddSingleton(beanName, singletonObject);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Add the given singleton object to the singleton cache of this factory.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;To be called for eager registration of singletons.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> beanName the name of the bean</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> singletonObject the singleton object</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">addSingleton</span><span class=\"params\">(String beanName, Object singletonObject)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 说明我们已经创建出来了对象</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         添加到singletonObjects中</span></span><br><span class=\"line\"><span class=\"comment\">         从singletonFactories删除</span></span><br><span class=\"line\"><span class=\"comment\">         从earlySingletonObjects删除</span></span><br><span class=\"line\"><span class=\"comment\">         添加到registerSingletons，表示 已注册，下次判断的时候 就返回true了</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.singletonObjects) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.singletonObjects.put(beanName, singletonObject);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.singletonFactories.remove(beanName);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.earlySingletonObjects.remove(beanName);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.registeredSingletons.add(beanName);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Add the given singleton factory for building the specified singleton</span></span><br><span class=\"line\"><span class=\"comment\">\t * if necessary.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;To be called for eager registration of singletons, e.g. to be able to</span></span><br><span class=\"line\"><span class=\"comment\">\t * resolve circular references.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> beanName the name of the bean</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> singletonFactory the factory for the singleton object</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">addSingletonFactory</span><span class=\"params\">(String beanName, ObjectFactory&lt;?&gt; singletonFactory)</span> </span>&#123;</span><br><span class=\"line\">\t\tAssert.notNull(singletonFactory, <span class=\"string\">\"Singleton factory must not be null\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.singletonObjects) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.singletonObjects.containsKey(beanName)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.singletonFactories.put(beanName, singletonFactory);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.earlySingletonObjects.remove(beanName);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.registeredSingletons.add(beanName);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getSingleton</span><span class=\"params\">(String beanName)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> getSingleton(beanName, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return the (raw) singleton object registered under the given name.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;Checks already instantiated singletons and also allows for an early</span></span><br><span class=\"line\"><span class=\"comment\">\t * reference to a currently created singleton (resolving a circular reference).</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> beanName the name of the bean to look for</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> allowEarlyReference whether early references should be created or not</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> the registered singleton object, or &#123;<span class=\"doctag\">@code</span> null&#125; if none found</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">getSingleton</span><span class=\"params\">(String beanName, <span class=\"keyword\">boolean</span> allowEarlyReference)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 先从 singltonObjects 中获取，看是否已经存在真正实例化好的对象</span></span><br><span class=\"line\">\t\tObject singletonObject = <span class=\"keyword\">this</span>.singletonObjects.get(beanName);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (singletonObject == <span class=\"keyword\">null</span> &amp;&amp; isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.singletonObjects) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 在从early中取</span></span><br><span class=\"line\">\t\t\t\tsingletonObject = <span class=\"keyword\">this</span>.earlySingletonObjects.get(beanName);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (singletonObject == <span class=\"keyword\">null</span> &amp;&amp; allowEarlyReference) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 再从singleFactory中取</span></span><br><span class=\"line\">\t\t\t\t\tObjectFactory&lt;?&gt; singletonFactory = <span class=\"keyword\">this</span>.singletonFactories.get(beanName);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (singletonFactory != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tsingletonObject = singletonFactory.getObject();</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">this</span>.earlySingletonObjects.put(beanName, singletonObject);</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">this</span>.singletonFactories.remove(beanName);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> singletonObject;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">removeSingleton</span><span class=\"params\">(String beanName)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.singletonObjects) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.singletonObjects.remove(beanName);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.singletonFactories.remove(beanName);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.earlySingletonObjects.remove(beanName);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.registeredSingletons.remove(beanName);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">containsSingleton</span><span class=\"params\">(String beanName)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.singletonObjects.containsKey(beanName);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSingletonCurrentlyInCreation</span><span class=\"params\">(String beanName)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.singletonsCurrentlyInCreation.contains(beanName);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Callback before singleton creation.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeSingletonCreation</span><span class=\"params\">(String beanName)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.inCreationCheckExclusions.contains(beanName) &amp;&amp; !<span class=\"keyword\">this</span>.singletonsCurrentlyInCreation.add(beanName)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanCurrentlyInCreationException(beanName);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Callback after singleton creation.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">afterSingletonCreation</span><span class=\"params\">(String beanName)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.inCreationCheckExclusions.contains(beanName) &amp;&amp; !<span class=\"keyword\">this</span>.singletonsCurrentlyInCreation.remove(beanName)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Singleton '\"</span> + beanName + <span class=\"string\">\"' isn't currently in creation\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerDisposableBean</span><span class=\"params\">(String beanName, DisposableBean bean)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.disposableBeans) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.disposableBeans.put(beanName, bean);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroySingletons</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.trace(<span class=\"string\">\"Destroying singletons in \"</span> + <span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.singletonObjects) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.singletonsCurrentlyInDestruction = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString[] disposableBeanNames;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.disposableBeans) &#123;</span><br><span class=\"line\">\t\t\tdisposableBeanNames = StringUtils.toStringArray(<span class=\"keyword\">this</span>.disposableBeans.keySet());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = disposableBeanNames.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">\t\t\tdestroySingleton(disposableBeanNames[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.containedBeanMap.clear();</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.dependentBeanMap.clear();</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.dependenciesForBeanMap.clear();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tclearSingletonCache();</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>第一步，查看之前解析过没有。不管是之前放到early，singletonFactories中 都可以获取到。剩下的和Prototype基本差不多。</p>\n<p>第二步，从parent BeanFactory获取。</p>\n<p>第三步，标记创建中</p>\n<p>第四步，mergeBeanDefinition</p>\n<p>第五步，createBeanInstance</p>\n<p>除了createBean之外，还有一些singletonBean的特殊操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getSingleton</span><span class=\"params\">(String beanName, ObjectFactory&lt;?&gt; singletonFactory)</span> </span>&#123;</span><br><span class=\"line\">    Assert.notNull(beanName, <span class=\"string\">\"Bean name must not be null\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.singletonObjects) &#123;</span><br><span class=\"line\">        Object singletonObject = <span class=\"keyword\">this</span>.singletonObjects.get(beanName);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (singletonObject == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.singletonsCurrentlyInDestruction) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanCreationNotAllowedException(beanName,</span><br><span class=\"line\">                        <span class=\"string\">\"Singleton bean creation not allowed while singletons of this factory are in destruction \"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"(Do not request a bean from a BeanFactory in a destroy method implementation!)\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">                logger.debug(<span class=\"string\">\"Creating shared instance of singleton bean '\"</span> + beanName + <span class=\"string\">\"'\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 先回调 beforeCreate </span></span><br><span class=\"line\">            beforeSingletonCreation(beanName);</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> newSingleton = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> recordSuppressedExceptions = (<span class=\"keyword\">this</span>.suppressedExceptions == <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (recordSuppressedExceptions) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.suppressedExceptions = <span class=\"keyword\">new</span> LinkedHashSet&lt;&gt;();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// getObject 工厂方法 其实就是 createBean 方法</span></span><br><span class=\"line\">                singletonObject = singletonFactory.getObject();</span><br><span class=\"line\">                newSingleton = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> (IllegalStateException ex) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Has the singleton object implicitly appeared in the meantime -&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">// if yes, proceed with it since the exception indicates that state.</span></span><br><span class=\"line\">                singletonObject = <span class=\"keyword\">this</span>.singletonObjects.get(beanName);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (singletonObject == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> (BeanCreationException ex) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (recordSuppressedExceptions) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (Exception suppressedException : <span class=\"keyword\">this</span>.suppressedExceptions) &#123;</span><br><span class=\"line\">                        ex.addRelatedCause(suppressedException);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (recordSuppressedExceptions) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.suppressedExceptions = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 创建完成 回调 afterCreate</span></span><br><span class=\"line\">                afterSingletonCreation(beanName);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (newSingleton) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 最后添加到 cache中</span></span><br><span class=\"line\">                addSingleton(beanName, singletonObject);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> singletonObject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第六步，调用<code>getObjectForBeanInstance</code>，获取真正的实例对象。</p>\n<p><br></p>\n<hr>\n<h3 id=\"doCreateBean\"><a href=\"#doCreateBean\" class=\"headerlink\" title=\"doCreateBean\"></a>doCreateBean</h3><p>整个创建bean的过程 大致如下：</p>\n<ol>\n<li>给 <code>InstantiationAwareBeanPostProcessor</code> 接口最后的机会，在实例化之前修改bean。</li>\n<li>进入 doCreateBean</li>\n<li>创建对象实例</li>\n<li>给<code>MergedBeanDefinitionPostProcessor</code>接口修改 <code>RootBeanDefinition</code>的机会</li>\n<li>应用 BeanDefinition 中的 property<ol>\n<li>如果存在，回调接口 InstantiationAwareBeanPostProcessor 的方法 postProcessAfterInstantiation</li>\n<li>将PropertyValue中的 beanName beanClass 替换为 对应的 bean 实例</li>\n<li>如果存在，调用 接口 InstantiationAwareBeanPostProcessor 的方法 postProcessPropertyValues 对PropertyValues 应用修改</li>\n<li>最后将 PropertyValues 赋值给 bean 实例对象</li>\n</ol>\n</li>\n<li>调用初始化方法<ol>\n<li>如果该bean 实现了 aware 接口，则调用相应aware 接口的set方法</li>\n<li>BeanPostProcessor.postProcessBeforeInitialization</li>\n<li>如果实现了接口InitializingBean，则回调 afterPropertySet 方法</li>\n<li>调用 init 方法</li>\n<li>BeanPostProcessor.postProcessAfterInitialization</li>\n</ol>\n</li>\n</ol>\n<p><br></p>\n<p><code>doCreateBean</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">doCreateBean</span><span class=\"params\">(<span class=\"keyword\">final</span> String beanName, <span class=\"keyword\">final</span> RootBeanDefinition mbd, <span class=\"keyword\">final</span> @Nullable Object[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> BeanCreationException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Instantiate the bean.</span></span><br><span class=\"line\">    BeanWrapper instanceWrapper = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mbd.isSingleton()) &#123;</span><br><span class=\"line\">        instanceWrapper = <span class=\"keyword\">this</span>.factoryBeanInstanceCache.remove(beanName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (instanceWrapper == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//1. 根据不用的策略创建实例对象，如果没有指定策略，调用默认无参构造函数。</span></span><br><span class=\"line\">        <span class=\"comment\">// 另外 还向 wrapper中放入了 ConvertService CustomEditor 等对象，暂时不知道这是干嘛的。</span></span><br><span class=\"line\">        instanceWrapper = createBeanInstance(beanName, mbd, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Object bean = instanceWrapper.getWrappedInstance();</span><br><span class=\"line\">    Class&lt;?&gt; beanType = instanceWrapper.getWrappedClass();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (beanType != NullBean.class) &#123;</span><br><span class=\"line\">        mbd.resolvedTargetType = beanType;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Allow post-processors to modify the merged bean definition.</span></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (mbd.postProcessingLock) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!mbd.postProcessed) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 2. 给 MergedBeanDefinitionPostProcessor 接口 机会修改 RootBeanDefinition</span></span><br><span class=\"line\">                applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class=\"line\">                        <span class=\"string\">\"Post-processing of merged bean definition failed\"</span>, ex);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            mbd.postProcessed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Eagerly cache singletons to be able to resolve circular references</span></span><br><span class=\"line\">    <span class=\"comment\">// even when triggered by lifecycle interfaces like BeanFactoryAware.</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> earlySingletonExposure = (mbd.isSingleton() &amp;&amp; <span class=\"keyword\">this</span>.allowCircularReferences &amp;&amp;</span><br><span class=\"line\">            isSingletonCurrentlyInCreation(beanName));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (earlySingletonExposure) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">            logger.trace(<span class=\"string\">\"Eagerly caching bean '\"</span> + beanName +</span><br><span class=\"line\">                    <span class=\"string\">\"' to allow for resolving potential circular references\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        addSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, mbd, bean));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Initialize the bean instance.</span></span><br><span class=\"line\">    Object exposedObject = bean;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 应用 BeanDefinition 中的 property </span></span><br><span class=\"line\">        populateBean(beanName, mbd, instanceWrapper);</span><br><span class=\"line\">        <span class=\"comment\">// 调用初始化方法</span></span><br><span class=\"line\">        exposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ex <span class=\"keyword\">instanceof</span> BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException) ex).getBeanName())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> (BeanCreationException) ex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanCreationException(</span><br><span class=\"line\">                    mbd.getResourceDescription(), beanName, <span class=\"string\">\"Initialization of bean failed\"</span>, ex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (earlySingletonExposure) &#123;</span><br><span class=\"line\">        Object earlySingletonReference = getSingleton(beanName, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (earlySingletonReference != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (exposedObject == bean) &#123;</span><br><span class=\"line\">                exposedObject = earlySingletonReference;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.allowRawInjectionDespiteWrapping &amp;&amp; hasDependentBean(beanName)) &#123;</span><br><span class=\"line\">                String[] dependentBeans = getDependentBeans(beanName);</span><br><span class=\"line\">                Set&lt;String&gt; actualDependentBeans = <span class=\"keyword\">new</span> LinkedHashSet&lt;&gt;(dependentBeans.length);</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (String dependentBean : dependentBeans) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) &#123;</span><br><span class=\"line\">                        actualDependentBeans.add(dependentBean);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!actualDependentBeans.isEmpty()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanCurrentlyInCreationException(beanName,</span><br><span class=\"line\">                            <span class=\"string\">\"Bean with name '\"</span> + beanName + <span class=\"string\">\"' has been injected into other beans [\"</span> +</span><br><span class=\"line\">                            StringUtils.collectionToCommaDelimitedString(actualDependentBeans) +</span><br><span class=\"line\">                            <span class=\"string\">\"] in its raw version as part of a circular reference, but has eventually been \"</span> +</span><br><span class=\"line\">                            <span class=\"string\">\"wrapped. This means that said other beans do not use the final version of the \"</span> +</span><br><span class=\"line\">                            <span class=\"string\">\"bean. This is often the result of over-eager type matching - consider using \"</span> +</span><br><span class=\"line\">                            <span class=\"string\">\"'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example.\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Register bean as disposable.</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果需要在 BeanFactory destory 的时候 回调 destory 方法 则 注册</span></span><br><span class=\"line\">        registerDisposableBeanIfNecessary(beanName, bean, mbd);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanCreationException(</span><br><span class=\"line\">                mbd.getResourceDescription(), beanName, <span class=\"string\">\"Invalid destruction signature\"</span>, ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> exposedObject;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><code>populateBean</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">populateBean</span><span class=\"params\">(String beanName, RootBeanDefinition mbd, @Nullable BeanWrapper bw)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 回调接口 InstantiationAwareBeanPostProcessor 的方法 postProcessAfterInstantiation</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果发生了 修改 这里就直接返回 ，不会再给 bean 设置 BeanDefinition 中的 property</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bp <span class=\"keyword\">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class=\"line\">                InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!ibp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) &#123;</span><br><span class=\"line\">                    continueWithPropertyPopulation = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!continueWithPropertyPopulation) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取 property</span></span><br><span class=\"line\">    PropertyValues pvs = (mbd.hasPropertyValues() ? mbd.getPropertyValues() : <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果 property 中的 value 是 beanClass 或者 beanName，则需要先getBean，得到该bean实例，替换value中的 beanName 或 beanClass</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mbd.getResolvedAutowireMode() == AUTOWIRE_BY_NAME || mbd.getResolvedAutowireMode() == AUTOWIRE_BY_TYPE) &#123;</span><br><span class=\"line\">        MutablePropertyValues newPvs = <span class=\"keyword\">new</span> MutablePropertyValues(pvs);</span><br><span class=\"line\">        <span class=\"comment\">// Add property values based on autowire by name if applicable.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mbd.getResolvedAutowireMode() == AUTOWIRE_BY_NAME) &#123;</span><br><span class=\"line\">            autowireByName(beanName, mbd, bw, newPvs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Add property values based on autowire by type if applicable.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mbd.getResolvedAutowireMode() == AUTOWIRE_BY_TYPE) &#123;</span><br><span class=\"line\">            autowireByType(beanName, mbd, bw, newPvs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pvs = newPvs;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> hasInstAwareBpps = hasInstantiationAwareBeanPostProcessors();</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> needsDepCheck = (mbd.getDependencyCheck() != AbstractBeanDefinition.DEPENDENCY_CHECK_NONE);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调用 接口 InstantiationAwareBeanPostProcessor 的方法 postProcessPropertyValues 对PropertyValues 应用修改</span></span><br><span class=\"line\">    PropertyDescriptor[] filteredPds = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hasInstAwareBpps) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pvs == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            pvs = mbd.getPropertyValues();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bp <span class=\"keyword\">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class=\"line\">                InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;</span><br><span class=\"line\">                PropertyValues pvsToUse = ibp.postProcessProperties(pvs, bw.getWrappedInstance(), beanName);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (pvsToUse == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (filteredPds == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    pvsToUse = ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (pvsToUse == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                pvs = pvsToUse;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (needsDepCheck) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (filteredPds == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        checkDependencies(beanName, mbd, filteredPds, pvs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 最后将 PropertyValues  赋值给 bean 实例</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pvs != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        applyPropertyValues(beanName, mbd, bw, pvs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><code>initializeBean</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">initializeBean</span><span class=\"params\">(<span class=\"keyword\">final</span> String beanName, <span class=\"keyword\">final</span> Object bean, @Nullable RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (System.getSecurityManager() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class=\"line\">            invokeAwareMethods(beanName, bean);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;, getAccessControlContext());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果该bean 实现了 aware 接口，则调用相应aware 接口的set方法</span></span><br><span class=\"line\">        invokeAwareMethods(beanName, bean);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Object wrappedBean = bean;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mbd == <span class=\"keyword\">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// BeanPostProcessor.postProcessBeforeInitialization</span></span><br><span class=\"line\">        wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果实现了接口InitializingBean，则回调 afterPropertySet 方法</span></span><br><span class=\"line\">        <span class=\"comment\">// 调用init 方法</span></span><br><span class=\"line\">        invokeInitMethods(beanName, wrappedBean, mbd);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanCreationException(</span><br><span class=\"line\">                (mbd != <span class=\"keyword\">null</span> ? mbd.getResourceDescription() : <span class=\"keyword\">null</span>),</span><br><span class=\"line\">                beanName, <span class=\"string\">\"Invocation of init method failed\"</span>, ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mbd == <span class=\"keyword\">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// BeanPostProcessor.postProcessAfterInitialization</span></span><br><span class=\"line\">        wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrappedBean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p>其他的 doCreateBean 很多代码都没有分析，是这些代码主要在做一些 singleton 循环引用的处理。</p>\n"},{"title":"B树、B+树以及他们的应用","_content":"\n\n# B树、B+树以及他们的应用\n\nB树也是一种平衡树，不过不是二叉树。\n\nB树查询的时间复杂度在`log[M]N - log[2]N`\n\n\n- [B树、B+树以及他们的应用](#b树b树以及他们的应用)\n  - [B树 与 B+树](#b树-与-b树)\n  - [B树与B+树的应用](#b树与b树的应用)\n    - [数据库索引](#数据库索引)\n      - [MyISAM](#myisam)\n      - [InnoDB](#innodb)\n    - [Linux 文件系统](#linux-文件系统)\n  \n\n----------\n\n<br>\n\n## B树 与 B+树\n\n**`B树的定义：`**\n- **跟节点的儿子数为[2, M]**\n- **除跟节点以外的非叶子节点的儿子数为[M/2, M].（M/2向上取整）**\n- **每个节点存放的关键字个数[M/2-1, M-1]. （这个也和儿子数相关，关键字个数=儿子数-1）**\n- 非叶子结点的关键字个数=指向儿子的指针个数-1\n- 非叶子结点的关键字有序：K[1], K[2], …, K[M-1]；且K[i] < K[i+1]\n- 非叶子结点的指针：P[1], P[2], …, P[M]；其中P[1]指向关键字小于K[1]的子树，P[M]指向关键字大于K[M-1]的子树，其它P[i]指向关键字属于(K[i-1], K[i])的子树\n- **所有叶子结点位于同一层**\n\n> `其中M表示这个B数的阶数`\n\n<br>\n\n下面是一个B树插入的过程：\n\n![|center](https://files.cnblogs.com/yangecnu/btreebuild.gif)\n\n- B树的插入是从根节点开始的，当该节点膨胀到M+1的时候，节点会分裂，并推选出其父亲节点\n- 新插入的节点总是根据路由，插入到相应的叶子节点中，如果叶子节点发生分裂，那么会将其中一个值推举到父亲(因为父节点下的字节点分裂，子节点增多，父节点分叉不够了，也需要增加关键字)，这时候就相当于将新的值插入到了父亲节点。\n- B树的删除不算特别复杂，就相当于是插入的反过程，删除就相当于是合并(包括子节点间的合并和子父节点间的合并)\n\n<br>\n<br>\n\n**`B+树的定义：`**\n- 基本和B树一致\n- 非叶子节点的指针个数和关键字相同\n- 非叶子结点的子树指针P[i]，指向关键字值属于[K[i], K[i+1])的子树（B-树是开区间）\n- 为所有叶子节点增加一个链指针\n- 所有的关键字全部会在叶子节点中出现\n\n<br>\n\n下面是一个B+树的插入过程：\n\n![|center](https://files.cnblogs.com/yangecnu/Bplustreebuild.gif)\n\n<br>\n\n`B+的性质：`\n- 所有的节点都出现在叶子节点的链表中（稠密索引），而且链表中的关键字都是有序的。\n- 不可能在非叶子节点中命中\n- 非叶子节点相当于是 叶子结点的稀疏索引，叶子节点是转存关键字数据的数据层\n- 更适合 文件索引系统(泛文件)\n- 因为所有的key都出现在叶子节点，所以从跟节点开始的查询每一条数据的效率基本一样，比较稳定\n\n<br>\n\n通常在B+树上有两个头节点，一个指向跟节点，一个指向最小叶子节点。**所以也有两种查询方式，一是从最小关键字开始顺序查找，二是从跟节点随机查找**\n\n> ps: 还有一种树是B*树，它的非叶子节点的利用率更高\n\n\n\n----------\n\n<br>\n\n## B树与B+树的应用\n\n**B+树通常用作数据的索引。**\n\n无论是数据库还是文件等，这些数据不像是我们运行的程序，所有的数据都是在内存里面，而内存的读取是很快的，只要能定位到数据的地址，就能很快的拿到数据，所以就算红黑树，或者扫描比较长的链表，数据多一点，也没关系，所以红黑树相比与链表，主要就在于解决了查询的次数，由N->lg[n]。\n\n但是以文件形式存储的数据，比如数据库，文件等，他们不是在内存中，红黑树确实能降低查询次数，`由于红黑树的父子节点是逻辑相邻，而不是物理相邻，使用红黑树降低了总体的查询次数，但是磁盘IO次数还是很高，用红黑树做索引，并不能降低磁盘IO的次数，而IO次数才是真正读取耗时的地方。`所以引出了B树和B+树。\n\n<br>\n\n**`局部性原理与磁盘预读`**\n\n磁盘的存取速度往往是主存的几百分之一，因此为了提高效率，要尽量减少磁盘I/O。\n\n**为了减少磁盘IO，磁盘往往不是严格按需读取，而是每次都会预读，即使只需要一个字节，磁盘也会从这个位置开始，顺序向后读取一定长度的数据放入内存，这就是计算机科学中的的`局部性原理：当一个数据被用到时，**其附近的数据也通常会马上被使用`**\n\n`读取呢也是有单位的，称做块(block)，每次读取通常是块的整数倍，一般呢块的大小为4K。`通常用B/B+树结构存储的索引的**节点都会设计为一个块的大小**，这样一次IO就可以全部读入。\n\n而B/B+树的非叶子节点只会存储记录中某个key作为索引的key，而不会存储整条记录，所以一个节点实际上可以存储很多的key(也就是树的阶，通常超过100)，所以树的阶实际也会非常大，所以树的深度就会很小(通常不会超过3)，所以B/B+树作为文件的索引是非常合适的。\n\n\n\n\n----------\n\n<br>\n\n### 数据库索引\n\n在 MySQL 中，主要有四种类型的索引，分别为： B-Tree 索引， Hash 索引， Fulltext 索引和 R-Tree 索引。我们主要分析B-Tree 索引（叫这个名字，实际的技术和数据结构就是B+树）。\n\n下面讨论两种存储引擎的索引存储方式：`MyISAM`和`InnoDB`\n\n<br><br>\n\n#### MyISAM\n\n**主键索引**\n\nMyISAM引擎使用B+Tree作为索引结构，`叶节点的data域存放的是数据记录的地址`。下图是MyISAM主键索引的原理图：\n\n![|center](https://img-my.csdn.net/uploads/201208/01/1343757655_1008.png)\n\n<br>\n\n**辅助索引（Secondary key）**\n\n在MyISAM中，**主索引和辅助索引（Secondary key）在结构上没有任何区别，只是主索引要求key是唯一的，而辅助索引的key可以重复**。如果我们在Col2上建立一个辅助索引，则此索引的结构如下图所示：\n\n![|center](https://img-my.csdn.net/uploads/201208/01/1343757949_9784.png)\n\nMyISAM中索引检索的算法为首先按照B+Tree搜索算法搜索索引，如果指定的Key存在，则取出其data域的值，然后以data域的值为地址，读取相应数据记录。\n\n我们通常称MyISAM的索引方式为**非聚集索引**\n\n<br><br>\n\n#### InnoDB\n\n虽然InnoDB也使用B+Tree作为索引结构，但具体实现方式却与MyISAM截然不同.\n\n**主键索引**\n\n**在InnoDB中，表数据文件本身就是按B+Tree组织的一个索引结构，这棵`树的叶节点data域保存了完整的数据记录`。`这个索引的key是数据表的主键，因此InnoDB表数据文件本身就是主索引`。**\n\n![|center](https://img-my.csdn.net/uploads/201208/01/1343758042_8526.png)\n\n如图，InnoDB主索引同时也是数据文件。另外叶节点包含了完整的数据记录。这种索引叫做`聚集索引`。\n\n因为InnoDB的数据文件本身要按主键聚集，所以`InnoDB要求表必须有主键`（MyISAM可以没有），**如果没有显式指定，则MySQL系统会自动选择一个可以唯一标识数据记录的列作为主键，如果不存在这种列，则MySQL自动为InnoDB表生成一个隐含字段作为主键**，这个字段长度为6个字节，类型为长整形。\n\n<br><br>\n\n**InnoDB的辅助索引**\n\n`InnoDB的所有辅助索引都引用主键作为data域`。例如，下图为定义在Col3上的一个辅助索引：\n\n![|center](https://img-my.csdn.net/uploads/201208/01/1343758434_9462.png)\n\n**InnoDB 表是基于聚簇索引建立的。因此InnoDB 的索引能提供一种非常快速的主键查找性能,`但是辅助索引搜索需要检索两遍索引：首先检索辅助索引获得主键，然后用主键到主索引中检索获得记录。`**.\n\n所以，它的辅助索引（Secondary Index， 也就是非主键索引）也会包含主键列，所以，如果主键定义的比较大，其他索引也将很大。如果想在表上定义 、很多索引，则争取尽量把主键定义得小一些。InnoDB 不会压缩索引。\n\n\n\n----------\n\n<br>\n\n### Linux 文件系统\n\n\n\n---------\n\n<br>\n\n参考文献：\n\n- [B-树和B+树的应用：数据搜索和数据库索引](https://blog.csdn.net/hguisu/article/details/7786014)\n- [数据结构中各种树](https://www.cnblogs.com/maybe2030/p/4732377.html)\n","source":"_posts/B树以其应用.md","raw":"---\ntitle: B树、B+树以及他们的应用\ncategories:\n  - 树\ntags: \n  - 树\n  - B树\n  - mysql索引\n  - 文件系统\n---\n\n\n# B树、B+树以及他们的应用\n\nB树也是一种平衡树，不过不是二叉树。\n\nB树查询的时间复杂度在`log[M]N - log[2]N`\n\n\n- [B树、B+树以及他们的应用](#b树b树以及他们的应用)\n  - [B树 与 B+树](#b树-与-b树)\n  - [B树与B+树的应用](#b树与b树的应用)\n    - [数据库索引](#数据库索引)\n      - [MyISAM](#myisam)\n      - [InnoDB](#innodb)\n    - [Linux 文件系统](#linux-文件系统)\n  \n\n----------\n\n<br>\n\n## B树 与 B+树\n\n**`B树的定义：`**\n- **跟节点的儿子数为[2, M]**\n- **除跟节点以外的非叶子节点的儿子数为[M/2, M].（M/2向上取整）**\n- **每个节点存放的关键字个数[M/2-1, M-1]. （这个也和儿子数相关，关键字个数=儿子数-1）**\n- 非叶子结点的关键字个数=指向儿子的指针个数-1\n- 非叶子结点的关键字有序：K[1], K[2], …, K[M-1]；且K[i] < K[i+1]\n- 非叶子结点的指针：P[1], P[2], …, P[M]；其中P[1]指向关键字小于K[1]的子树，P[M]指向关键字大于K[M-1]的子树，其它P[i]指向关键字属于(K[i-1], K[i])的子树\n- **所有叶子结点位于同一层**\n\n> `其中M表示这个B数的阶数`\n\n<br>\n\n下面是一个B树插入的过程：\n\n![|center](https://files.cnblogs.com/yangecnu/btreebuild.gif)\n\n- B树的插入是从根节点开始的，当该节点膨胀到M+1的时候，节点会分裂，并推选出其父亲节点\n- 新插入的节点总是根据路由，插入到相应的叶子节点中，如果叶子节点发生分裂，那么会将其中一个值推举到父亲(因为父节点下的字节点分裂，子节点增多，父节点分叉不够了，也需要增加关键字)，这时候就相当于将新的值插入到了父亲节点。\n- B树的删除不算特别复杂，就相当于是插入的反过程，删除就相当于是合并(包括子节点间的合并和子父节点间的合并)\n\n<br>\n<br>\n\n**`B+树的定义：`**\n- 基本和B树一致\n- 非叶子节点的指针个数和关键字相同\n- 非叶子结点的子树指针P[i]，指向关键字值属于[K[i], K[i+1])的子树（B-树是开区间）\n- 为所有叶子节点增加一个链指针\n- 所有的关键字全部会在叶子节点中出现\n\n<br>\n\n下面是一个B+树的插入过程：\n\n![|center](https://files.cnblogs.com/yangecnu/Bplustreebuild.gif)\n\n<br>\n\n`B+的性质：`\n- 所有的节点都出现在叶子节点的链表中（稠密索引），而且链表中的关键字都是有序的。\n- 不可能在非叶子节点中命中\n- 非叶子节点相当于是 叶子结点的稀疏索引，叶子节点是转存关键字数据的数据层\n- 更适合 文件索引系统(泛文件)\n- 因为所有的key都出现在叶子节点，所以从跟节点开始的查询每一条数据的效率基本一样，比较稳定\n\n<br>\n\n通常在B+树上有两个头节点，一个指向跟节点，一个指向最小叶子节点。**所以也有两种查询方式，一是从最小关键字开始顺序查找，二是从跟节点随机查找**\n\n> ps: 还有一种树是B*树，它的非叶子节点的利用率更高\n\n\n\n----------\n\n<br>\n\n## B树与B+树的应用\n\n**B+树通常用作数据的索引。**\n\n无论是数据库还是文件等，这些数据不像是我们运行的程序，所有的数据都是在内存里面，而内存的读取是很快的，只要能定位到数据的地址，就能很快的拿到数据，所以就算红黑树，或者扫描比较长的链表，数据多一点，也没关系，所以红黑树相比与链表，主要就在于解决了查询的次数，由N->lg[n]。\n\n但是以文件形式存储的数据，比如数据库，文件等，他们不是在内存中，红黑树确实能降低查询次数，`由于红黑树的父子节点是逻辑相邻，而不是物理相邻，使用红黑树降低了总体的查询次数，但是磁盘IO次数还是很高，用红黑树做索引，并不能降低磁盘IO的次数，而IO次数才是真正读取耗时的地方。`所以引出了B树和B+树。\n\n<br>\n\n**`局部性原理与磁盘预读`**\n\n磁盘的存取速度往往是主存的几百分之一，因此为了提高效率，要尽量减少磁盘I/O。\n\n**为了减少磁盘IO，磁盘往往不是严格按需读取，而是每次都会预读，即使只需要一个字节，磁盘也会从这个位置开始，顺序向后读取一定长度的数据放入内存，这就是计算机科学中的的`局部性原理：当一个数据被用到时，**其附近的数据也通常会马上被使用`**\n\n`读取呢也是有单位的，称做块(block)，每次读取通常是块的整数倍，一般呢块的大小为4K。`通常用B/B+树结构存储的索引的**节点都会设计为一个块的大小**，这样一次IO就可以全部读入。\n\n而B/B+树的非叶子节点只会存储记录中某个key作为索引的key，而不会存储整条记录，所以一个节点实际上可以存储很多的key(也就是树的阶，通常超过100)，所以树的阶实际也会非常大，所以树的深度就会很小(通常不会超过3)，所以B/B+树作为文件的索引是非常合适的。\n\n\n\n\n----------\n\n<br>\n\n### 数据库索引\n\n在 MySQL 中，主要有四种类型的索引，分别为： B-Tree 索引， Hash 索引， Fulltext 索引和 R-Tree 索引。我们主要分析B-Tree 索引（叫这个名字，实际的技术和数据结构就是B+树）。\n\n下面讨论两种存储引擎的索引存储方式：`MyISAM`和`InnoDB`\n\n<br><br>\n\n#### MyISAM\n\n**主键索引**\n\nMyISAM引擎使用B+Tree作为索引结构，`叶节点的data域存放的是数据记录的地址`。下图是MyISAM主键索引的原理图：\n\n![|center](https://img-my.csdn.net/uploads/201208/01/1343757655_1008.png)\n\n<br>\n\n**辅助索引（Secondary key）**\n\n在MyISAM中，**主索引和辅助索引（Secondary key）在结构上没有任何区别，只是主索引要求key是唯一的，而辅助索引的key可以重复**。如果我们在Col2上建立一个辅助索引，则此索引的结构如下图所示：\n\n![|center](https://img-my.csdn.net/uploads/201208/01/1343757949_9784.png)\n\nMyISAM中索引检索的算法为首先按照B+Tree搜索算法搜索索引，如果指定的Key存在，则取出其data域的值，然后以data域的值为地址，读取相应数据记录。\n\n我们通常称MyISAM的索引方式为**非聚集索引**\n\n<br><br>\n\n#### InnoDB\n\n虽然InnoDB也使用B+Tree作为索引结构，但具体实现方式却与MyISAM截然不同.\n\n**主键索引**\n\n**在InnoDB中，表数据文件本身就是按B+Tree组织的一个索引结构，这棵`树的叶节点data域保存了完整的数据记录`。`这个索引的key是数据表的主键，因此InnoDB表数据文件本身就是主索引`。**\n\n![|center](https://img-my.csdn.net/uploads/201208/01/1343758042_8526.png)\n\n如图，InnoDB主索引同时也是数据文件。另外叶节点包含了完整的数据记录。这种索引叫做`聚集索引`。\n\n因为InnoDB的数据文件本身要按主键聚集，所以`InnoDB要求表必须有主键`（MyISAM可以没有），**如果没有显式指定，则MySQL系统会自动选择一个可以唯一标识数据记录的列作为主键，如果不存在这种列，则MySQL自动为InnoDB表生成一个隐含字段作为主键**，这个字段长度为6个字节，类型为长整形。\n\n<br><br>\n\n**InnoDB的辅助索引**\n\n`InnoDB的所有辅助索引都引用主键作为data域`。例如，下图为定义在Col3上的一个辅助索引：\n\n![|center](https://img-my.csdn.net/uploads/201208/01/1343758434_9462.png)\n\n**InnoDB 表是基于聚簇索引建立的。因此InnoDB 的索引能提供一种非常快速的主键查找性能,`但是辅助索引搜索需要检索两遍索引：首先检索辅助索引获得主键，然后用主键到主索引中检索获得记录。`**.\n\n所以，它的辅助索引（Secondary Index， 也就是非主键索引）也会包含主键列，所以，如果主键定义的比较大，其他索引也将很大。如果想在表上定义 、很多索引，则争取尽量把主键定义得小一些。InnoDB 不会压缩索引。\n\n\n\n----------\n\n<br>\n\n### Linux 文件系统\n\n\n\n---------\n\n<br>\n\n参考文献：\n\n- [B-树和B+树的应用：数据搜索和数据库索引](https://blog.csdn.net/hguisu/article/details/7786014)\n- [数据结构中各种树](https://www.cnblogs.com/maybe2030/p/4732377.html)\n","slug":"B树以其应用","published":1,"date":"2019-03-15T11:07:53.952Z","updated":"2019-03-15T11:11:04.669Z","_id":"cjt9ynf7k0013lf6vspyl3z6b","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"B树、B-树以及他们的应用\"><a href=\"#B树、B-树以及他们的应用\" class=\"headerlink\" title=\"B树、B+树以及他们的应用\"></a>B树、B+树以及他们的应用</h1><p>B树也是一种平衡树，不过不是二叉树。</p>\n<p>B树查询的时间复杂度在<code>log[M]N - log[2]N</code></p>\n<ul>\n<li><a href=\"#b树b树以及他们的应用\">B树、B+树以及他们的应用</a><ul>\n<li><a href=\"#b树-与-b树\">B树 与 B+树</a></li>\n<li><a href=\"#b树与b树的应用\">B树与B+树的应用</a><ul>\n<li><a href=\"#数据库索引\">数据库索引</a><ul>\n<li><a href=\"#myisam\">MyISAM</a></li>\n<li><a href=\"#innodb\">InnoDB</a></li>\n</ul>\n</li>\n<li><a href=\"#linux-文件系统\">Linux 文件系统</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><br></p>\n<h2 id=\"B树-与-B-树\"><a href=\"#B树-与-B-树\" class=\"headerlink\" title=\"B树 与 B+树\"></a>B树 与 B+树</h2><p><strong><code>B树的定义：</code></strong></p>\n<ul>\n<li><strong>跟节点的儿子数为[2, M]</strong></li>\n<li><strong>除跟节点以外的非叶子节点的儿子数为[M/2, M].（M/2向上取整）</strong></li>\n<li><strong>每个节点存放的关键字个数[M/2-1, M-1]. （这个也和儿子数相关，关键字个数=儿子数-1）</strong></li>\n<li>非叶子结点的关键字个数=指向儿子的指针个数-1</li>\n<li>非叶子结点的关键字有序：K[1], K[2], …, K[M-1]；且K[i] &lt; K[i+1]</li>\n<li>非叶子结点的指针：P[1], P[2], …, P[M]；其中P[1]指向关键字小于K[1]的子树，P[M]指向关键字大于K[M-1]的子树，其它P[i]指向关键字属于(K[i-1], K[i])的子树</li>\n<li><strong>所有叶子结点位于同一层</strong></li>\n</ul>\n<blockquote>\n<p><code>其中M表示这个B数的阶数</code></p>\n</blockquote>\n<p><br></p>\n<p>下面是一个B树插入的过程：</p>\n<p><img src=\"https://files.cnblogs.com/yangecnu/btreebuild.gif\" alt=\"|center\"></p>\n<ul>\n<li>B树的插入是从根节点开始的，当该节点膨胀到M+1的时候，节点会分裂，并推选出其父亲节点</li>\n<li>新插入的节点总是根据路由，插入到相应的叶子节点中，如果叶子节点发生分裂，那么会将其中一个值推举到父亲(因为父节点下的字节点分裂，子节点增多，父节点分叉不够了，也需要增加关键字)，这时候就相当于将新的值插入到了父亲节点。</li>\n<li>B树的删除不算特别复杂，就相当于是插入的反过程，删除就相当于是合并(包括子节点间的合并和子父节点间的合并)</li>\n</ul>\n<p><br><br><br></p>\n<p><strong><code>B+树的定义：</code></strong></p>\n<ul>\n<li>基本和B树一致</li>\n<li>非叶子节点的指针个数和关键字相同</li>\n<li>非叶子结点的子树指针P[i]，指向关键字值属于[K[i], K[i+1])的子树（B-树是开区间）</li>\n<li>为所有叶子节点增加一个链指针</li>\n<li>所有的关键字全部会在叶子节点中出现</li>\n</ul>\n<p><br></p>\n<p>下面是一个B+树的插入过程：</p>\n<p><img src=\"https://files.cnblogs.com/yangecnu/Bplustreebuild.gif\" alt=\"|center\"></p>\n<p><br></p>\n<p><code>B+的性质：</code></p>\n<ul>\n<li>所有的节点都出现在叶子节点的链表中（稠密索引），而且链表中的关键字都是有序的。</li>\n<li>不可能在非叶子节点中命中</li>\n<li>非叶子节点相当于是 叶子结点的稀疏索引，叶子节点是转存关键字数据的数据层</li>\n<li>更适合 文件索引系统(泛文件)</li>\n<li>因为所有的key都出现在叶子节点，所以从跟节点开始的查询每一条数据的效率基本一样，比较稳定</li>\n</ul>\n<p><br></p>\n<p>通常在B+树上有两个头节点，一个指向跟节点，一个指向最小叶子节点。<strong>所以也有两种查询方式，一是从最小关键字开始顺序查找，二是从跟节点随机查找</strong></p>\n<blockquote>\n<p>ps: 还有一种树是B*树，它的非叶子节点的利用率更高</p>\n</blockquote>\n<hr>\n<p><br></p>\n<h2 id=\"B树与B-树的应用\"><a href=\"#B树与B-树的应用\" class=\"headerlink\" title=\"B树与B+树的应用\"></a>B树与B+树的应用</h2><p><strong>B+树通常用作数据的索引。</strong></p>\n<p>无论是数据库还是文件等，这些数据不像是我们运行的程序，所有的数据都是在内存里面，而内存的读取是很快的，只要能定位到数据的地址，就能很快的拿到数据，所以就算红黑树，或者扫描比较长的链表，数据多一点，也没关系，所以红黑树相比与链表，主要就在于解决了查询的次数，由N-&gt;lg[n]。</p>\n<p>但是以文件形式存储的数据，比如数据库，文件等，他们不是在内存中，红黑树确实能降低查询次数，<code>由于红黑树的父子节点是逻辑相邻，而不是物理相邻，使用红黑树降低了总体的查询次数，但是磁盘IO次数还是很高，用红黑树做索引，并不能降低磁盘IO的次数，而IO次数才是真正读取耗时的地方。</code>所以引出了B树和B+树。</p>\n<p><br></p>\n<p><strong><code>局部性原理与磁盘预读</code></strong></p>\n<p>磁盘的存取速度往往是主存的几百分之一，因此为了提高效率，要尽量减少磁盘I/O。</p>\n<p><strong>为了减少磁盘IO，磁盘往往不是严格按需读取，而是每次都会预读，即使只需要一个字节，磁盘也会从这个位置开始，顺序向后读取一定长度的数据放入内存，这就是计算机科学中的的`局部性原理：当一个数据被用到时，</strong>其附近的数据也通常会马上被使用`**</p>\n<p><code>读取呢也是有单位的，称做块(block)，每次读取通常是块的整数倍，一般呢块的大小为4K。</code>通常用B/B+树结构存储的索引的<strong>节点都会设计为一个块的大小</strong>，这样一次IO就可以全部读入。</p>\n<p>而B/B+树的非叶子节点只会存储记录中某个key作为索引的key，而不会存储整条记录，所以一个节点实际上可以存储很多的key(也就是树的阶，通常超过100)，所以树的阶实际也会非常大，所以树的深度就会很小(通常不会超过3)，所以B/B+树作为文件的索引是非常合适的。</p>\n<hr>\n<p><br></p>\n<h3 id=\"数据库索引\"><a href=\"#数据库索引\" class=\"headerlink\" title=\"数据库索引\"></a>数据库索引</h3><p>在 MySQL 中，主要有四种类型的索引，分别为： B-Tree 索引， Hash 索引， Fulltext 索引和 R-Tree 索引。我们主要分析B-Tree 索引（叫这个名字，实际的技术和数据结构就是B+树）。</p>\n<p>下面讨论两种存储引擎的索引存储方式：<code>MyISAM</code>和<code>InnoDB</code></p>\n<p><br><br></p>\n<h4 id=\"MyISAM\"><a href=\"#MyISAM\" class=\"headerlink\" title=\"MyISAM\"></a>MyISAM</h4><p><strong>主键索引</strong></p>\n<p>MyISAM引擎使用B+Tree作为索引结构，<code>叶节点的data域存放的是数据记录的地址</code>。下图是MyISAM主键索引的原理图：</p>\n<p><img src=\"https://img-my.csdn.net/uploads/201208/01/1343757655_1008.png\" alt=\"|center\"></p>\n<p><br></p>\n<p><strong>辅助索引（Secondary key）</strong></p>\n<p>在MyISAM中，<strong>主索引和辅助索引（Secondary key）在结构上没有任何区别，只是主索引要求key是唯一的，而辅助索引的key可以重复</strong>。如果我们在Col2上建立一个辅助索引，则此索引的结构如下图所示：</p>\n<p><img src=\"https://img-my.csdn.net/uploads/201208/01/1343757949_9784.png\" alt=\"|center\"></p>\n<p>MyISAM中索引检索的算法为首先按照B+Tree搜索算法搜索索引，如果指定的Key存在，则取出其data域的值，然后以data域的值为地址，读取相应数据记录。</p>\n<p>我们通常称MyISAM的索引方式为<strong>非聚集索引</strong></p>\n<p><br><br></p>\n<h4 id=\"InnoDB\"><a href=\"#InnoDB\" class=\"headerlink\" title=\"InnoDB\"></a>InnoDB</h4><p>虽然InnoDB也使用B+Tree作为索引结构，但具体实现方式却与MyISAM截然不同.</p>\n<p><strong>主键索引</strong></p>\n<p><strong>在InnoDB中，表数据文件本身就是按B+Tree组织的一个索引结构，这棵<code>树的叶节点data域保存了完整的数据记录</code>。<code>这个索引的key是数据表的主键，因此InnoDB表数据文件本身就是主索引</code>。</strong></p>\n<p><img src=\"https://img-my.csdn.net/uploads/201208/01/1343758042_8526.png\" alt=\"|center\"></p>\n<p>如图，InnoDB主索引同时也是数据文件。另外叶节点包含了完整的数据记录。这种索引叫做<code>聚集索引</code>。</p>\n<p>因为InnoDB的数据文件本身要按主键聚集，所以<code>InnoDB要求表必须有主键</code>（MyISAM可以没有），<strong>如果没有显式指定，则MySQL系统会自动选择一个可以唯一标识数据记录的列作为主键，如果不存在这种列，则MySQL自动为InnoDB表生成一个隐含字段作为主键</strong>，这个字段长度为6个字节，类型为长整形。</p>\n<p><br><br></p>\n<p><strong>InnoDB的辅助索引</strong></p>\n<p><code>InnoDB的所有辅助索引都引用主键作为data域</code>。例如，下图为定义在Col3上的一个辅助索引：</p>\n<p><img src=\"https://img-my.csdn.net/uploads/201208/01/1343758434_9462.png\" alt=\"|center\"></p>\n<p><strong>InnoDB 表是基于聚簇索引建立的。因此InnoDB 的索引能提供一种非常快速的主键查找性能,<code>但是辅助索引搜索需要检索两遍索引：首先检索辅助索引获得主键，然后用主键到主索引中检索获得记录。</code></strong>.</p>\n<p>所以，它的辅助索引（Secondary Index， 也就是非主键索引）也会包含主键列，所以，如果主键定义的比较大，其他索引也将很大。如果想在表上定义 、很多索引，则争取尽量把主键定义得小一些。InnoDB 不会压缩索引。</p>\n<hr>\n<p><br></p>\n<h3 id=\"Linux-文件系统\"><a href=\"#Linux-文件系统\" class=\"headerlink\" title=\"Linux 文件系统\"></a>Linux 文件系统</h3><hr>\n<p><br></p>\n<p>参考文献：</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/hguisu/article/details/7786014\" target=\"_blank\" rel=\"noopener\">B-树和B+树的应用：数据搜索和数据库索引</a></li>\n<li><a href=\"https://www.cnblogs.com/maybe2030/p/4732377.html\" target=\"_blank\" rel=\"noopener\">数据结构中各种树</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"B树、B-树以及他们的应用\"><a href=\"#B树、B-树以及他们的应用\" class=\"headerlink\" title=\"B树、B+树以及他们的应用\"></a>B树、B+树以及他们的应用</h1><p>B树也是一种平衡树，不过不是二叉树。</p>\n<p>B树查询的时间复杂度在<code>log[M]N - log[2]N</code></p>\n<ul>\n<li><a href=\"#b树b树以及他们的应用\">B树、B+树以及他们的应用</a><ul>\n<li><a href=\"#b树-与-b树\">B树 与 B+树</a></li>\n<li><a href=\"#b树与b树的应用\">B树与B+树的应用</a><ul>\n<li><a href=\"#数据库索引\">数据库索引</a><ul>\n<li><a href=\"#myisam\">MyISAM</a></li>\n<li><a href=\"#innodb\">InnoDB</a></li>\n</ul>\n</li>\n<li><a href=\"#linux-文件系统\">Linux 文件系统</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><br></p>\n<h2 id=\"B树-与-B-树\"><a href=\"#B树-与-B-树\" class=\"headerlink\" title=\"B树 与 B+树\"></a>B树 与 B+树</h2><p><strong><code>B树的定义：</code></strong></p>\n<ul>\n<li><strong>跟节点的儿子数为[2, M]</strong></li>\n<li><strong>除跟节点以外的非叶子节点的儿子数为[M/2, M].（M/2向上取整）</strong></li>\n<li><strong>每个节点存放的关键字个数[M/2-1, M-1]. （这个也和儿子数相关，关键字个数=儿子数-1）</strong></li>\n<li>非叶子结点的关键字个数=指向儿子的指针个数-1</li>\n<li>非叶子结点的关键字有序：K[1], K[2], …, K[M-1]；且K[i] &lt; K[i+1]</li>\n<li>非叶子结点的指针：P[1], P[2], …, P[M]；其中P[1]指向关键字小于K[1]的子树，P[M]指向关键字大于K[M-1]的子树，其它P[i]指向关键字属于(K[i-1], K[i])的子树</li>\n<li><strong>所有叶子结点位于同一层</strong></li>\n</ul>\n<blockquote>\n<p><code>其中M表示这个B数的阶数</code></p>\n</blockquote>\n<p><br></p>\n<p>下面是一个B树插入的过程：</p>\n<p><img src=\"https://files.cnblogs.com/yangecnu/btreebuild.gif\" alt=\"|center\"></p>\n<ul>\n<li>B树的插入是从根节点开始的，当该节点膨胀到M+1的时候，节点会分裂，并推选出其父亲节点</li>\n<li>新插入的节点总是根据路由，插入到相应的叶子节点中，如果叶子节点发生分裂，那么会将其中一个值推举到父亲(因为父节点下的字节点分裂，子节点增多，父节点分叉不够了，也需要增加关键字)，这时候就相当于将新的值插入到了父亲节点。</li>\n<li>B树的删除不算特别复杂，就相当于是插入的反过程，删除就相当于是合并(包括子节点间的合并和子父节点间的合并)</li>\n</ul>\n<p><br><br><br></p>\n<p><strong><code>B+树的定义：</code></strong></p>\n<ul>\n<li>基本和B树一致</li>\n<li>非叶子节点的指针个数和关键字相同</li>\n<li>非叶子结点的子树指针P[i]，指向关键字值属于[K[i], K[i+1])的子树（B-树是开区间）</li>\n<li>为所有叶子节点增加一个链指针</li>\n<li>所有的关键字全部会在叶子节点中出现</li>\n</ul>\n<p><br></p>\n<p>下面是一个B+树的插入过程：</p>\n<p><img src=\"https://files.cnblogs.com/yangecnu/Bplustreebuild.gif\" alt=\"|center\"></p>\n<p><br></p>\n<p><code>B+的性质：</code></p>\n<ul>\n<li>所有的节点都出现在叶子节点的链表中（稠密索引），而且链表中的关键字都是有序的。</li>\n<li>不可能在非叶子节点中命中</li>\n<li>非叶子节点相当于是 叶子结点的稀疏索引，叶子节点是转存关键字数据的数据层</li>\n<li>更适合 文件索引系统(泛文件)</li>\n<li>因为所有的key都出现在叶子节点，所以从跟节点开始的查询每一条数据的效率基本一样，比较稳定</li>\n</ul>\n<p><br></p>\n<p>通常在B+树上有两个头节点，一个指向跟节点，一个指向最小叶子节点。<strong>所以也有两种查询方式，一是从最小关键字开始顺序查找，二是从跟节点随机查找</strong></p>\n<blockquote>\n<p>ps: 还有一种树是B*树，它的非叶子节点的利用率更高</p>\n</blockquote>\n<hr>\n<p><br></p>\n<h2 id=\"B树与B-树的应用\"><a href=\"#B树与B-树的应用\" class=\"headerlink\" title=\"B树与B+树的应用\"></a>B树与B+树的应用</h2><p><strong>B+树通常用作数据的索引。</strong></p>\n<p>无论是数据库还是文件等，这些数据不像是我们运行的程序，所有的数据都是在内存里面，而内存的读取是很快的，只要能定位到数据的地址，就能很快的拿到数据，所以就算红黑树，或者扫描比较长的链表，数据多一点，也没关系，所以红黑树相比与链表，主要就在于解决了查询的次数，由N-&gt;lg[n]。</p>\n<p>但是以文件形式存储的数据，比如数据库，文件等，他们不是在内存中，红黑树确实能降低查询次数，<code>由于红黑树的父子节点是逻辑相邻，而不是物理相邻，使用红黑树降低了总体的查询次数，但是磁盘IO次数还是很高，用红黑树做索引，并不能降低磁盘IO的次数，而IO次数才是真正读取耗时的地方。</code>所以引出了B树和B+树。</p>\n<p><br></p>\n<p><strong><code>局部性原理与磁盘预读</code></strong></p>\n<p>磁盘的存取速度往往是主存的几百分之一，因此为了提高效率，要尽量减少磁盘I/O。</p>\n<p><strong>为了减少磁盘IO，磁盘往往不是严格按需读取，而是每次都会预读，即使只需要一个字节，磁盘也会从这个位置开始，顺序向后读取一定长度的数据放入内存，这就是计算机科学中的的`局部性原理：当一个数据被用到时，</strong>其附近的数据也通常会马上被使用`**</p>\n<p><code>读取呢也是有单位的，称做块(block)，每次读取通常是块的整数倍，一般呢块的大小为4K。</code>通常用B/B+树结构存储的索引的<strong>节点都会设计为一个块的大小</strong>，这样一次IO就可以全部读入。</p>\n<p>而B/B+树的非叶子节点只会存储记录中某个key作为索引的key，而不会存储整条记录，所以一个节点实际上可以存储很多的key(也就是树的阶，通常超过100)，所以树的阶实际也会非常大，所以树的深度就会很小(通常不会超过3)，所以B/B+树作为文件的索引是非常合适的。</p>\n<hr>\n<p><br></p>\n<h3 id=\"数据库索引\"><a href=\"#数据库索引\" class=\"headerlink\" title=\"数据库索引\"></a>数据库索引</h3><p>在 MySQL 中，主要有四种类型的索引，分别为： B-Tree 索引， Hash 索引， Fulltext 索引和 R-Tree 索引。我们主要分析B-Tree 索引（叫这个名字，实际的技术和数据结构就是B+树）。</p>\n<p>下面讨论两种存储引擎的索引存储方式：<code>MyISAM</code>和<code>InnoDB</code></p>\n<p><br><br></p>\n<h4 id=\"MyISAM\"><a href=\"#MyISAM\" class=\"headerlink\" title=\"MyISAM\"></a>MyISAM</h4><p><strong>主键索引</strong></p>\n<p>MyISAM引擎使用B+Tree作为索引结构，<code>叶节点的data域存放的是数据记录的地址</code>。下图是MyISAM主键索引的原理图：</p>\n<p><img src=\"https://img-my.csdn.net/uploads/201208/01/1343757655_1008.png\" alt=\"|center\"></p>\n<p><br></p>\n<p><strong>辅助索引（Secondary key）</strong></p>\n<p>在MyISAM中，<strong>主索引和辅助索引（Secondary key）在结构上没有任何区别，只是主索引要求key是唯一的，而辅助索引的key可以重复</strong>。如果我们在Col2上建立一个辅助索引，则此索引的结构如下图所示：</p>\n<p><img src=\"https://img-my.csdn.net/uploads/201208/01/1343757949_9784.png\" alt=\"|center\"></p>\n<p>MyISAM中索引检索的算法为首先按照B+Tree搜索算法搜索索引，如果指定的Key存在，则取出其data域的值，然后以data域的值为地址，读取相应数据记录。</p>\n<p>我们通常称MyISAM的索引方式为<strong>非聚集索引</strong></p>\n<p><br><br></p>\n<h4 id=\"InnoDB\"><a href=\"#InnoDB\" class=\"headerlink\" title=\"InnoDB\"></a>InnoDB</h4><p>虽然InnoDB也使用B+Tree作为索引结构，但具体实现方式却与MyISAM截然不同.</p>\n<p><strong>主键索引</strong></p>\n<p><strong>在InnoDB中，表数据文件本身就是按B+Tree组织的一个索引结构，这棵<code>树的叶节点data域保存了完整的数据记录</code>。<code>这个索引的key是数据表的主键，因此InnoDB表数据文件本身就是主索引</code>。</strong></p>\n<p><img src=\"https://img-my.csdn.net/uploads/201208/01/1343758042_8526.png\" alt=\"|center\"></p>\n<p>如图，InnoDB主索引同时也是数据文件。另外叶节点包含了完整的数据记录。这种索引叫做<code>聚集索引</code>。</p>\n<p>因为InnoDB的数据文件本身要按主键聚集，所以<code>InnoDB要求表必须有主键</code>（MyISAM可以没有），<strong>如果没有显式指定，则MySQL系统会自动选择一个可以唯一标识数据记录的列作为主键，如果不存在这种列，则MySQL自动为InnoDB表生成一个隐含字段作为主键</strong>，这个字段长度为6个字节，类型为长整形。</p>\n<p><br><br></p>\n<p><strong>InnoDB的辅助索引</strong></p>\n<p><code>InnoDB的所有辅助索引都引用主键作为data域</code>。例如，下图为定义在Col3上的一个辅助索引：</p>\n<p><img src=\"https://img-my.csdn.net/uploads/201208/01/1343758434_9462.png\" alt=\"|center\"></p>\n<p><strong>InnoDB 表是基于聚簇索引建立的。因此InnoDB 的索引能提供一种非常快速的主键查找性能,<code>但是辅助索引搜索需要检索两遍索引：首先检索辅助索引获得主键，然后用主键到主索引中检索获得记录。</code></strong>.</p>\n<p>所以，它的辅助索引（Secondary Index， 也就是非主键索引）也会包含主键列，所以，如果主键定义的比较大，其他索引也将很大。如果想在表上定义 、很多索引，则争取尽量把主键定义得小一些。InnoDB 不会压缩索引。</p>\n<hr>\n<p><br></p>\n<h3 id=\"Linux-文件系统\"><a href=\"#Linux-文件系统\" class=\"headerlink\" title=\"Linux 文件系统\"></a>Linux 文件系统</h3><hr>\n<p><br></p>\n<p>参考文献：</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/hguisu/article/details/7786014\" target=\"_blank\" rel=\"noopener\">B-树和B+树的应用：数据搜索和数据库索引</a></li>\n<li><a href=\"https://www.cnblogs.com/maybe2030/p/4732377.html\" target=\"_blank\" rel=\"noopener\">数据结构中各种树</a></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjt9ymru70001lf6v3trcejl4","category_id":"cjt9ymrug0005lf6vehzs7wkz","_id":"cjt9ymruk000alf6vps0qy6hj"},{"post_id":"cjt9ymruc0003lf6v8mcaqf93","category_id":"cjt9ymrui0007lf6v653oxbfr","_id":"cjt9ymrun000clf6v42f07jas"},{"post_id":"cjt9ymrwx000ilf6vo3dcbydk","category_id":"cjt9ymrwz000jlf6v6g2f0wyv","_id":"cjt9ymrx0000mlf6vhc9mm7l6"},{"post_id":"cjt9ymryc000plf6vrbq9l7ei","category_id":"cjt9ymrwz000jlf6v6g2f0wyv","_id":"cjt9ymryf000slf6vnw5ucgfq"},{"post_id":"cjt9ymryp000tlf6vqwpmp8w3","category_id":"cjt9ymryp000ulf6vbpl6aka7","_id":"cjt9ymryq000xlf6vocsikx7z"},{"post_id":"cjt9ynf7k0013lf6vspyl3z6b","category_id":"cjt9ymrvf000elf6v311zrfzq","_id":"cjt9ynf7m0015lf6v46juimp1"}],"PostTag":[{"post_id":"cjt9ymru70001lf6v3trcejl4","tag_id":"cjt9ymruh0006lf6vzud6cvjy","_id":"cjt9ymruj0009lf6v7qc6tq61"},{"post_id":"cjt9ymruc0003lf6v8mcaqf93","tag_id":"cjt9ymrui0008lf6vx5vyh1ey","_id":"cjt9ymrul000blf6vuuqbvh9h"},{"post_id":"cjt9ymrwx000ilf6vo3dcbydk","tag_id":"cjt9ymrwz000klf6v4p73olnl","_id":"cjt9ymrx0000nlf6vuq1zylkp"},{"post_id":"cjt9ymrwx000ilf6vo3dcbydk","tag_id":"cjt9ymrx0000llf6vrhb4uwos","_id":"cjt9ymrx3000olf6v22ycvej3"},{"post_id":"cjt9ymryc000plf6vrbq9l7ei","tag_id":"cjt9ymrwz000klf6v4p73olnl","_id":"cjt9ymryf000qlf6vqh0kgb87"},{"post_id":"cjt9ymryc000plf6vrbq9l7ei","tag_id":"cjt9ymrx0000llf6vrhb4uwos","_id":"cjt9ymryf000rlf6voemv45md"},{"post_id":"cjt9ymryp000tlf6vqwpmp8w3","tag_id":"cjt9ymryq000vlf6vbr1kryb8","_id":"cjt9ymryq000zlf6v4lyiw4r1"},{"post_id":"cjt9ymryp000tlf6vqwpmp8w3","tag_id":"cjt9ymryq000wlf6v6cz85ftm","_id":"cjt9ymryq0010lf6v8tbxjd3k"},{"post_id":"cjt9ymryp000tlf6vqwpmp8w3","tag_id":"cjt9ymryq000ylf6v37zpvgvt","_id":"cjt9ymryq0011lf6v1lcdsaqm"},{"post_id":"cjt9ymryp000tlf6vqwpmp8w3","tag_id":"cjt9ymrx0000llf6vrhb4uwos","_id":"cjt9ymryq0012lf6v8rsapp8a"},{"post_id":"cjt9ynf7k0013lf6vspyl3z6b","tag_id":"cjt9yoo3i0016lf6vzjb48s6u","_id":"cjt9yoo3j0018lf6vhnwudodk"},{"post_id":"cjt9ynf7k0013lf6vspyl3z6b","tag_id":"cjt9yoqao001alf6vjw87js9r","_id":"cjt9yoqap001clf6vkjrsizac"},{"post_id":"cjt9ynf7k0013lf6vspyl3z6b","tag_id":"cjt9yosfk001elf6vwuf7fzbr","_id":"cjt9yosfn001glf6v402kw4dl"},{"post_id":"cjt9ynf7k0013lf6vspyl3z6b","tag_id":"cjt9yosfl001flf6vr0w2qxd7","_id":"cjt9yosfn001hlf6voy5tqxt4"}],"Tag":[{"name":"mysql","_id":"cjt9ymruh0006lf6vzud6cvjy"},{"name":"test","_id":"cjt9ymrui0008lf6vx5vyh1ey"},{"name":"树，B树，mysql索引，文件系统","_id":"cjt9ymrvf000flf6vlcecr7dq"},{"name":"springboot","_id":"cjt9ymrwz000klf6v4p73olnl"},{"name":"源码分析","_id":"cjt9ymrx0000llf6vrhb4uwos"},{"name":"spring","_id":"cjt9ymryq000vlf6vbr1kryb8"},{"name":"beanDefinition","_id":"cjt9ymryq000wlf6v6cz85ftm"},{"name":"createBean","_id":"cjt9ymryq000ylf6v37zpvgvt"},{"name":"树","_id":"cjt9yoo3i0016lf6vzjb48s6u"},{"name":"B树，mysql索引，文件系统","_id":"cjt9yoo3i0017lf6vh3uq9hyi"},{"name":"B树","_id":"cjt9yoqao001alf6vjw87js9r"},{"name":"mysql索引，文件系统","_id":"cjt9yoqao001blf6vcyqjaact"},{"name":"mysql索引","_id":"cjt9yosfk001elf6vwuf7fzbr"},{"name":"文件系统","_id":"cjt9yosfl001flf6vr0w2qxd7"}]}}