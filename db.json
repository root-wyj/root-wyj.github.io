{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/icon.png","path":"icon.png","modified":1,"renderable":0},{"_id":"source/images/springboot启动流程-1.png","path":"images/springboot启动流程-1.png","modified":1,"renderable":0},{"_id":"source/images/common/icon.png","path":"images/common/icon.png","modified":1,"renderable":0},{"_id":"source/images/common/avatar.jpeg","path":"images/common/avatar.jpeg","modified":1,"renderable":0},{"_id":"source/images/springboot-environment-1.png","path":"images/springboot-environment-1.png","modified":1,"renderable":0},{"_id":"source/images/springboot启动流程-4.png","path":"images/springboot启动流程-4.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"source/images/common/wx_pay.jpg","path":"images/common/wx_pay.jpg","modified":1,"renderable":0},{"_id":"source/images/springboot启动流程-2.png","path":"images/springboot启动流程-2.png","modified":1,"renderable":0},{"_id":"source/images/springboot启动流程-3.png","path":"images/springboot启动流程-3.png","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"source/images/springboot-environment-2.png","path":"images/springboot-environment-2.png","modified":1,"renderable":0},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"source/images/springboot-environment-3.png","path":"images/springboot-environment-3.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/404.html","hash":"d6cd47ba4ab178269d9e7be773e521a3f74a738b","modified":1550131825439},{"_id":"source/icon.png","hash":"6bcb01f785c25f54f05f4346e5ae3bd86a8ecf44","modified":1550130786166},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1501628194000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1501628194000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1501628194000},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1501628194000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1501628194000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1501628194000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1501628194000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1501628194000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1501628194000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1501628194000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1501628194000},{"_id":"themes/next/README.en.md","hash":"32d6cdfec1447f54aae1d7f1365ce6733dfcec8f","modified":1501628194000},{"_id":"themes/next/bower.json","hash":"7d7938f9da896fe710aa0e9120140e528bf058df","modified":1501628194000},{"_id":"themes/next/_config.yml","hash":"ca8a38bdce77ef83e46d83c8ddf1bb06ef1234cc","modified":1550135174741},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1501628194000},{"_id":"themes/next/package.json","hash":"193dad6f59a588908fac082cc46fe067dac1b84d","modified":1501628194000},{"_id":"source/categories/index.md","hash":"e74dfceab1988c564dd2a3c0e2b8d38260416111","modified":1550128626012},{"_id":"source/_posts/hello-world.md","hash":"fbda7cd54753585dbebae9c95fcd110fd05e4840","modified":1550128550614},{"_id":"source/_posts/environment.md","hash":"c2deeb647badb849fec213c1789242338acbbe86","modified":1550133265181},{"_id":"source/tags/index.md","hash":"0f2b8d9c3ae30d8c84202207cbb62db944d27d0d","modified":1550128131867},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1501628194000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"b56c01cdfc6ee7ffea8a8a9fa149263f368caef6","modified":1501628194000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"37bd0ec1d655c601946fc5f5ac2fe8ed1e529b77","modified":1501628194000},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1501628194000},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1501628194000},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1501628194000},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1501628194000},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1501628194000},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1501628194000},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1501628194000},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1501628194000},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1501628194000},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1501628194000},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1501628194000},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1501628194000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"ee2576869e0a465b56d1737631d2bb4b67e56ede","modified":1550131049501},{"_id":"themes/next/layout/_layout.swig","hash":"06b1eab2e00273e0b94bd32dc682bd92c1e0a747","modified":1501628194000},{"_id":"themes/next/layout/archive.swig","hash":"383f64deab105724fd5512371963bd9e9aafbffd","modified":1501628194000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1501628194000},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1501628194000},{"_id":"themes/next/layout/page.swig","hash":"37c874cd720acf0eda8d26e063278f2b6ae8d3a6","modified":1501628194000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1501628194000},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1501628194000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1501628194000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1501628194000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1501628194000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1501628194000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1501628194000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1501628194000},{"_id":"source/images/springboot启动流程-1.png","hash":"38b7ad6f1cb198d57d04b1210eeebfff2750afa9","modified":1550133116708},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"source/images/common/icon.png","hash":"6bcb01f785c25f54f05f4346e5ae3bd86a8ecf44","modified":1550132993761},{"_id":"source/images/common/avatar.jpeg","hash":"b98e5ae0cffc8e3450e043c740a683677d3c11bd","modified":1550132993761},{"_id":"source/images/springboot-environment-1.png","hash":"d9d763c9737ca77457d1460fca9bb4af626b0796","modified":1550133116710},{"_id":"source/images/springboot启动流程-4.png","hash":"3fe64cbe967d12f6e6c738c599841e6e6eca6ef2","modified":1550133116709},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1501628194000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1501628194000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"53d4f83b2b7fb4387dfc9fe81519abd56fbce4ae","modified":1501628194000},{"_id":"themes/next/layout/_macro/post.swig","hash":"911363776867d9523a3e322cdf591d49cd166403","modified":1501628194000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1501628194000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"5d5f70deb6074cb4dd0438463e14ccf89213c282","modified":1501628194000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1501628194000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"ce7094ee05878161e7568a6dfae5b56ff3fbd6e1","modified":1501628194000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"faa7886ccf986890cd776f4e9d70cb89fe9fda5f","modified":1501628194000},{"_id":"themes/next/layout/_partials/head.swig","hash":"1f14d3f494b2dbbcee802fd6f6d1abd5b7e2304c","modified":1501628194000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1501628194000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1501628194000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"2a43861f2b901357cc443b7de74563427f8ebd1b","modified":1550131112856},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1501628194000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1501628194000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1501628194000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1501628194000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1501628194000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1501628194000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1501628194000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1501628194000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1501628194000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1501628194000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1501628194000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1501628194000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1501628194000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1501628194000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1501628194000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1501628194000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1501628194000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1501628194000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1501628194000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1501628194000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1501628194000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1501628194000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1501628194000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1501628194000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1501628194000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1501628194000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1501628194000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1501628194000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1501628194000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1501628194000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1501628194000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1501628194000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1501628194000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1501628194000},{"_id":"source/images/common/wx_pay.jpg","hash":"1c6332fac484061ac639ac68e34924811a07165f","modified":1550132993761},{"_id":"source/images/springboot启动流程-2.png","hash":"f5b3410ae427d4f5f9b168ba34ec5a66d44426b9","modified":1550133116711},{"_id":"source/images/springboot启动流程-3.png","hash":"01e18a7013aed4ebb7d1daf7dd147a72e70784f8","modified":1550133116711},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1501628194000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1501628194000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1501628194000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1501628194000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1501628194000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1501628194000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1501628194000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1501628194000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1501628194000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1501628194000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1501628194000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1501628194000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"ee63aa2e49507b884a2d56778479cf01c723d751","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1501628194000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1501628194000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1501628194000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1501628194000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1501628194000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1501628194000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1501628194000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"eaedfaf06dae94ba77a8f4893e2e434bf8859bac","modified":1501628194000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1501628194000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"49b5210fa62d6cbc6a98f57d89d5067a06ab3561","modified":1501628194000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1501628194000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"cfee25d790e4f9b7d57f0dc7e2ea9c1649f08f11","modified":1501628194000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d477196c5699c8261b08e993a77ef67054d86166","modified":1501628194000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1501628194000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1501628194000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1501628194000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1501628194000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1501628194000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1501628194000},{"_id":"themes/next/source/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1501628194000},{"_id":"themes/next/source/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1501628194000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1501628194000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1501628194000},{"_id":"themes/next/source/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1501628194000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1501628194000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1501628194000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1501628194000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1501628194000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1501628194000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1501628194000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1501628194000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1501628194000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1501628194000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1501628194000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1501628194000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1501628194000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1501628194000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1501628194000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1501628194000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1501628194000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1501628194000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1501628194000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1501628194000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1501628194000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1501628194000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1501628194000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1501628194000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1501628194000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d026c8489f66ab6c12ad04bd37f1d5b6f2f3f0d1","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1501628194000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1501628194000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1501628194000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"2915df7152ea095a6290ef69157fd67669e0e793","modified":1501628194000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"86b6fd7f1b1be3ae98f8af6b23a6b1299c670ce9","modified":1501628194000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1501628194000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1501628194000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"bc8c388553bbcf95897459a466ba35bffd5ec5f0","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1501628194000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1501628194000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1501628194000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1501628194000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1501628194000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1501628194000},{"_id":"source/images/springboot-environment-2.png","hash":"c9630f14bc6510e5f66be08e8065944a917f9387","modified":1550133116772},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ee554b1031ef0070a5916477939021800e3c9d27","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ed88c8b51d0517759c777e71a6bfbe2907bcd994","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"4fda5d38c6c8d910e3bf5c74a48a8d4a3f3dc73d","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"51eca243220cf57133a4becae9b78514bcfdc723","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"65a64d5662637b66e2f039a5f58217afe7a6e800","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"57d2c8a060f5e4e1a0aef9aae11a0016cf7ac5ba","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"45df0cf4c97b47e05573bcd41028ee50f3fdf432","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"aeff0e6e23725e8baea27c890ccbbf466024f767","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1501628194000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1501628194000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1501628194000},{"_id":"source/images/springboot-environment-3.png","hash":"3b254876d6079c4bf34eb6b5424d7ef540c75a5c","modified":1550133117015}],"Category":[{"name":"Hello World","_id":"cjs4ehv7u00032b6v5xduwpdp"},{"name":"SpringBoot","_id":"cjs4ehvet00092b6vga0v3so4"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","date":"2019-02-14T08:10:25.439Z","updated":"2019-02-14T08:10:25.439Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cjs4ehv6p00002b6v68pkmaqs","content":"<!DOCTYPE HTML>\n<html>\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>"},{"title":"categories","date":"2019-02-14T07:11:12.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-02-14 15:11:12\ntype: \"categories\"\n---\n","updated":"2019-02-14T07:17:06.012Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjs4ehv7p00012b6v444lmb06","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-02-14T07:08:18.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-02-14 15:08:18\ntype: tags\n---\n","updated":"2019-02-14T07:08:51.867Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjs4ehvcf00072b6vhpsy5f5z","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ncategories:\n  - \"Hello World\"\ntags:\n  - test\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2019-02-13T10:49:48.058Z","updated":"2019-02-14T07:15:50.614Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjs4ehv7q00022b6vkbojz7r6","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"SpringBoot Environment","_content":"\n# SpringBoot Environment\n\n<br>\n\n- [SpringBoot Environment](#springboot-environment)\n  - [背景类介绍](#背景类介绍)\n  - [源码分析 Environment 的初始化过程](#源码分析-environment-的初始化过程)\n\n<br>\n\n在SpringBoot中，每个`ApplicationContext`都有相应的环境信息，比如`AbstractApplicationContext`中就有`private ConfigurableEnvironment environment;` **Environment 可以理解为一些环境上下文，也就是存储了当前运行环境的各种属性。**\n\n下面就看看Environment到底是什么，以及在初始化的时候，他做了哪些相关工作。\n\n<br>\n\n------------\n\n## 背景类介绍\n\n<br>\n\n**`Environment && PropertyResolver`**\n\n<br>\n\n我们常使用的Environment就是`StandardServletEnvironment` ，那么首先我们就看看该类的体系结构。\n\n![|center](/images/springboot-environment-1.png)\n\n可以看到，`StandardServletEnvironment` 继承自 `StandardEnvironment`，实现了`ConfigurableWebEnvironment`接口。而再往下还有很多的接口定义和抽象类，下面我们都来看看。\n\n- `PropertyResolver` 提供了访问属性的接口定义，忽略底层resource的实现。\n- `Environment` 继承自`PropertyResolver`，提供访问和判断profiles的功能。\n- `ConfigurablePropertyResolver` 继承自`PropertyResolver`，主要提供属性类型转换(基于`org.springframework.core.convert.ConversionService`)功能。定义了`get|setConversionService,setValueSeparator,setPlaceholderPrefix|Suffix`等方法，就是丰富了解析的功能。\n- `ConfigurableEnvironment` 继承自`ConfigurablePropertyResolver`和Environment，并且提供设置激活的profile和默认的profile的功能。\n- `ConfigurableWebEnvironment` 继承自`ConfigurableEnvironment`，并且提供配置Servlet上下文和Servlet参数的功能。\n- `AbstractEnvironment` 实现了`ConfigurableEnvironment`接口，提供默认属性和存储容器的定义，并且为子类预留可覆盖了扩展方法。\n- `StandardEnvironment` 继承自`AbstractEnvironment`，非Servlet(Web)环境下的标准Environment实现。\n- `StandardServletEnvironment` 继承自`StandardEnvironment`，Servlet(Web)环境下的标准Environment实现。\n\n<br>\n\n如果有不是特别清楚的，可以结合代码看看每个类中方法的定义，就可以理解上面各个类的功能了。\n\n<br>\n\n**`PropertyResource`**\n\n<br>\n\n在`AbstractEnvironment`中，用来保存环境中各种属性的就是`MutablePropertySources`。下面从`MutablePropertySources`入手，了解整个`PropertyResource`\n\n```java\n/**\n * 该类提供了PropertySources的具体实现（也是唯一的），里面保存的是一个CopyOnWriteArrayList<PropertySource<?>>的数组。\n * 而且好提供了各种方法，用来插入、删除 list中的元素 PropertySource\n */\npublic class MutablePropertySources implements PropertySources {\n\n    // 这里定义了对多个PropertySource的真正数据结构是 CopyOnWriteArrayList<ropertySource<?>>\n\tprivate final List<PropertySource<?>> propertySourceList = new CopyOnWriteArrayList<>();\n\n    ...\n}\n```\n\n下面再看看 `PropertySources`\n\n```java\n/**\n * 就是定义了多个PropertySource，和containers 和 PropertySource get这种操作\n *\n */\npublic interface PropertySources extends Iterable<PropertySource<?>> {\n\n\t/**\n\t * Return a sequential {@link Stream} containing the property sources.\n\t * @since 5.1\n\t */\n\tdefault Stream<PropertySource<?>> stream() {\n\t\treturn StreamSupport.stream(spliterator(), false);\n\t}\n\n\t/**\n\t * Return whether a property source with the given name is contained.\n\t * @param name the {@linkplain PropertySource#getName() name of the property source} to find\n\t */\n\tboolean contains(String name);\n\n\t/**\n\t * Return the property source with the given name, {@code null} if not found.\n\t * @param name the {@linkplain PropertySource#getName() name of the property source} to find\n\t */\n\t@Nullable\n\tPropertySource<?> get(String name);\n\n}\n\n```\n\n<br>\n\n最后看看`PropertySource`，这里面还是有点东西的。\n\n```java\npublic abstract class PropertySource<T> {\n\n\tprotected final String name;\n\n\tprotected final T source;\n\n\tpublic PropertySource(String name, T source) {\n\t\tAssert.hasText(name, \"Property source name must contain at least one character\");\n\t\tAssert.notNull(source, \"Property source must not be null\");\n\t\tthis.name = name;\n\t\tthis.source = source;\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic PropertySource(String name) {\n\t\tthis(name, (T) new Object());\n\t}\n\n\n\tpublic String getName() {\n\t\treturn this.name;\n\t}\n\n\tpublic T getSource() {\n\t\treturn this.source;\n\t}\n\n\t/**\n\t * Return whether this {@code PropertySource} contains the given name.\n\t * <p>This implementation simply checks for a {@code null} return value\n\t * from {@link #getProperty(String)}. Subclasses may wish to implement\n\t * a more efficient algorithm if possible.\n\t * @param name the property name to find\n\t */\n\tpublic boolean containsProperty(String name) {\n\t\treturn (getProperty(name) != null);\n\t}\n\n\t/**\n\t * Return the value associated with the given name,\n\t * or {@code null} if not found.\n\t * @param name the property to find\n\t * @see PropertyResolver#getRequiredProperty(String)\n\t */\n\t@Nullable\n\tpublic abstract Object getProperty(String name);\n\n\n\t// equals 和 hashCode 都只和 name 属性相关\n\t@Override\n\tpublic boolean equals(Object other) {\n\t\treturn (this == other || (other instanceof PropertySource &&\n\t\t\t\tObjectUtils.nullSafeEquals(this.name, ((PropertySource<?>) other).name)));\n\t}\n\t@Override\n\tpublic int hashCode() {\n\t\treturn ObjectUtils.nullSafeHashCode(this.name);\n\t}\n\n\n    // 把String类型的name转换为一个可以判断存在与否的 ComparisonPropertySource\n    // 正好 判断 equals 只根据name，所以这里也是妥妥的\n\t/**\n\t * Return a {@code PropertySource} implementation intended for collection comparison purposes only.\n\t * <p>Primarily for internal use, but given a collection of {@code PropertySource} objects, may be\n\t * used as follows:\n\t * <pre class=\"code\">\n\t * {@code List<PropertySource<?>> sources = new ArrayList<PropertySource<?>>();\n\t * sources.add(new MapPropertySource(\"sourceA\", mapA));\n\t * sources.add(new MapPropertySource(\"sourceB\", mapB));\n\t * assert sources.contains(PropertySource.named(\"sourceA\"));\n\t * assert sources.contains(PropertySource.named(\"sourceB\"));\n\t * assert !sources.contains(PropertySource.named(\"sourceC\"));\n\t * }</pre>\n\t * The returned {@code PropertySource} will throw {@code UnsupportedOperationException}\n\t * if any methods other than {@code equals(Object)}, {@code hashCode()}, and {@code toString()}\n\t * are called.\n\t * @param name the name of the comparison {@code PropertySource} to be created and returned.\n\t */\n\tpublic static PropertySource<?> named(String name) {\n\t\treturn new ComparisonPropertySource(name);\n\t}\n\n\n\t/**\n\t * {@code PropertySource} to be used as a placeholder in cases where an actual\n\t * property source cannot be eagerly initialized at application context\n\t * creation time.  For example, a {@code ServletContext}-based property source\n\t * must wait until the {@code ServletContext} object is available to its enclosing\n\t * {@code ApplicationContext}.  In such cases, a stub should be used to hold the\n\t * intended default position/order of the property source, then be replaced\n\t * during context refresh.\n     * 上面的注释也写的很清楚了，就是用来占位的，因为有一些PropertySource的初始化较晚，比如说 ServletContext相关的环境，在\n     * 初始化的时候是没有的，可以用改对象来占位。\n\t * @see org.springframework.context.support.AbstractApplicationContext#initPropertySources()\n\t * @see org.springframework.web.context.support.StandardServletEnvironment\n\t * @see org.springframework.web.context.support.ServletContextPropertySource\n\t */\n\tpublic static class StubPropertySource extends PropertySource<Object> {\n\n\t\tpublic StubPropertySource(String name) {\n\t\t\tsuper(name, new Object());\n\t\t}\n\n\t\t/**\n\t\t * Always returns {@code null}.\n\t\t */\n\t\t@Override\n\t\t@Nullable\n\t\tpublic String getProperty(String name) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\n\t/**\n\t * PropertySource.named(String) 返回的就是该类型的对象。\n     * 该子类是专门用来封装String类型的name，做比较的，而且他的所有getSource等相关方法，全都是抛出异常\n\t */\n\tstatic class ComparisonPropertySource extends StubPropertySource {\n\n\t\tprivate static final String USAGE_ERROR =\n\t\t\t\t\"ComparisonPropertySource instances are for use with collection comparison only\";\n\n\t\tpublic ComparisonPropertySource(String name) {\n\t\t\tsuper(name);\n\t\t}\n\n\t\t@Override\n\t\tpublic Object getSource() {\n\t\t\tthrow new UnsupportedOperationException(USAGE_ERROR);\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean containsProperty(String name) {\n\t\t\tthrow new UnsupportedOperationException(USAGE_ERROR);\n\t\t}\n\n\t\t@Override\n\t\t@Nullable\n\t\tpublic String getProperty(String name) {\n\t\t\tthrow new UnsupportedOperationException(USAGE_ERROR);\n\t\t}\n\t}\n\n}\n```\n\n这个`PropertySource`类和map这种的用来存储键值对的类稍微有一点不一样，PropertySource中的source是随意类型的，而且key-value都是存在source里面的。可以简单的看一下常用的两个实现`MapPropertySource`,``\n\n```java\npublic class MapPropertySource extends EnumerablePropertySource<Map<String, Object>> {\n\n\tpublic MapPropertySource(String name, Map<String, Object> source) {\n\t\tsuper(name, source);\n\t}\n\n\t@Override\n\t@Nullable\n\tpublic Object getProperty(String name) {\n\t\treturn this.source.get(name);\n\t}\n\n\t@Override\n\tpublic boolean containsProperty(String name) {\n\t\treturn this.source.containsKey(name);\n\t}\n\n\t@Override\n\tpublic String[] getPropertyNames() {\n\t\treturn StringUtils.toStringArray(this.source.keySet());\n\t}\n\n}\n\n\npublic class PropertiesPropertySource extends MapPropertySource {\n\n\t@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n\tpublic PropertiesPropertySource(String name, Properties source) {\n\t\tsuper(name, (Map) source);\n\t}\n\n\tprotected PropertiesPropertySource(String name, Map<String, Object> source) {\n\t\tsuper(name, source);\n\t}\n\n}\n```\n\n<br>\n\n最后，我们知道`AbstractEnvironment`中存储的是`MutablePropertySources`, 是一个数组，那么在`Environment`中怎么getProperty的呢？\n\n```java\npublic abstract class AbstractEnvironment implements ConfigurableEnvironment {\n\n    ...\n\n    private final ConfigurablePropertyResolver propertyResolver =\n\t\t\tnew PropertySourcesPropertyResolver(this.propertySources);\n\n    // 是代理给了 PropertySourcesPropertyResolver propertyResolver\n\t@Override\n\t@Nullable\n\tpublic String getProperty(String key) {\n\t\treturn this.propertyResolver.getProperty(key);\n\t}\n}\n\npublic class PropertySourcesPropertyResolver extends AbstractPropertyResolver {\n\n\t@Nullable\n\tprivate final PropertySources propertySources;\n\n\t@Override\n\t@Nullable\n\tpublic String getProperty(String key) {\n\t\treturn getProperty(key, String.class, true);\n\t}\n\n    // 其实就是扫描 PropertySources 中 所有的 PropertySource 查每个PropertySource中是否存在\n\t@Nullable\n\tprotected <T> T getProperty(String key, Class<T> targetValueType, boolean resolveNestedPlaceholders) {\n\t\tif (this.propertySources != null) {\n\t\t\tfor (PropertySource<?> propertySource : this.propertySources) {\n\t\t\t\tObject value = propertySource.getProperty(key);\n\t\t\t\tif (value != null) {\n\t\t\t\t\tif (resolveNestedPlaceholders && value instanceof String) {\n\t\t\t\t\t\tvalue = resolveNestedPlaceholders((String) value);\n\t\t\t\t\t}\n\t\t\t\t\tlogKeyFound(key, propertySource, value);\n\t\t\t\t\treturn convertValueIfNecessary(value, targetValueType);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n    ...\n}\n\n```\n\n<br>\n\n---------------\n\n## 源码分析 Environment 的初始化过程\n\n入口点在`SpringApplication.run`方法的`ConfigurableEnvironment environment = prepareEnvironment(listeners,applicationArguments);`。\n\n```java\n// environment 在该方法中完成整个初始化\nprivate ConfigurableEnvironment prepareEnvironment(\n        SpringApplicationRunListeners listeners,\n        ApplicationArguments applicationArguments) {\n    // 根据不同的环境创建不同的 Environment 实例\n    ConfigurableEnvironment environment = getOrCreateEnvironment();\n    // configEnvironment 为初始化 Environment 准备好数据\n    configureEnvironment(environment, applicationArguments.getSourceArgs());\n    listeners.environmentPrepared(environment);\n    bindToSpringApplication(environment);\n    if (!this.isCustomEnvironment) {\n        environment = new EnvironmentConverter(getClassLoader())\n                .convertEnvironmentIfNecessary(environment, deduceEnvironmentClass());\n    }\n    ConfigurationPropertySources.attach(environment);\n    return environment;\n}\n```\n\n<br>\n\n**`1. createEnvironment`**\n\n<br>\n\n首先根据不同的 applicationType 创建不同的Environment，这里创建的是 `StandardServletEnvironment`\n\n```java\nprivate ConfigurableEnvironment getOrCreateEnvironment() {\n    if (this.environment != null) {\n        return this.environment;\n    }\n    switch (this.webApplicationType) {\n    case SERVLET:\n        return new StandardServletEnvironment();\n    case REACTIVE:\n        return new StandardReactiveWebEnvironment();\n    default:\n        return new StandardEnvironment();\n    }\n}\n\n```\n\n之前说过，`StandardServletEnvironment extends StandardEnvironment`, `StandardEnvironment extends AbstractEnvironment`。所以创建`StandardServletEnvironment`实例，首先会执行父类`AbstractEnvironment`的构造方法（因为这里子类没有实现构造方法），它里面又调用了`customizePropertySources`方法，`StandardServletEnvironment`实现了该方法，所以又会回来调用这个方法。\n\n创建`StandardServletEnvironment`实例的代码会按照代码实际的执行顺序，在下面罗列出来。\n\n```java\n// AbstractEnvironment\npublic AbstractEnvironment() {\n    // 留给子类实现 方法添加propertySource\n    customizePropertySources(this.propertySources);\n}\n\n//StandardServletEnvironment\n@Override\nprotected void customizePropertySources(MutablePropertySources propertySources) {\n    //name=servletConfigInitParams, 给 Servlet configInitParams 占位 \n    propertySources.addLast(new StubPropertySource(SERVLET_CONFIG_PROPERTY_SOURCE_NAME));\n    // servletContextInitParams 给 Servlet contextInitParams 占位\n    propertySources.addLast(new StubPropertySource(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME));\n    if (JndiLocatorDelegate.isDefaultJndiEnvironmentAvailable()) {\n        propertySources.addLast(new JndiPropertySource(JNDI_PROPERTY_SOURCE_NAME));\n    }\n    super.customizePropertySources(propertySources);\n}\n\n// StandardEnvironment\nprotected void customizePropertySources(MutablePropertySources propertySources) {\n    // systemProperties 放入系统环境 键值对\n    propertySources.addLast(new MapPropertySource(SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME, getSystemProperties()));\n    propertySources.addLast(new SystemEnvironmentPropertySource(SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME, getSystemEnvironment()));\n}\n\n```\n\n为什么要用`SubPropertySource`占位，而且还要注意顺序呢？\n\n会想一下，`Environment.getProperty` 的过程，是扫描数组中的每一个`PropertySource`看是否有该property，所以也会涉及到这几个环境优先级的问题。\n\n\n<br>\n\n**`2. configEnvironment`**\n\n<br>\n\n```java\nprotected void configureEnvironment(ConfigurableEnvironment environment,\n        String[] args) {\n    if (this.addConversionService) {\n        // 创建并 返回 ConversionService，这是一个相当庞大的转换Service，用来在读取配置文件的时候，将各种数据类型转换为合适的数据类型\n        ConversionService conversionService = ApplicationConversionService\n                .getSharedInstance();\n        environment.setConversionService(\n                (ConfigurableConversionService) conversionService);\n    }\n    configurePropertySources(environment, args);\n    configureProfiles(environment, args);\n}\n\n// 如果 运行的时候传入了参数，那么会将它保存在 name=springApplicationCommandLineArgs 的propertySource中\nprotected void configurePropertySources(ConfigurableEnvironment environment,\n        String[] args) {\n    MutablePropertySources sources = environment.getPropertySources();\n    if (this.defaultProperties != null && !this.defaultProperties.isEmpty()) {\n        sources.addLast(\n                new MapPropertySource(\"defaultProperties\", this.defaultProperties));\n    }\n    if (this.addCommandLineProperties && args.length > 0) {\n        String name = CommandLinePropertySource.COMMAND_LINE_PROPERTY_SOURCE_NAME;\n        if (sources.contains(name)) {\n            PropertySource<?> source = sources.get(name);\n            CompositePropertySource composite = new CompositePropertySource(name);\n            composite.addPropertySource(new SimpleCommandLinePropertySource(\n                    \"springApplicationCommandLineArgs\", args));\n            composite.addPropertySource(source);\n            sources.replace(name, composite);\n        }\n        else {\n            // 如果有的话，默认会将用户传入的配置 放到第一位。\n            // 所以我们的配置 优先级总是最高的。\n            // 我们传入的 参数 spring.profiles.active=wyj 就会在这里放入 MutablPropertySources 中\n            sources.addFirst(new SimpleCommandLinePropertySource(args));\n        }\n    }\n}\n\nprotected void configureProfiles(ConfigurableEnvironment environment, String[] args) {\n    // 初始化 environment 中的 activeProfiles\n    environment.getActiveProfiles(); // ensure they are initialized\n    // But these ones should go first (last wins in a property key clash)\n    // activePrifiles中加入 ApplicationContext中 额外 用户配置的 additionalProfiles\n    Set<String> profiles = new LinkedHashSet<>(this.additionalProfiles);\n    profiles.addAll(Arrays.asList(environment.getActiveProfiles()));\n    environment.setActiveProfiles(StringUtils.toStringArray(profiles));\n}\n\n\nprotected Set<String> doGetActiveProfiles() {\n    synchronized (this.activeProfiles) {\n        if (this.activeProfiles.isEmpty()) {\n            // 会读取到 已经放入到 PropertySources 中，运行程序时 我们传入的参数。\n            String profiles = getProperty(ACTIVE_PROFILES_PROPERTY_NAME);   // spring.profiles.active\n            if (StringUtils.hasText(profiles)) {\n                // 这里还可以发现，我们可以传入多个 active profiles，用,分割\n                setActiveProfiles(StringUtils.commaDelimitedListToStringArray(\n                        StringUtils.trimAllWhitespace(profiles)));\n            }\n        }\n        return this.activeProfiles;\n    }\n}\n\n```\n\n所以他一共干了三件事：\n\n1. 初始化`ConvertService`\n2. 读取用户运行程序时传入的配置，并保存在Envrionment\n3. 找到active profiles\n\n下面看看 `ConvertService` 中 都是什么：\n\n![|center](/images/springboot-environment-2.png)\n\n![|center](/images/springboot-environment-3.png)\n\n<br>\n\n**`3.1 preLoadProperties`**\n\n<br>\n\n下面就是发出`ApplicationEnvironmentPreparedEvent`事件。\n\n会有好几个listener，我们关心的是`ConfigFileApplicationListener`，下面是几个关心的方法：\n\n```java\npublic class ConfigFileApplicationListener\n\t\timplements EnvironmentPostProcessor, SmartApplicationListener, Ordered {\n    \n    // ApplicationEnvironmentPreparedEvent 事件最终会调用该方法\n\tprivate void onApplicationEnvironmentPreparedEvent(\n\t\t\tApplicationEnvironmentPreparedEvent event) {\n\t\tList<EnvironmentPostProcessor> postProcessors = loadPostProcessors();\n\t\tpostProcessors.add(this);\n\t\tAnnotationAwareOrderComparator.sort(postProcessors);\n        // 调用 EnvironmentPostProcessor 后处理器\n\t\tfor (EnvironmentPostProcessor postProcessor : postProcessors) {\n\t\t\tpostProcessor.postProcessEnvironment(event.getEnvironment(),\n\t\t\t\t\tevent.getSpringApplication());\n\t\t}\n\t}\n\n    // 使用 FactiriesLoader 加载 EnvironmentPostProcessor\n\tList<EnvironmentPostProcessor> loadPostProcessors() {\n\t\treturn SpringFactoriesLoader.loadFactories(EnvironmentPostProcessor.class,\n\t\t\t\tgetClass().getClassLoader());\n\t}\n\n    // 注意 他也是 实现了 EnvironmentPostProcessor 接口的\n    // 而且，也定义在了 spring.factories 中，所以 也会会掉这个方法\n    @Override\n\tpublic void postProcessEnvironment(ConfigurableEnvironment environment,\n\t\t\tSpringApplication application) {\n\t\taddPropertySources(environment, application.getResourceLoader());\n\t}\n\n    protected void addPropertySources(ConfigurableEnvironment environment,\n\t\t\tResourceLoader resourceLoader) {\n        // 在 systemEnvironment 后面 添加 name=random,value=new Random(); 的PropertySource\n\t\tRandomValuePropertySource.addToEnvironment(environment);\n\t\tnew Loader(environment, resourceLoader).load();\n\t}\n\n    ...\n}\n```\n\n\n<br>\n\n**`3.2 loadProperties`**\n\n<br>\n\n`Loader` 是 `ConfigFileApplicationListener` 的内部类。\n\n```java\nprivate class Loader {\n    Loader(ConfigurableEnvironment environment, ResourceLoader resourceLoader) {\n        this.environment = environment;\n        this.placeholdersResolver = new PropertySourcesPlaceholdersResolver(\n                this.environment);\n        this.resourceLoader = (resourceLoader != null) ? resourceLoader\n                : new DefaultResourceLoader();\n        // 找到的 PropertySourceLoader 有两个，分别是 PropertiesPropertySourceLoader和YamlPropertySourceLoader \n        this.propertySourceLoaders = SpringFactoriesLoader.loadFactories(\n                PropertySourceLoader.class, getClass().getClassLoader());\n    }\n\n    public void load() {\n        this.profiles = new LinkedList<>();\n        this.processedProfiles = new LinkedList<>();\n        this.activatedProfiles = false;\n        this.loaded = new LinkedHashMap<>();\n        // 初始化 profiles\n        // 首先会加入一个 null\n        // 如果 activeProfiles 不为null，加入到list中\n        // 为null，吧defaultProfiles 加入到list中\n        // 这里 我们配置了了 activeProfiles=wyj，所里里面有两个 一个null，一个 wyj\n        initializeProfiles();\n        while (!this.profiles.isEmpty()) {\n            Profile profile = this.profiles.poll();\n            if (profile != null && !profile.isDefaultProfile()) {\n                addProfileToEnvironment(profile.getName());\n            }\n            // 第二个参数 this::getPositiveProfileFilter 返回的是一个lambda 表达式的filter ，\n            // 第三个参数 addToLoaded(MutablePropertySources::addLast, false)，addToLoaded 返回的还是一个lambda表达式，整个的作用大概就是将解析出来的数据添加到 propertySources 的最后。\n            load(profile, this::getPositiveProfileFilter,\n                    addToLoaded(MutablePropertySources::addLast, false));\n            this.processedProfiles.add(profile);\n        }\n        resetEnvironmentProfiles(this.processedProfiles);\n        load(null, this::getNegativeProfileFilter,\n                addToLoaded(MutablePropertySources::addFirst, true));\n        addLoadedPropertySources();\n    }\n\n    ...\n\n}\n\n```\n\n<br>\n\n`load`\n\n```java\n// 整个代码逻辑 就是：\n// 获取所有扫描路径 和 扫描的文件名，然后便利load\nprivate void load(Profile profile, DocumentFilterFactory filterFactory,\n        DocumentConsumer consumer) {\n    getSearchLocations().forEach((location) -> {\n        boolean isFolder = location.endsWith(\"/\");\n        Set<String> names = isFolder ? getSearchNames() : NO_SEARCH_NAMES;\n        names.forEach(\n                (name) -> load(location, name, profile, filterFactory, consumer));\n    });\n}\n\n// 配置文件的路径\nprivate Set<String> getSearchLocations() {\n    // 首先如果配置了 spring.config.location ，就返回我们配置的路径\n    if (this.environment.containsProperty(CONFIG_LOCATION_PROPERTY)) {\n        return getSearchLocations(CONFIG_LOCATION_PROPERTY);\n    }\n    // 然后扫描 spring.config.additional-location 所配置的（这是让谁用的？可能是留给三方jar包的接口？）\n    Set<String> locations = getSearchLocations(\n            CONFIG_ADDITIONAL_LOCATION_PROPERTY);\n    // 最后加上默认的扫描路径。DEFAULT_SEARCH_LOCATIONS = classpath:/,classpath:/config/,file:./,file:./config/\n    locations.addAll(\n            asResolvedSet(ConfigFileApplicationListener.this.searchLocations,\n                    DEFAULT_SEARCH_LOCATIONS));\n    return locations;\n}\n\n// 配置文件的名字\nprivate Set<String> getSearchNames() {\n    // 如果配置了 spring.config.name 属性，会返回我们配置的 配置文件名字，\n    // 注意，这里可以配置多个 试用,分割\n    if (this.environment.containsProperty(CONFIG_NAME_PROPERTY)) {\n        String property = this.environment.getProperty(CONFIG_NAME_PROPERTY);\n        return asResolvedSet(property, null);\n    }\n    // 如果没有配置返回默认的 DEFAULT_NAMES=application\n    return asResolvedSet(ConfigFileApplicationListener.this.names, DEFAULT_NAMES);\n}\n\n// 真正的load方法\nprivate void load(String location, String name, Profile profile,\n        DocumentFilterFactory filterFactory, DocumentConsumer consumer) {\n    // 这块代码不知道 何时 运行，因为 name 一般不会为空啊\n    if (!StringUtils.hasText(name)) {\n        for (PropertySourceLoader loader : this.propertySourceLoaders) {\n            if (canLoadFileExtension(loader, location)) {\n                load(loader, location, profile,\n                        filterFactory.getDocumentFilter(profile), consumer);\n                return;\n            }\n        }\n    }\n\n    // loader 有两种，PropertiesPropertySourceLoader和YamlPropertySourceLoader \n    // 每个loader支持的文件后缀也有两种，分别便利，尝试去加载 \n    Set<String> processed = new HashSet<>();\n    for (PropertySourceLoader loader : this.propertySourceLoaders) {\n        for (String fileExtension : loader.getFileExtensions()) {\n            if (processed.add(fileExtension)) {\n                loadForFileExtension(loader, location + name, \".\" + fileExtension,\n                        profile, filterFactory, consumer);\n            }\n        }\n    }\n}\n\n\nprivate void loadForFileExtension(PropertySourceLoader loader, String prefix,\n        String fileExtension, Profile profile,\n        DocumentFilterFactory filterFactory, DocumentConsumer consumer) {\n    DocumentFilter defaultFilter = filterFactory.getDocumentFilter(null);\n    DocumentFilter profileFilter = filterFactory.getDocumentFilter(profile);\n    // 不为空 组织成 prefix-profile.fileExtension的文件，去加载\n    if (profile != null) {\n        // Try profile-specific file & profile section in profile file (gh-340)\n        String profileSpecificFile = prefix + \"-\" + profile + fileExtension;\n        load(loader, profileSpecificFile, profile, defaultFilter, consumer);\n        load(loader, profileSpecificFile, profile, profileFilter, consumer);\n        // Try profile specific sections in files we've already processed\n        for (Profile processedProfile : this.processedProfiles) {\n            if (processedProfile != null) {\n                String previouslyLoaded = prefix + \"-\" + processedProfile\n                        + fileExtension;\n                load(loader, previouslyLoaded, profile, profileFilter, consumer);\n            }\n        }\n    }\n    // Also try the profile-specific section (if any) of the normal file\n    // 为null，组织成 prefix.fileExtension的文件，去加载\n    // 所以在一开始的profiles中 要加入一个null，来加载 application.yml\n    load(loader, prefix + fileExtension, profile, profileFilter, consumer);\n}\n\n\nprivate void load(PropertySourceLoader loader, String location, Profile profile,\n        DocumentFilter filter, DocumentConsumer consumer) {\n    try {\n        Resource resource = this.resourceLoader.getResource(location);\n        if (resource == null || !resource.exists()) {\n            if (this.logger.isTraceEnabled()) {\n                StringBuilder description = getDescription(\n                        \"Skipped missing config \", location, resource, profile);\n                this.logger.trace(description);\n            }\n            return;\n        }\n        if (!StringUtils.hasText(\n                StringUtils.getFilenameExtension(resource.getFilename()))) {\n            if (this.logger.isTraceEnabled()) {\n                StringBuilder description = getDescription(\n                        \"Skipped empty config extension \", location, resource,\n                        profile);\n                this.logger.trace(description);\n            }\n            return;\n        }\n        // 之前两步都是在判断 有没有这个文件\n\n        //如果存在这个文件 name=applicationConfig: [classpath:/application.yml]\n        String name = \"applicationConfig: [\" + location + \"]\";\n        // 加载配置文件中的属性\n        List<Document> documents = loadDocuments(loader, name, resource);\n        // 为空，就是 里面没配置啥属性，还是返回\n        if (CollectionUtils.isEmpty(documents)) {\n            if (this.logger.isTraceEnabled()) {\n                StringBuilder description = getDescription(\n                        \"Skipped unloaded config \", location, resource, profile);\n                this.logger.trace(description);\n            }\n            return;\n        }\n\n        // 不知道 大家是否还记得 filter，在第一个load方法传入的参数，分析过了，是用来过滤属性的\n        List<Document> loaded = new ArrayList<>();\n        for (Document document : documents) {\n            if (filter.match(document)) {\n                addActiveProfiles(document.getActiveProfiles());\n                addIncludedProfiles(document.getIncludeProfiles());\n                loaded.add(document);\n            }\n        }\n\n        Collections.reverse(loaded);\n\n        // consume 也是一个 lambda，也是第一个load方法传入的参数，是用来添加到Environment\n        if (!loaded.isEmpty()) {\n            loaded.forEach((document) -> consumer.accept(profile, document));\n            if (this.logger.isDebugEnabled()) {\n                StringBuilder description = getDescription(\"Loaded config file \",\n                        location, resource, profile);\n                this.logger.debug(description);\n            }\n        }\n    }\n    catch (Exception ex) {\n        throw new IllegalStateException(\"Failed to load property \"\n                + \"source from location '\" + location + \"'\", ex);\n    }\n}\n\n```\n\n读源码的时候，一开始这里还是读的比较难受的，难受在使用了很多的lambda表达式，并且循环很多。但是 当理解了整个逻辑之后，还是非常清晰的。\n\n以我们当前环境，传入了参数 `--spring.profiles.active=wyj`\n\n1. 第一层循环：profiles=[null, wyj]\n2. 第二层循环：searchLocation=[classpath:/, classpath:/config/, file:./, file:./config/]\n3. 第三层循环：searchName=[application]\n4. 第四层循环：propertySourceLoaders=[PropertiesPropertySourceLoader, YamlPropertySourceLoader]\n5. 第五层循环：loader.getFileExtensions=[.xml, .properties] or [.yaml, .yml]\n\n**最后组织成`filename = searchLocation+searchName+\"-\"+profiles+fileExtension`，如果最后解析出来了，就以`\"applicationConfig: [\" + location + \"]\"`为propertySource的名字将他保存在Environment中。** \n\n<br>\n\n**`3.3. loadAfter`**\n\n最后全部配置文件都加载了之后，返回到一开始的load方法。\n\n执行 `addLoadedPropertySources()` 把刚刚加载出来的属性配置文件添加到envrioment 中。\n\n```java\nprivate void addLoadedPropertySources() {\n    MutablePropertySources destination = this.environment.getPropertySources();\n    // 刚刚解析出来的放在 loaded中\n    List<MutablePropertySources> loaded = new ArrayList<>(this.loaded.values());\n    // 上面也说过了，解析的顺序是 [null, wyj]，所以 需要反转，这样在遍历读取某个属性的时候，就可以使 application-wyj 的优先级比 application 高 \n    Collections.reverse(loaded);\n    String lastAdded = null;\n    Set<String> added = new HashSet<>();\n    for (MutablePropertySources sources : loaded) {\n        for (PropertySource<?> source : sources) {\n            if (added.add(source.getName())) {\n                addLoadedPropertySource(destination, lastAdded, source);\n                lastAdded = source.getName();\n            }\n        }\n    }\n}\n\n```\n\n从 `ConfigFileApplicationListener` 中出来，回到 SpringApplication中，就是一个bind，其他的也没什么了。\n\n到此结束。\n\n<br>\n\n\n- [Environment 和 PropertySource 讲解](https://www.jb51.net/article/145192.htm)\n- [spring boot实战(第六篇)加载application资源文件源码分析](https://blog.csdn.net/liaokailin/article/details/48878447)\n- [Spring3.1新属性管理API：PropertySource、Environment、Profile](http://jinnianshilongnian.iteye.com/blog/2000183)\n\n\n\n","source":"_posts/environment.md","raw":"---\ntitle: SpringBoot Environment\ncategories:\n  - SpringBoot\ntags:\n  - springboot\n  - 源码分析\n---\n\n# SpringBoot Environment\n\n<br>\n\n- [SpringBoot Environment](#springboot-environment)\n  - [背景类介绍](#背景类介绍)\n  - [源码分析 Environment 的初始化过程](#源码分析-environment-的初始化过程)\n\n<br>\n\n在SpringBoot中，每个`ApplicationContext`都有相应的环境信息，比如`AbstractApplicationContext`中就有`private ConfigurableEnvironment environment;` **Environment 可以理解为一些环境上下文，也就是存储了当前运行环境的各种属性。**\n\n下面就看看Environment到底是什么，以及在初始化的时候，他做了哪些相关工作。\n\n<br>\n\n------------\n\n## 背景类介绍\n\n<br>\n\n**`Environment && PropertyResolver`**\n\n<br>\n\n我们常使用的Environment就是`StandardServletEnvironment` ，那么首先我们就看看该类的体系结构。\n\n![|center](/images/springboot-environment-1.png)\n\n可以看到，`StandardServletEnvironment` 继承自 `StandardEnvironment`，实现了`ConfigurableWebEnvironment`接口。而再往下还有很多的接口定义和抽象类，下面我们都来看看。\n\n- `PropertyResolver` 提供了访问属性的接口定义，忽略底层resource的实现。\n- `Environment` 继承自`PropertyResolver`，提供访问和判断profiles的功能。\n- `ConfigurablePropertyResolver` 继承自`PropertyResolver`，主要提供属性类型转换(基于`org.springframework.core.convert.ConversionService`)功能。定义了`get|setConversionService,setValueSeparator,setPlaceholderPrefix|Suffix`等方法，就是丰富了解析的功能。\n- `ConfigurableEnvironment` 继承自`ConfigurablePropertyResolver`和Environment，并且提供设置激活的profile和默认的profile的功能。\n- `ConfigurableWebEnvironment` 继承自`ConfigurableEnvironment`，并且提供配置Servlet上下文和Servlet参数的功能。\n- `AbstractEnvironment` 实现了`ConfigurableEnvironment`接口，提供默认属性和存储容器的定义，并且为子类预留可覆盖了扩展方法。\n- `StandardEnvironment` 继承自`AbstractEnvironment`，非Servlet(Web)环境下的标准Environment实现。\n- `StandardServletEnvironment` 继承自`StandardEnvironment`，Servlet(Web)环境下的标准Environment实现。\n\n<br>\n\n如果有不是特别清楚的，可以结合代码看看每个类中方法的定义，就可以理解上面各个类的功能了。\n\n<br>\n\n**`PropertyResource`**\n\n<br>\n\n在`AbstractEnvironment`中，用来保存环境中各种属性的就是`MutablePropertySources`。下面从`MutablePropertySources`入手，了解整个`PropertyResource`\n\n```java\n/**\n * 该类提供了PropertySources的具体实现（也是唯一的），里面保存的是一个CopyOnWriteArrayList<PropertySource<?>>的数组。\n * 而且好提供了各种方法，用来插入、删除 list中的元素 PropertySource\n */\npublic class MutablePropertySources implements PropertySources {\n\n    // 这里定义了对多个PropertySource的真正数据结构是 CopyOnWriteArrayList<ropertySource<?>>\n\tprivate final List<PropertySource<?>> propertySourceList = new CopyOnWriteArrayList<>();\n\n    ...\n}\n```\n\n下面再看看 `PropertySources`\n\n```java\n/**\n * 就是定义了多个PropertySource，和containers 和 PropertySource get这种操作\n *\n */\npublic interface PropertySources extends Iterable<PropertySource<?>> {\n\n\t/**\n\t * Return a sequential {@link Stream} containing the property sources.\n\t * @since 5.1\n\t */\n\tdefault Stream<PropertySource<?>> stream() {\n\t\treturn StreamSupport.stream(spliterator(), false);\n\t}\n\n\t/**\n\t * Return whether a property source with the given name is contained.\n\t * @param name the {@linkplain PropertySource#getName() name of the property source} to find\n\t */\n\tboolean contains(String name);\n\n\t/**\n\t * Return the property source with the given name, {@code null} if not found.\n\t * @param name the {@linkplain PropertySource#getName() name of the property source} to find\n\t */\n\t@Nullable\n\tPropertySource<?> get(String name);\n\n}\n\n```\n\n<br>\n\n最后看看`PropertySource`，这里面还是有点东西的。\n\n```java\npublic abstract class PropertySource<T> {\n\n\tprotected final String name;\n\n\tprotected final T source;\n\n\tpublic PropertySource(String name, T source) {\n\t\tAssert.hasText(name, \"Property source name must contain at least one character\");\n\t\tAssert.notNull(source, \"Property source must not be null\");\n\t\tthis.name = name;\n\t\tthis.source = source;\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic PropertySource(String name) {\n\t\tthis(name, (T) new Object());\n\t}\n\n\n\tpublic String getName() {\n\t\treturn this.name;\n\t}\n\n\tpublic T getSource() {\n\t\treturn this.source;\n\t}\n\n\t/**\n\t * Return whether this {@code PropertySource} contains the given name.\n\t * <p>This implementation simply checks for a {@code null} return value\n\t * from {@link #getProperty(String)}. Subclasses may wish to implement\n\t * a more efficient algorithm if possible.\n\t * @param name the property name to find\n\t */\n\tpublic boolean containsProperty(String name) {\n\t\treturn (getProperty(name) != null);\n\t}\n\n\t/**\n\t * Return the value associated with the given name,\n\t * or {@code null} if not found.\n\t * @param name the property to find\n\t * @see PropertyResolver#getRequiredProperty(String)\n\t */\n\t@Nullable\n\tpublic abstract Object getProperty(String name);\n\n\n\t// equals 和 hashCode 都只和 name 属性相关\n\t@Override\n\tpublic boolean equals(Object other) {\n\t\treturn (this == other || (other instanceof PropertySource &&\n\t\t\t\tObjectUtils.nullSafeEquals(this.name, ((PropertySource<?>) other).name)));\n\t}\n\t@Override\n\tpublic int hashCode() {\n\t\treturn ObjectUtils.nullSafeHashCode(this.name);\n\t}\n\n\n    // 把String类型的name转换为一个可以判断存在与否的 ComparisonPropertySource\n    // 正好 判断 equals 只根据name，所以这里也是妥妥的\n\t/**\n\t * Return a {@code PropertySource} implementation intended for collection comparison purposes only.\n\t * <p>Primarily for internal use, but given a collection of {@code PropertySource} objects, may be\n\t * used as follows:\n\t * <pre class=\"code\">\n\t * {@code List<PropertySource<?>> sources = new ArrayList<PropertySource<?>>();\n\t * sources.add(new MapPropertySource(\"sourceA\", mapA));\n\t * sources.add(new MapPropertySource(\"sourceB\", mapB));\n\t * assert sources.contains(PropertySource.named(\"sourceA\"));\n\t * assert sources.contains(PropertySource.named(\"sourceB\"));\n\t * assert !sources.contains(PropertySource.named(\"sourceC\"));\n\t * }</pre>\n\t * The returned {@code PropertySource} will throw {@code UnsupportedOperationException}\n\t * if any methods other than {@code equals(Object)}, {@code hashCode()}, and {@code toString()}\n\t * are called.\n\t * @param name the name of the comparison {@code PropertySource} to be created and returned.\n\t */\n\tpublic static PropertySource<?> named(String name) {\n\t\treturn new ComparisonPropertySource(name);\n\t}\n\n\n\t/**\n\t * {@code PropertySource} to be used as a placeholder in cases where an actual\n\t * property source cannot be eagerly initialized at application context\n\t * creation time.  For example, a {@code ServletContext}-based property source\n\t * must wait until the {@code ServletContext} object is available to its enclosing\n\t * {@code ApplicationContext}.  In such cases, a stub should be used to hold the\n\t * intended default position/order of the property source, then be replaced\n\t * during context refresh.\n     * 上面的注释也写的很清楚了，就是用来占位的，因为有一些PropertySource的初始化较晚，比如说 ServletContext相关的环境，在\n     * 初始化的时候是没有的，可以用改对象来占位。\n\t * @see org.springframework.context.support.AbstractApplicationContext#initPropertySources()\n\t * @see org.springframework.web.context.support.StandardServletEnvironment\n\t * @see org.springframework.web.context.support.ServletContextPropertySource\n\t */\n\tpublic static class StubPropertySource extends PropertySource<Object> {\n\n\t\tpublic StubPropertySource(String name) {\n\t\t\tsuper(name, new Object());\n\t\t}\n\n\t\t/**\n\t\t * Always returns {@code null}.\n\t\t */\n\t\t@Override\n\t\t@Nullable\n\t\tpublic String getProperty(String name) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\n\t/**\n\t * PropertySource.named(String) 返回的就是该类型的对象。\n     * 该子类是专门用来封装String类型的name，做比较的，而且他的所有getSource等相关方法，全都是抛出异常\n\t */\n\tstatic class ComparisonPropertySource extends StubPropertySource {\n\n\t\tprivate static final String USAGE_ERROR =\n\t\t\t\t\"ComparisonPropertySource instances are for use with collection comparison only\";\n\n\t\tpublic ComparisonPropertySource(String name) {\n\t\t\tsuper(name);\n\t\t}\n\n\t\t@Override\n\t\tpublic Object getSource() {\n\t\t\tthrow new UnsupportedOperationException(USAGE_ERROR);\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean containsProperty(String name) {\n\t\t\tthrow new UnsupportedOperationException(USAGE_ERROR);\n\t\t}\n\n\t\t@Override\n\t\t@Nullable\n\t\tpublic String getProperty(String name) {\n\t\t\tthrow new UnsupportedOperationException(USAGE_ERROR);\n\t\t}\n\t}\n\n}\n```\n\n这个`PropertySource`类和map这种的用来存储键值对的类稍微有一点不一样，PropertySource中的source是随意类型的，而且key-value都是存在source里面的。可以简单的看一下常用的两个实现`MapPropertySource`,``\n\n```java\npublic class MapPropertySource extends EnumerablePropertySource<Map<String, Object>> {\n\n\tpublic MapPropertySource(String name, Map<String, Object> source) {\n\t\tsuper(name, source);\n\t}\n\n\t@Override\n\t@Nullable\n\tpublic Object getProperty(String name) {\n\t\treturn this.source.get(name);\n\t}\n\n\t@Override\n\tpublic boolean containsProperty(String name) {\n\t\treturn this.source.containsKey(name);\n\t}\n\n\t@Override\n\tpublic String[] getPropertyNames() {\n\t\treturn StringUtils.toStringArray(this.source.keySet());\n\t}\n\n}\n\n\npublic class PropertiesPropertySource extends MapPropertySource {\n\n\t@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n\tpublic PropertiesPropertySource(String name, Properties source) {\n\t\tsuper(name, (Map) source);\n\t}\n\n\tprotected PropertiesPropertySource(String name, Map<String, Object> source) {\n\t\tsuper(name, source);\n\t}\n\n}\n```\n\n<br>\n\n最后，我们知道`AbstractEnvironment`中存储的是`MutablePropertySources`, 是一个数组，那么在`Environment`中怎么getProperty的呢？\n\n```java\npublic abstract class AbstractEnvironment implements ConfigurableEnvironment {\n\n    ...\n\n    private final ConfigurablePropertyResolver propertyResolver =\n\t\t\tnew PropertySourcesPropertyResolver(this.propertySources);\n\n    // 是代理给了 PropertySourcesPropertyResolver propertyResolver\n\t@Override\n\t@Nullable\n\tpublic String getProperty(String key) {\n\t\treturn this.propertyResolver.getProperty(key);\n\t}\n}\n\npublic class PropertySourcesPropertyResolver extends AbstractPropertyResolver {\n\n\t@Nullable\n\tprivate final PropertySources propertySources;\n\n\t@Override\n\t@Nullable\n\tpublic String getProperty(String key) {\n\t\treturn getProperty(key, String.class, true);\n\t}\n\n    // 其实就是扫描 PropertySources 中 所有的 PropertySource 查每个PropertySource中是否存在\n\t@Nullable\n\tprotected <T> T getProperty(String key, Class<T> targetValueType, boolean resolveNestedPlaceholders) {\n\t\tif (this.propertySources != null) {\n\t\t\tfor (PropertySource<?> propertySource : this.propertySources) {\n\t\t\t\tObject value = propertySource.getProperty(key);\n\t\t\t\tif (value != null) {\n\t\t\t\t\tif (resolveNestedPlaceholders && value instanceof String) {\n\t\t\t\t\t\tvalue = resolveNestedPlaceholders((String) value);\n\t\t\t\t\t}\n\t\t\t\t\tlogKeyFound(key, propertySource, value);\n\t\t\t\t\treturn convertValueIfNecessary(value, targetValueType);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n    ...\n}\n\n```\n\n<br>\n\n---------------\n\n## 源码分析 Environment 的初始化过程\n\n入口点在`SpringApplication.run`方法的`ConfigurableEnvironment environment = prepareEnvironment(listeners,applicationArguments);`。\n\n```java\n// environment 在该方法中完成整个初始化\nprivate ConfigurableEnvironment prepareEnvironment(\n        SpringApplicationRunListeners listeners,\n        ApplicationArguments applicationArguments) {\n    // 根据不同的环境创建不同的 Environment 实例\n    ConfigurableEnvironment environment = getOrCreateEnvironment();\n    // configEnvironment 为初始化 Environment 准备好数据\n    configureEnvironment(environment, applicationArguments.getSourceArgs());\n    listeners.environmentPrepared(environment);\n    bindToSpringApplication(environment);\n    if (!this.isCustomEnvironment) {\n        environment = new EnvironmentConverter(getClassLoader())\n                .convertEnvironmentIfNecessary(environment, deduceEnvironmentClass());\n    }\n    ConfigurationPropertySources.attach(environment);\n    return environment;\n}\n```\n\n<br>\n\n**`1. createEnvironment`**\n\n<br>\n\n首先根据不同的 applicationType 创建不同的Environment，这里创建的是 `StandardServletEnvironment`\n\n```java\nprivate ConfigurableEnvironment getOrCreateEnvironment() {\n    if (this.environment != null) {\n        return this.environment;\n    }\n    switch (this.webApplicationType) {\n    case SERVLET:\n        return new StandardServletEnvironment();\n    case REACTIVE:\n        return new StandardReactiveWebEnvironment();\n    default:\n        return new StandardEnvironment();\n    }\n}\n\n```\n\n之前说过，`StandardServletEnvironment extends StandardEnvironment`, `StandardEnvironment extends AbstractEnvironment`。所以创建`StandardServletEnvironment`实例，首先会执行父类`AbstractEnvironment`的构造方法（因为这里子类没有实现构造方法），它里面又调用了`customizePropertySources`方法，`StandardServletEnvironment`实现了该方法，所以又会回来调用这个方法。\n\n创建`StandardServletEnvironment`实例的代码会按照代码实际的执行顺序，在下面罗列出来。\n\n```java\n// AbstractEnvironment\npublic AbstractEnvironment() {\n    // 留给子类实现 方法添加propertySource\n    customizePropertySources(this.propertySources);\n}\n\n//StandardServletEnvironment\n@Override\nprotected void customizePropertySources(MutablePropertySources propertySources) {\n    //name=servletConfigInitParams, 给 Servlet configInitParams 占位 \n    propertySources.addLast(new StubPropertySource(SERVLET_CONFIG_PROPERTY_SOURCE_NAME));\n    // servletContextInitParams 给 Servlet contextInitParams 占位\n    propertySources.addLast(new StubPropertySource(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME));\n    if (JndiLocatorDelegate.isDefaultJndiEnvironmentAvailable()) {\n        propertySources.addLast(new JndiPropertySource(JNDI_PROPERTY_SOURCE_NAME));\n    }\n    super.customizePropertySources(propertySources);\n}\n\n// StandardEnvironment\nprotected void customizePropertySources(MutablePropertySources propertySources) {\n    // systemProperties 放入系统环境 键值对\n    propertySources.addLast(new MapPropertySource(SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME, getSystemProperties()));\n    propertySources.addLast(new SystemEnvironmentPropertySource(SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME, getSystemEnvironment()));\n}\n\n```\n\n为什么要用`SubPropertySource`占位，而且还要注意顺序呢？\n\n会想一下，`Environment.getProperty` 的过程，是扫描数组中的每一个`PropertySource`看是否有该property，所以也会涉及到这几个环境优先级的问题。\n\n\n<br>\n\n**`2. configEnvironment`**\n\n<br>\n\n```java\nprotected void configureEnvironment(ConfigurableEnvironment environment,\n        String[] args) {\n    if (this.addConversionService) {\n        // 创建并 返回 ConversionService，这是一个相当庞大的转换Service，用来在读取配置文件的时候，将各种数据类型转换为合适的数据类型\n        ConversionService conversionService = ApplicationConversionService\n                .getSharedInstance();\n        environment.setConversionService(\n                (ConfigurableConversionService) conversionService);\n    }\n    configurePropertySources(environment, args);\n    configureProfiles(environment, args);\n}\n\n// 如果 运行的时候传入了参数，那么会将它保存在 name=springApplicationCommandLineArgs 的propertySource中\nprotected void configurePropertySources(ConfigurableEnvironment environment,\n        String[] args) {\n    MutablePropertySources sources = environment.getPropertySources();\n    if (this.defaultProperties != null && !this.defaultProperties.isEmpty()) {\n        sources.addLast(\n                new MapPropertySource(\"defaultProperties\", this.defaultProperties));\n    }\n    if (this.addCommandLineProperties && args.length > 0) {\n        String name = CommandLinePropertySource.COMMAND_LINE_PROPERTY_SOURCE_NAME;\n        if (sources.contains(name)) {\n            PropertySource<?> source = sources.get(name);\n            CompositePropertySource composite = new CompositePropertySource(name);\n            composite.addPropertySource(new SimpleCommandLinePropertySource(\n                    \"springApplicationCommandLineArgs\", args));\n            composite.addPropertySource(source);\n            sources.replace(name, composite);\n        }\n        else {\n            // 如果有的话，默认会将用户传入的配置 放到第一位。\n            // 所以我们的配置 优先级总是最高的。\n            // 我们传入的 参数 spring.profiles.active=wyj 就会在这里放入 MutablPropertySources 中\n            sources.addFirst(new SimpleCommandLinePropertySource(args));\n        }\n    }\n}\n\nprotected void configureProfiles(ConfigurableEnvironment environment, String[] args) {\n    // 初始化 environment 中的 activeProfiles\n    environment.getActiveProfiles(); // ensure they are initialized\n    // But these ones should go first (last wins in a property key clash)\n    // activePrifiles中加入 ApplicationContext中 额外 用户配置的 additionalProfiles\n    Set<String> profiles = new LinkedHashSet<>(this.additionalProfiles);\n    profiles.addAll(Arrays.asList(environment.getActiveProfiles()));\n    environment.setActiveProfiles(StringUtils.toStringArray(profiles));\n}\n\n\nprotected Set<String> doGetActiveProfiles() {\n    synchronized (this.activeProfiles) {\n        if (this.activeProfiles.isEmpty()) {\n            // 会读取到 已经放入到 PropertySources 中，运行程序时 我们传入的参数。\n            String profiles = getProperty(ACTIVE_PROFILES_PROPERTY_NAME);   // spring.profiles.active\n            if (StringUtils.hasText(profiles)) {\n                // 这里还可以发现，我们可以传入多个 active profiles，用,分割\n                setActiveProfiles(StringUtils.commaDelimitedListToStringArray(\n                        StringUtils.trimAllWhitespace(profiles)));\n            }\n        }\n        return this.activeProfiles;\n    }\n}\n\n```\n\n所以他一共干了三件事：\n\n1. 初始化`ConvertService`\n2. 读取用户运行程序时传入的配置，并保存在Envrionment\n3. 找到active profiles\n\n下面看看 `ConvertService` 中 都是什么：\n\n![|center](/images/springboot-environment-2.png)\n\n![|center](/images/springboot-environment-3.png)\n\n<br>\n\n**`3.1 preLoadProperties`**\n\n<br>\n\n下面就是发出`ApplicationEnvironmentPreparedEvent`事件。\n\n会有好几个listener，我们关心的是`ConfigFileApplicationListener`，下面是几个关心的方法：\n\n```java\npublic class ConfigFileApplicationListener\n\t\timplements EnvironmentPostProcessor, SmartApplicationListener, Ordered {\n    \n    // ApplicationEnvironmentPreparedEvent 事件最终会调用该方法\n\tprivate void onApplicationEnvironmentPreparedEvent(\n\t\t\tApplicationEnvironmentPreparedEvent event) {\n\t\tList<EnvironmentPostProcessor> postProcessors = loadPostProcessors();\n\t\tpostProcessors.add(this);\n\t\tAnnotationAwareOrderComparator.sort(postProcessors);\n        // 调用 EnvironmentPostProcessor 后处理器\n\t\tfor (EnvironmentPostProcessor postProcessor : postProcessors) {\n\t\t\tpostProcessor.postProcessEnvironment(event.getEnvironment(),\n\t\t\t\t\tevent.getSpringApplication());\n\t\t}\n\t}\n\n    // 使用 FactiriesLoader 加载 EnvironmentPostProcessor\n\tList<EnvironmentPostProcessor> loadPostProcessors() {\n\t\treturn SpringFactoriesLoader.loadFactories(EnvironmentPostProcessor.class,\n\t\t\t\tgetClass().getClassLoader());\n\t}\n\n    // 注意 他也是 实现了 EnvironmentPostProcessor 接口的\n    // 而且，也定义在了 spring.factories 中，所以 也会会掉这个方法\n    @Override\n\tpublic void postProcessEnvironment(ConfigurableEnvironment environment,\n\t\t\tSpringApplication application) {\n\t\taddPropertySources(environment, application.getResourceLoader());\n\t}\n\n    protected void addPropertySources(ConfigurableEnvironment environment,\n\t\t\tResourceLoader resourceLoader) {\n        // 在 systemEnvironment 后面 添加 name=random,value=new Random(); 的PropertySource\n\t\tRandomValuePropertySource.addToEnvironment(environment);\n\t\tnew Loader(environment, resourceLoader).load();\n\t}\n\n    ...\n}\n```\n\n\n<br>\n\n**`3.2 loadProperties`**\n\n<br>\n\n`Loader` 是 `ConfigFileApplicationListener` 的内部类。\n\n```java\nprivate class Loader {\n    Loader(ConfigurableEnvironment environment, ResourceLoader resourceLoader) {\n        this.environment = environment;\n        this.placeholdersResolver = new PropertySourcesPlaceholdersResolver(\n                this.environment);\n        this.resourceLoader = (resourceLoader != null) ? resourceLoader\n                : new DefaultResourceLoader();\n        // 找到的 PropertySourceLoader 有两个，分别是 PropertiesPropertySourceLoader和YamlPropertySourceLoader \n        this.propertySourceLoaders = SpringFactoriesLoader.loadFactories(\n                PropertySourceLoader.class, getClass().getClassLoader());\n    }\n\n    public void load() {\n        this.profiles = new LinkedList<>();\n        this.processedProfiles = new LinkedList<>();\n        this.activatedProfiles = false;\n        this.loaded = new LinkedHashMap<>();\n        // 初始化 profiles\n        // 首先会加入一个 null\n        // 如果 activeProfiles 不为null，加入到list中\n        // 为null，吧defaultProfiles 加入到list中\n        // 这里 我们配置了了 activeProfiles=wyj，所里里面有两个 一个null，一个 wyj\n        initializeProfiles();\n        while (!this.profiles.isEmpty()) {\n            Profile profile = this.profiles.poll();\n            if (profile != null && !profile.isDefaultProfile()) {\n                addProfileToEnvironment(profile.getName());\n            }\n            // 第二个参数 this::getPositiveProfileFilter 返回的是一个lambda 表达式的filter ，\n            // 第三个参数 addToLoaded(MutablePropertySources::addLast, false)，addToLoaded 返回的还是一个lambda表达式，整个的作用大概就是将解析出来的数据添加到 propertySources 的最后。\n            load(profile, this::getPositiveProfileFilter,\n                    addToLoaded(MutablePropertySources::addLast, false));\n            this.processedProfiles.add(profile);\n        }\n        resetEnvironmentProfiles(this.processedProfiles);\n        load(null, this::getNegativeProfileFilter,\n                addToLoaded(MutablePropertySources::addFirst, true));\n        addLoadedPropertySources();\n    }\n\n    ...\n\n}\n\n```\n\n<br>\n\n`load`\n\n```java\n// 整个代码逻辑 就是：\n// 获取所有扫描路径 和 扫描的文件名，然后便利load\nprivate void load(Profile profile, DocumentFilterFactory filterFactory,\n        DocumentConsumer consumer) {\n    getSearchLocations().forEach((location) -> {\n        boolean isFolder = location.endsWith(\"/\");\n        Set<String> names = isFolder ? getSearchNames() : NO_SEARCH_NAMES;\n        names.forEach(\n                (name) -> load(location, name, profile, filterFactory, consumer));\n    });\n}\n\n// 配置文件的路径\nprivate Set<String> getSearchLocations() {\n    // 首先如果配置了 spring.config.location ，就返回我们配置的路径\n    if (this.environment.containsProperty(CONFIG_LOCATION_PROPERTY)) {\n        return getSearchLocations(CONFIG_LOCATION_PROPERTY);\n    }\n    // 然后扫描 spring.config.additional-location 所配置的（这是让谁用的？可能是留给三方jar包的接口？）\n    Set<String> locations = getSearchLocations(\n            CONFIG_ADDITIONAL_LOCATION_PROPERTY);\n    // 最后加上默认的扫描路径。DEFAULT_SEARCH_LOCATIONS = classpath:/,classpath:/config/,file:./,file:./config/\n    locations.addAll(\n            asResolvedSet(ConfigFileApplicationListener.this.searchLocations,\n                    DEFAULT_SEARCH_LOCATIONS));\n    return locations;\n}\n\n// 配置文件的名字\nprivate Set<String> getSearchNames() {\n    // 如果配置了 spring.config.name 属性，会返回我们配置的 配置文件名字，\n    // 注意，这里可以配置多个 试用,分割\n    if (this.environment.containsProperty(CONFIG_NAME_PROPERTY)) {\n        String property = this.environment.getProperty(CONFIG_NAME_PROPERTY);\n        return asResolvedSet(property, null);\n    }\n    // 如果没有配置返回默认的 DEFAULT_NAMES=application\n    return asResolvedSet(ConfigFileApplicationListener.this.names, DEFAULT_NAMES);\n}\n\n// 真正的load方法\nprivate void load(String location, String name, Profile profile,\n        DocumentFilterFactory filterFactory, DocumentConsumer consumer) {\n    // 这块代码不知道 何时 运行，因为 name 一般不会为空啊\n    if (!StringUtils.hasText(name)) {\n        for (PropertySourceLoader loader : this.propertySourceLoaders) {\n            if (canLoadFileExtension(loader, location)) {\n                load(loader, location, profile,\n                        filterFactory.getDocumentFilter(profile), consumer);\n                return;\n            }\n        }\n    }\n\n    // loader 有两种，PropertiesPropertySourceLoader和YamlPropertySourceLoader \n    // 每个loader支持的文件后缀也有两种，分别便利，尝试去加载 \n    Set<String> processed = new HashSet<>();\n    for (PropertySourceLoader loader : this.propertySourceLoaders) {\n        for (String fileExtension : loader.getFileExtensions()) {\n            if (processed.add(fileExtension)) {\n                loadForFileExtension(loader, location + name, \".\" + fileExtension,\n                        profile, filterFactory, consumer);\n            }\n        }\n    }\n}\n\n\nprivate void loadForFileExtension(PropertySourceLoader loader, String prefix,\n        String fileExtension, Profile profile,\n        DocumentFilterFactory filterFactory, DocumentConsumer consumer) {\n    DocumentFilter defaultFilter = filterFactory.getDocumentFilter(null);\n    DocumentFilter profileFilter = filterFactory.getDocumentFilter(profile);\n    // 不为空 组织成 prefix-profile.fileExtension的文件，去加载\n    if (profile != null) {\n        // Try profile-specific file & profile section in profile file (gh-340)\n        String profileSpecificFile = prefix + \"-\" + profile + fileExtension;\n        load(loader, profileSpecificFile, profile, defaultFilter, consumer);\n        load(loader, profileSpecificFile, profile, profileFilter, consumer);\n        // Try profile specific sections in files we've already processed\n        for (Profile processedProfile : this.processedProfiles) {\n            if (processedProfile != null) {\n                String previouslyLoaded = prefix + \"-\" + processedProfile\n                        + fileExtension;\n                load(loader, previouslyLoaded, profile, profileFilter, consumer);\n            }\n        }\n    }\n    // Also try the profile-specific section (if any) of the normal file\n    // 为null，组织成 prefix.fileExtension的文件，去加载\n    // 所以在一开始的profiles中 要加入一个null，来加载 application.yml\n    load(loader, prefix + fileExtension, profile, profileFilter, consumer);\n}\n\n\nprivate void load(PropertySourceLoader loader, String location, Profile profile,\n        DocumentFilter filter, DocumentConsumer consumer) {\n    try {\n        Resource resource = this.resourceLoader.getResource(location);\n        if (resource == null || !resource.exists()) {\n            if (this.logger.isTraceEnabled()) {\n                StringBuilder description = getDescription(\n                        \"Skipped missing config \", location, resource, profile);\n                this.logger.trace(description);\n            }\n            return;\n        }\n        if (!StringUtils.hasText(\n                StringUtils.getFilenameExtension(resource.getFilename()))) {\n            if (this.logger.isTraceEnabled()) {\n                StringBuilder description = getDescription(\n                        \"Skipped empty config extension \", location, resource,\n                        profile);\n                this.logger.trace(description);\n            }\n            return;\n        }\n        // 之前两步都是在判断 有没有这个文件\n\n        //如果存在这个文件 name=applicationConfig: [classpath:/application.yml]\n        String name = \"applicationConfig: [\" + location + \"]\";\n        // 加载配置文件中的属性\n        List<Document> documents = loadDocuments(loader, name, resource);\n        // 为空，就是 里面没配置啥属性，还是返回\n        if (CollectionUtils.isEmpty(documents)) {\n            if (this.logger.isTraceEnabled()) {\n                StringBuilder description = getDescription(\n                        \"Skipped unloaded config \", location, resource, profile);\n                this.logger.trace(description);\n            }\n            return;\n        }\n\n        // 不知道 大家是否还记得 filter，在第一个load方法传入的参数，分析过了，是用来过滤属性的\n        List<Document> loaded = new ArrayList<>();\n        for (Document document : documents) {\n            if (filter.match(document)) {\n                addActiveProfiles(document.getActiveProfiles());\n                addIncludedProfiles(document.getIncludeProfiles());\n                loaded.add(document);\n            }\n        }\n\n        Collections.reverse(loaded);\n\n        // consume 也是一个 lambda，也是第一个load方法传入的参数，是用来添加到Environment\n        if (!loaded.isEmpty()) {\n            loaded.forEach((document) -> consumer.accept(profile, document));\n            if (this.logger.isDebugEnabled()) {\n                StringBuilder description = getDescription(\"Loaded config file \",\n                        location, resource, profile);\n                this.logger.debug(description);\n            }\n        }\n    }\n    catch (Exception ex) {\n        throw new IllegalStateException(\"Failed to load property \"\n                + \"source from location '\" + location + \"'\", ex);\n    }\n}\n\n```\n\n读源码的时候，一开始这里还是读的比较难受的，难受在使用了很多的lambda表达式，并且循环很多。但是 当理解了整个逻辑之后，还是非常清晰的。\n\n以我们当前环境，传入了参数 `--spring.profiles.active=wyj`\n\n1. 第一层循环：profiles=[null, wyj]\n2. 第二层循环：searchLocation=[classpath:/, classpath:/config/, file:./, file:./config/]\n3. 第三层循环：searchName=[application]\n4. 第四层循环：propertySourceLoaders=[PropertiesPropertySourceLoader, YamlPropertySourceLoader]\n5. 第五层循环：loader.getFileExtensions=[.xml, .properties] or [.yaml, .yml]\n\n**最后组织成`filename = searchLocation+searchName+\"-\"+profiles+fileExtension`，如果最后解析出来了，就以`\"applicationConfig: [\" + location + \"]\"`为propertySource的名字将他保存在Environment中。** \n\n<br>\n\n**`3.3. loadAfter`**\n\n最后全部配置文件都加载了之后，返回到一开始的load方法。\n\n执行 `addLoadedPropertySources()` 把刚刚加载出来的属性配置文件添加到envrioment 中。\n\n```java\nprivate void addLoadedPropertySources() {\n    MutablePropertySources destination = this.environment.getPropertySources();\n    // 刚刚解析出来的放在 loaded中\n    List<MutablePropertySources> loaded = new ArrayList<>(this.loaded.values());\n    // 上面也说过了，解析的顺序是 [null, wyj]，所以 需要反转，这样在遍历读取某个属性的时候，就可以使 application-wyj 的优先级比 application 高 \n    Collections.reverse(loaded);\n    String lastAdded = null;\n    Set<String> added = new HashSet<>();\n    for (MutablePropertySources sources : loaded) {\n        for (PropertySource<?> source : sources) {\n            if (added.add(source.getName())) {\n                addLoadedPropertySource(destination, lastAdded, source);\n                lastAdded = source.getName();\n            }\n        }\n    }\n}\n\n```\n\n从 `ConfigFileApplicationListener` 中出来，回到 SpringApplication中，就是一个bind，其他的也没什么了。\n\n到此结束。\n\n<br>\n\n\n- [Environment 和 PropertySource 讲解](https://www.jb51.net/article/145192.htm)\n- [spring boot实战(第六篇)加载application资源文件源码分析](https://blog.csdn.net/liaokailin/article/details/48878447)\n- [Spring3.1新属性管理API：PropertySource、Environment、Profile](http://jinnianshilongnian.iteye.com/blog/2000183)\n\n\n\n","slug":"environment","published":1,"date":"2019-02-14T08:20:42.203Z","updated":"2019-02-14T08:34:25.181Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjs4ehves00082b6vu5ziitzm","content":"<h1 id=\"SpringBoot-Environment\"><a href=\"#SpringBoot-Environment\" class=\"headerlink\" title=\"SpringBoot Environment\"></a>SpringBoot Environment</h1><p><br></p>\n<ul>\n<li><a href=\"#springboot-environment\">SpringBoot Environment</a><ul>\n<li><a href=\"#背景类介绍\">背景类介绍</a></li>\n<li><a href=\"#源码分析-environment-的初始化过程\">源码分析 Environment 的初始化过程</a></li>\n</ul>\n</li>\n</ul>\n<p><br></p>\n<p>在SpringBoot中，每个<code>ApplicationContext</code>都有相应的环境信息，比如<code>AbstractApplicationContext</code>中就有<code>private ConfigurableEnvironment environment;</code> <strong>Environment 可以理解为一些环境上下文，也就是存储了当前运行环境的各种属性。</strong></p>\n<p>下面就看看Environment到底是什么，以及在初始化的时候，他做了哪些相关工作。</p>\n<p><br></p>\n<hr>\n<h2 id=\"背景类介绍\"><a href=\"#背景类介绍\" class=\"headerlink\" title=\"背景类介绍\"></a>背景类介绍</h2><p><br></p>\n<p><strong><code>Environment &amp;&amp; PropertyResolver</code></strong></p>\n<p><br></p>\n<p>我们常使用的Environment就是<code>StandardServletEnvironment</code> ，那么首先我们就看看该类的体系结构。</p>\n<p><img src=\"/images/springboot-environment-1.png\" alt=\"|center\"></p>\n<p>可以看到，<code>StandardServletEnvironment</code> 继承自 <code>StandardEnvironment</code>，实现了<code>ConfigurableWebEnvironment</code>接口。而再往下还有很多的接口定义和抽象类，下面我们都来看看。</p>\n<ul>\n<li><code>PropertyResolver</code> 提供了访问属性的接口定义，忽略底层resource的实现。</li>\n<li><code>Environment</code> 继承自<code>PropertyResolver</code>，提供访问和判断profiles的功能。</li>\n<li><code>ConfigurablePropertyResolver</code> 继承自<code>PropertyResolver</code>，主要提供属性类型转换(基于<code>org.springframework.core.convert.ConversionService</code>)功能。定义了<code>get|setConversionService,setValueSeparator,setPlaceholderPrefix|Suffix</code>等方法，就是丰富了解析的功能。</li>\n<li><code>ConfigurableEnvironment</code> 继承自<code>ConfigurablePropertyResolver</code>和Environment，并且提供设置激活的profile和默认的profile的功能。</li>\n<li><code>ConfigurableWebEnvironment</code> 继承自<code>ConfigurableEnvironment</code>，并且提供配置Servlet上下文和Servlet参数的功能。</li>\n<li><code>AbstractEnvironment</code> 实现了<code>ConfigurableEnvironment</code>接口，提供默认属性和存储容器的定义，并且为子类预留可覆盖了扩展方法。</li>\n<li><code>StandardEnvironment</code> 继承自<code>AbstractEnvironment</code>，非Servlet(Web)环境下的标准Environment实现。</li>\n<li><code>StandardServletEnvironment</code> 继承自<code>StandardEnvironment</code>，Servlet(Web)环境下的标准Environment实现。</li>\n</ul>\n<p><br></p>\n<p>如果有不是特别清楚的，可以结合代码看看每个类中方法的定义，就可以理解上面各个类的功能了。</p>\n<p><br></p>\n<p><strong><code>PropertyResource</code></strong></p>\n<p><br></p>\n<p>在<code>AbstractEnvironment</code>中，用来保存环境中各种属性的就是<code>MutablePropertySources</code>。下面从<code>MutablePropertySources</code>入手，了解整个<code>PropertyResource</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 该类提供了PropertySources的具体实现（也是唯一的），里面保存的是一个CopyOnWriteArrayList&lt;PropertySource&lt;?&gt;&gt;的数组。</span></span><br><span class=\"line\"><span class=\"comment\"> * 而且好提供了各种方法，用来插入、删除 list中的元素 PropertySource</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MutablePropertySources</span> <span class=\"keyword\">implements</span> <span class=\"title\">PropertySources</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这里定义了对多个PropertySource的真正数据结构是 CopyOnWriteArrayList&lt;ropertySource&lt;?&gt;&gt;</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;PropertySource&lt;?&gt;&gt; propertySourceList = <span class=\"keyword\">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面再看看 <code>PropertySources</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 就是定义了多个PropertySource，和containers 和 PropertySource get这种操作</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PropertySources</span> <span class=\"keyword\">extends</span> <span class=\"title\">Iterable</span>&lt;<span class=\"title\">PropertySource</span>&lt;?&gt;&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return a sequential &#123;<span class=\"doctag\">@link</span> Stream&#125; containing the property sources.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@since</span> 5.1</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">default</span> Stream&lt;PropertySource&lt;?&gt;&gt; stream() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> StreamSupport.stream(spliterator(), <span class=\"keyword\">false</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return whether a property source with the given name is contained.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> name the &#123;<span class=\"doctag\">@linkplain</span> PropertySource#getName() name of the property source&#125; to find</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(String name)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return the property source with the given name, &#123;<span class=\"doctag\">@code</span> null&#125; if not found.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> name the &#123;<span class=\"doctag\">@linkplain</span> PropertySource#getName() name of the property source&#125; to find</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\tPropertySource&lt;?&gt; get(String name);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p>最后看看<code>PropertySource</code>，这里面还是有点东西的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PropertySource</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> T source;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PropertySource</span><span class=\"params\">(String name, T source)</span> </span>&#123;</span><br><span class=\"line\">\t\tAssert.hasText(name, <span class=\"string\">\"Property source name must contain at least one character\"</span>);</span><br><span class=\"line\">\t\tAssert.notNull(source, <span class=\"string\">\"Property source must not be null\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.source = source;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PropertySource</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>(name, (T) <span class=\"keyword\">new</span> Object());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.source;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return whether this &#123;<span class=\"doctag\">@code</span> PropertySource&#125; contains the given name.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;This implementation simply checks for a &#123;<span class=\"doctag\">@code</span> null&#125; return value</span></span><br><span class=\"line\"><span class=\"comment\">\t * from &#123;<span class=\"doctag\">@link</span> #getProperty(String)&#125;. Subclasses may wish to implement</span></span><br><span class=\"line\"><span class=\"comment\">\t * a more efficient algorithm if possible.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> name the property name to find</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">containsProperty</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (getProperty(name) != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return the value associated with the given name,</span></span><br><span class=\"line\"><span class=\"comment\">\t * or &#123;<span class=\"doctag\">@code</span> null&#125; if not found.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> name the property to find</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@see</span> PropertyResolver#getRequiredProperty(String)</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Object <span class=\"title\">getProperty</span><span class=\"params\">(String name)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// equals 和 hashCode 都只和 name 属性相关</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object other)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (<span class=\"keyword\">this</span> == other || (other <span class=\"keyword\">instanceof</span> PropertySource &amp;&amp;</span><br><span class=\"line\">\t\t\t\tObjectUtils.nullSafeEquals(<span class=\"keyword\">this</span>.name, ((PropertySource&lt;?&gt;) other).name)));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ObjectUtils.nullSafeHashCode(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 把String类型的name转换为一个可以判断存在与否的 ComparisonPropertySource</span></span><br><span class=\"line\">    <span class=\"comment\">// 正好 判断 equals 只根据name，所以这里也是妥妥的</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return a &#123;<span class=\"doctag\">@code</span> PropertySource&#125; implementation intended for collection comparison purposes only.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;Primarily for internal use, but given a collection of &#123;<span class=\"doctag\">@code</span> PropertySource&#125; objects, may be</span></span><br><span class=\"line\"><span class=\"comment\">\t * used as follows:</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;pre class=\"code\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@code</span> List&lt;PropertySource&lt;?&gt;&gt; sources = new ArrayList&lt;PropertySource&lt;?&gt;&gt;();</span></span><br><span class=\"line\"><span class=\"comment\">\t * sources.add(new MapPropertySource(\"sourceA\", mapA));</span></span><br><span class=\"line\"><span class=\"comment\">\t * sources.add(new MapPropertySource(\"sourceB\", mapB));</span></span><br><span class=\"line\"><span class=\"comment\">\t * assert sources.contains(PropertySource.named(\"sourceA\"));</span></span><br><span class=\"line\"><span class=\"comment\">\t * assert sources.contains(PropertySource.named(\"sourceB\"));</span></span><br><span class=\"line\"><span class=\"comment\">\t * assert !sources.contains(PropertySource.named(\"sourceC\"));</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#125;&lt;/pre&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t * The returned &#123;<span class=\"doctag\">@code</span> PropertySource&#125; will throw &#123;<span class=\"doctag\">@code</span> UnsupportedOperationException&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t * if any methods other than &#123;<span class=\"doctag\">@code</span> equals(Object)&#125;, &#123;<span class=\"doctag\">@code</span> hashCode()&#125;, and &#123;<span class=\"doctag\">@code</span> toString()&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t * are called.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> name the name of the comparison &#123;<span class=\"doctag\">@code</span> PropertySource&#125; to be created and returned.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> PropertySource&lt;?&gt; named(String name) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ComparisonPropertySource(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@code</span> PropertySource&#125; to be used as a placeholder in cases where an actual</span></span><br><span class=\"line\"><span class=\"comment\">\t * property source cannot be eagerly initialized at application context</span></span><br><span class=\"line\"><span class=\"comment\">\t * creation time.  For example, a &#123;<span class=\"doctag\">@code</span> ServletContext&#125;-based property source</span></span><br><span class=\"line\"><span class=\"comment\">\t * must wait until the &#123;<span class=\"doctag\">@code</span> ServletContext&#125; object is available to its enclosing</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@code</span> ApplicationContext&#125;.  In such cases, a stub should be used to hold the</span></span><br><span class=\"line\"><span class=\"comment\">\t * intended default position/order of the property source, then be replaced</span></span><br><span class=\"line\"><span class=\"comment\">\t * during context refresh.</span></span><br><span class=\"line\"><span class=\"comment\">     * 上面的注释也写的很清楚了，就是用来占位的，因为有一些PropertySource的初始化较晚，比如说 ServletContext相关的环境，在</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化的时候是没有的，可以用改对象来占位。</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@see</span> org.springframework.context.support.AbstractApplicationContext#initPropertySources()</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@see</span> org.springframework.web.context.support.StandardServletEnvironment</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@see</span> org.springframework.web.context.support.ServletContextPropertySource</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StubPropertySource</span> <span class=\"keyword\">extends</span> <span class=\"title\">PropertySource</span>&lt;<span class=\"title\">Object</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StubPropertySource</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">super</span>(name, <span class=\"keyword\">new</span> Object());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * Always returns &#123;<span class=\"doctag\">@code</span> null&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getProperty</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * PropertySource.named(String) 返回的就是该类型的对象。</span></span><br><span class=\"line\"><span class=\"comment\">     * 该子类是专门用来封装String类型的name，做比较的，而且他的所有getSource等相关方法，全都是抛出异常</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComparisonPropertySource</span> <span class=\"keyword\">extends</span> <span class=\"title\">StubPropertySource</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String USAGE_ERROR =</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">\"ComparisonPropertySource instances are for use with collection comparison only\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ComparisonPropertySource</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(USAGE_ERROR);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">containsProperty</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(USAGE_ERROR);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getProperty</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(USAGE_ERROR);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个<code>PropertySource</code>类和map这种的用来存储键值对的类稍微有一点不一样，PropertySource中的source是随意类型的，而且key-value都是存在source里面的。可以简单的看一下常用的两个实现<code>MapPropertySource</code>,<code></code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MapPropertySource</span> <span class=\"keyword\">extends</span> <span class=\"title\">EnumerablePropertySource</span>&lt;<span class=\"title\">Map</span>&lt;<span class=\"title\">String</span>, <span class=\"title\">Object</span>&gt;&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MapPropertySource</span><span class=\"params\">(String name, Map&lt;String, Object&gt; source)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(name, source);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getProperty</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.source.get(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">containsProperty</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.source.containsKey(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String[] getPropertyNames() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> StringUtils.toStringArray(<span class=\"keyword\">this</span>.source.keySet());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PropertiesPropertySource</span> <span class=\"keyword\">extends</span> <span class=\"title\">MapPropertySource</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(&#123;<span class=\"string\">\"unchecked\"</span>, <span class=\"string\">\"rawtypes\"</span>&#125;)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PropertiesPropertySource</span><span class=\"params\">(String name, Properties source)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(name, (Map) source);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">PropertiesPropertySource</span><span class=\"params\">(String name, Map&lt;String, Object&gt; source)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(name, source);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p>最后，我们知道<code>AbstractEnvironment</code>中存储的是<code>MutablePropertySources</code>, 是一个数组，那么在<code>Environment</code>中怎么getProperty的呢？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractEnvironment</span> <span class=\"keyword\">implements</span> <span class=\"title\">ConfigurableEnvironment</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ConfigurablePropertyResolver propertyResolver =</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> PropertySourcesPropertyResolver(<span class=\"keyword\">this</span>.propertySources);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 是代理给了 PropertySourcesPropertyResolver propertyResolver</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getProperty</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.propertyResolver.getProperty(key);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PropertySourcesPropertyResolver</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractPropertyResolver</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> PropertySources propertySources;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getProperty</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> getProperty(key, String.class, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 其实就是扫描 PropertySources 中 所有的 PropertySource 查每个PropertySource中是否存在</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">getProperty</span><span class=\"params\">(String key, Class&lt;T&gt; targetValueType, <span class=\"keyword\">boolean</span> resolveNestedPlaceholders)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.propertySources != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (PropertySource&lt;?&gt; propertySource : <span class=\"keyword\">this</span>.propertySources) &#123;</span><br><span class=\"line\">\t\t\t\tObject value = propertySource.getProperty(key);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (value != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (resolveNestedPlaceholders &amp;&amp; value <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tvalue = resolveNestedPlaceholders((String) value);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tlogKeyFound(key, propertySource, value);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> convertValueIfNecessary(value, targetValueType);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<hr>\n<h2 id=\"源码分析-Environment-的初始化过程\"><a href=\"#源码分析-Environment-的初始化过程\" class=\"headerlink\" title=\"源码分析 Environment 的初始化过程\"></a>源码分析 Environment 的初始化过程</h2><p>入口点在<code>SpringApplication.run</code>方法的<code>ConfigurableEnvironment environment = prepareEnvironment(listeners,applicationArguments);</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// environment 在该方法中完成整个初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ConfigurableEnvironment <span class=\"title\">prepareEnvironment</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        SpringApplicationRunListeners listeners,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        ApplicationArguments applicationArguments)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 根据不同的环境创建不同的 Environment 实例</span></span><br><span class=\"line\">    ConfigurableEnvironment environment = getOrCreateEnvironment();</span><br><span class=\"line\">    <span class=\"comment\">// configEnvironment 为初始化 Environment 准备好数据</span></span><br><span class=\"line\">    configureEnvironment(environment, applicationArguments.getSourceArgs());</span><br><span class=\"line\">    listeners.environmentPrepared(environment);</span><br><span class=\"line\">    bindToSpringApplication(environment);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.isCustomEnvironment) &#123;</span><br><span class=\"line\">        environment = <span class=\"keyword\">new</span> EnvironmentConverter(getClassLoader())</span><br><span class=\"line\">                .convertEnvironmentIfNecessary(environment, deduceEnvironmentClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ConfigurationPropertySources.attach(environment);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> environment;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><strong><code>1. createEnvironment</code></strong></p>\n<p><br></p>\n<p>首先根据不同的 applicationType 创建不同的Environment，这里创建的是 <code>StandardServletEnvironment</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ConfigurableEnvironment <span class=\"title\">getOrCreateEnvironment</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.environment != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.environment;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (<span class=\"keyword\">this</span>.webApplicationType) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> SERVLET:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> StandardServletEnvironment();</span><br><span class=\"line\">    <span class=\"keyword\">case</span> REACTIVE:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> StandardReactiveWebEnvironment();</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> StandardEnvironment();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>之前说过，<code>StandardServletEnvironment extends StandardEnvironment</code>, <code>StandardEnvironment extends AbstractEnvironment</code>。所以创建<code>StandardServletEnvironment</code>实例，首先会执行父类<code>AbstractEnvironment</code>的构造方法（因为这里子类没有实现构造方法），它里面又调用了<code>customizePropertySources</code>方法，<code>StandardServletEnvironment</code>实现了该方法，所以又会回来调用这个方法。</p>\n<p>创建<code>StandardServletEnvironment</code>实例的代码会按照代码实际的执行顺序，在下面罗列出来。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AbstractEnvironment</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AbstractEnvironment</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 留给子类实现 方法添加propertySource</span></span><br><span class=\"line\">    customizePropertySources(<span class=\"keyword\">this</span>.propertySources);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//StandardServletEnvironment</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">customizePropertySources</span><span class=\"params\">(MutablePropertySources propertySources)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//name=servletConfigInitParams, 给 Servlet configInitParams 占位 </span></span><br><span class=\"line\">    propertySources.addLast(<span class=\"keyword\">new</span> StubPropertySource(SERVLET_CONFIG_PROPERTY_SOURCE_NAME));</span><br><span class=\"line\">    <span class=\"comment\">// servletContextInitParams 给 Servlet contextInitParams 占位</span></span><br><span class=\"line\">    propertySources.addLast(<span class=\"keyword\">new</span> StubPropertySource(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (JndiLocatorDelegate.isDefaultJndiEnvironmentAvailable()) &#123;</span><br><span class=\"line\">        propertySources.addLast(<span class=\"keyword\">new</span> JndiPropertySource(JNDI_PROPERTY_SOURCE_NAME));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.customizePropertySources(propertySources);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// StandardEnvironment</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">customizePropertySources</span><span class=\"params\">(MutablePropertySources propertySources)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// systemProperties 放入系统环境 键值对</span></span><br><span class=\"line\">    propertySources.addLast(<span class=\"keyword\">new</span> MapPropertySource(SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME, getSystemProperties()));</span><br><span class=\"line\">    propertySources.addLast(<span class=\"keyword\">new</span> SystemEnvironmentPropertySource(SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME, getSystemEnvironment()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为什么要用<code>SubPropertySource</code>占位，而且还要注意顺序呢？</p>\n<p>会想一下，<code>Environment.getProperty</code> 的过程，是扫描数组中的每一个<code>PropertySource</code>看是否有该property，所以也会涉及到这几个环境优先级的问题。</p>\n<p><br></p>\n<p><strong><code>2. configEnvironment</code></strong></p>\n<p><br></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configureEnvironment</span><span class=\"params\">(ConfigurableEnvironment environment,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.addConversionService) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建并 返回 ConversionService，这是一个相当庞大的转换Service，用来在读取配置文件的时候，将各种数据类型转换为合适的数据类型</span></span><br><span class=\"line\">        ConversionService conversionService = ApplicationConversionService</span><br><span class=\"line\">                .getSharedInstance();</span><br><span class=\"line\">        environment.setConversionService(</span><br><span class=\"line\">                (ConfigurableConversionService) conversionService);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    configurePropertySources(environment, args);</span><br><span class=\"line\">    configureProfiles(environment, args);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果 运行的时候传入了参数，那么会将它保存在 name=springApplicationCommandLineArgs 的propertySource中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configurePropertySources</span><span class=\"params\">(ConfigurableEnvironment environment,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        String[] args)</span> </span>&#123;</span><br><span class=\"line\">    MutablePropertySources sources = environment.getPropertySources();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.defaultProperties != <span class=\"keyword\">null</span> &amp;&amp; !<span class=\"keyword\">this</span>.defaultProperties.isEmpty()) &#123;</span><br><span class=\"line\">        sources.addLast(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> MapPropertySource(<span class=\"string\">\"defaultProperties\"</span>, <span class=\"keyword\">this</span>.defaultProperties));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.addCommandLineProperties &amp;&amp; args.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        String name = CommandLinePropertySource.COMMAND_LINE_PROPERTY_SOURCE_NAME;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sources.contains(name)) &#123;</span><br><span class=\"line\">            PropertySource&lt;?&gt; source = sources.get(name);</span><br><span class=\"line\">            CompositePropertySource composite = <span class=\"keyword\">new</span> CompositePropertySource(name);</span><br><span class=\"line\">            composite.addPropertySource(<span class=\"keyword\">new</span> SimpleCommandLinePropertySource(</span><br><span class=\"line\">                    <span class=\"string\">\"springApplicationCommandLineArgs\"</span>, args));</span><br><span class=\"line\">            composite.addPropertySource(source);</span><br><span class=\"line\">            sources.replace(name, composite);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果有的话，默认会将用户传入的配置 放到第一位。</span></span><br><span class=\"line\">            <span class=\"comment\">// 所以我们的配置 优先级总是最高的。</span></span><br><span class=\"line\">            <span class=\"comment\">// 我们传入的 参数 spring.profiles.active=wyj 就会在这里放入 MutablPropertySources 中</span></span><br><span class=\"line\">            sources.addFirst(<span class=\"keyword\">new</span> SimpleCommandLinePropertySource(args));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configureProfiles</span><span class=\"params\">(ConfigurableEnvironment environment, String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化 environment 中的 activeProfiles</span></span><br><span class=\"line\">    environment.getActiveProfiles(); <span class=\"comment\">// ensure they are initialized</span></span><br><span class=\"line\">    <span class=\"comment\">// But these ones should go first (last wins in a property key clash)</span></span><br><span class=\"line\">    <span class=\"comment\">// activePrifiles中加入 ApplicationContext中 额外 用户配置的 additionalProfiles</span></span><br><span class=\"line\">    Set&lt;String&gt; profiles = <span class=\"keyword\">new</span> LinkedHashSet&lt;&gt;(<span class=\"keyword\">this</span>.additionalProfiles);</span><br><span class=\"line\">    profiles.addAll(Arrays.asList(environment.getActiveProfiles()));</span><br><span class=\"line\">    environment.setActiveProfiles(StringUtils.toStringArray(profiles));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Set&lt;String&gt; <span class=\"title\">doGetActiveProfiles</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.activeProfiles) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.activeProfiles.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 会读取到 已经放入到 PropertySources 中，运行程序时 我们传入的参数。</span></span><br><span class=\"line\">            String profiles = getProperty(ACTIVE_PROFILES_PROPERTY_NAME);   <span class=\"comment\">// spring.profiles.active</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (StringUtils.hasText(profiles)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 这里还可以发现，我们可以传入多个 active profiles，用,分割</span></span><br><span class=\"line\">                setActiveProfiles(StringUtils.commaDelimitedListToStringArray(</span><br><span class=\"line\">                        StringUtils.trimAllWhitespace(profiles)));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.activeProfiles;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以他一共干了三件事：</p>\n<ol>\n<li>初始化<code>ConvertService</code></li>\n<li>读取用户运行程序时传入的配置，并保存在Envrionment</li>\n<li>找到active profiles</li>\n</ol>\n<p>下面看看 <code>ConvertService</code> 中 都是什么：</p>\n<p><img src=\"/images/springboot-environment-2.png\" alt=\"|center\"></p>\n<p><img src=\"/images/springboot-environment-3.png\" alt=\"|center\"></p>\n<p><br></p>\n<p><strong><code>3.1 preLoadProperties</code></strong></p>\n<p><br></p>\n<p>下面就是发出<code>ApplicationEnvironmentPreparedEvent</code>事件。</p>\n<p>会有好几个listener，我们关心的是<code>ConfigFileApplicationListener</code>，下面是几个关心的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConfigFileApplicationListener</span></span></span><br><span class=\"line\"><span class=\"class\">\t\t<span class=\"keyword\">implements</span> <span class=\"title\">EnvironmentPostProcessor</span>, <span class=\"title\">SmartApplicationListener</span>, <span class=\"title\">Ordered</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// ApplicationEnvironmentPreparedEvent 事件最终会调用该方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">onApplicationEnvironmentPreparedEvent</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\tApplicationEnvironmentPreparedEvent event)</span> </span>&#123;</span><br><span class=\"line\">\t\tList&lt;EnvironmentPostProcessor&gt; postProcessors = loadPostProcessors();</span><br><span class=\"line\">\t\tpostProcessors.add(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t\tAnnotationAwareOrderComparator.sort(postProcessors);</span><br><span class=\"line\">        <span class=\"comment\">// 调用 EnvironmentPostProcessor 后处理器</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (EnvironmentPostProcessor postProcessor : postProcessors) &#123;</span><br><span class=\"line\">\t\t\tpostProcessor.postProcessEnvironment(event.getEnvironment(),</span><br><span class=\"line\">\t\t\t\t\tevent.getSpringApplication());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用 FactiriesLoader 加载 EnvironmentPostProcessor</span></span><br><span class=\"line\">\t<span class=\"function\">List&lt;EnvironmentPostProcessor&gt; <span class=\"title\">loadPostProcessors</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> SpringFactoriesLoader.loadFactories(EnvironmentPostProcessor.class,</span><br><span class=\"line\">\t\t\t\tgetClass().getClassLoader());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 注意 他也是 实现了 EnvironmentPostProcessor 接口的</span></span><br><span class=\"line\">    <span class=\"comment\">// 而且，也定义在了 spring.factories 中，所以 也会会掉这个方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postProcessEnvironment</span><span class=\"params\">(ConfigurableEnvironment environment,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\tSpringApplication application)</span> </span>&#123;</span><br><span class=\"line\">\t\taddPropertySources(environment, application.getResourceLoader());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">addPropertySources</span><span class=\"params\">(ConfigurableEnvironment environment,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\tResourceLoader resourceLoader)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在 systemEnvironment 后面 添加 name=random,value=new Random(); 的PropertySource</span></span><br><span class=\"line\">\t\tRandomValuePropertySource.addToEnvironment(environment);</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Loader(environment, resourceLoader).load();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><strong><code>3.2 loadProperties</code></strong></p>\n<p><br></p>\n<p><code>Loader</code> 是 <code>ConfigFileApplicationListener</code> 的内部类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Loader</span> </span>&#123;</span><br><span class=\"line\">    Loader(ConfigurableEnvironment environment, ResourceLoader resourceLoader) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.environment = environment;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.placeholdersResolver = <span class=\"keyword\">new</span> PropertySourcesPlaceholdersResolver(</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.environment);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.resourceLoader = (resourceLoader != <span class=\"keyword\">null</span>) ? resourceLoader</span><br><span class=\"line\">                : <span class=\"keyword\">new</span> DefaultResourceLoader();</span><br><span class=\"line\">        <span class=\"comment\">// 找到的 PropertySourceLoader 有两个，分别是 PropertiesPropertySourceLoader和YamlPropertySourceLoader </span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.propertySourceLoaders = SpringFactoriesLoader.loadFactories(</span><br><span class=\"line\">                PropertySourceLoader.class, getClass().getClassLoader());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">load</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.profiles = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.processedProfiles = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.activatedProfiles = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.loaded = <span class=\"keyword\">new</span> LinkedHashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 初始化 profiles</span></span><br><span class=\"line\">        <span class=\"comment\">// 首先会加入一个 null</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果 activeProfiles 不为null，加入到list中</span></span><br><span class=\"line\">        <span class=\"comment\">// 为null，吧defaultProfiles 加入到list中</span></span><br><span class=\"line\">        <span class=\"comment\">// 这里 我们配置了了 activeProfiles=wyj，所里里面有两个 一个null，一个 wyj</span></span><br><span class=\"line\">        initializeProfiles();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!<span class=\"keyword\">this</span>.profiles.isEmpty()) &#123;</span><br><span class=\"line\">            Profile profile = <span class=\"keyword\">this</span>.profiles.poll();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (profile != <span class=\"keyword\">null</span> &amp;&amp; !profile.isDefaultProfile()) &#123;</span><br><span class=\"line\">                addProfileToEnvironment(profile.getName());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 第二个参数 this::getPositiveProfileFilter 返回的是一个lambda 表达式的filter ，</span></span><br><span class=\"line\">            <span class=\"comment\">// 第三个参数 addToLoaded(MutablePropertySources::addLast, false)，addToLoaded 返回的还是一个lambda表达式，整个的作用大概就是将解析出来的数据添加到 propertySources 的最后。</span></span><br><span class=\"line\">            load(profile, <span class=\"keyword\">this</span>::getPositiveProfileFilter,</span><br><span class=\"line\">                    addToLoaded(MutablePropertySources::addLast, <span class=\"keyword\">false</span>));</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.processedProfiles.add(profile);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        resetEnvironmentProfiles(<span class=\"keyword\">this</span>.processedProfiles);</span><br><span class=\"line\">        load(<span class=\"keyword\">null</span>, <span class=\"keyword\">this</span>::getNegativeProfileFilter,</span><br><span class=\"line\">                addToLoaded(MutablePropertySources::addFirst, <span class=\"keyword\">true</span>));</span><br><span class=\"line\">        addLoadedPropertySources();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><code>load</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 整个代码逻辑 就是：</span></span><br><span class=\"line\"><span class=\"comment\">// 获取所有扫描路径 和 扫描的文件名，然后便利load</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">load</span><span class=\"params\">(Profile profile, DocumentFilterFactory filterFactory,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        DocumentConsumer consumer)</span> </span>&#123;</span><br><span class=\"line\">    getSearchLocations().forEach((location) -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> isFolder = location.endsWith(<span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">        Set&lt;String&gt; names = isFolder ? getSearchNames() : NO_SEARCH_NAMES;</span><br><span class=\"line\">        names.forEach(</span><br><span class=\"line\">                (name) -&gt; load(location, name, profile, filterFactory, consumer));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置文件的路径</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Set&lt;String&gt; <span class=\"title\">getSearchLocations</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 首先如果配置了 spring.config.location ，就返回我们配置的路径</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.environment.containsProperty(CONFIG_LOCATION_PROPERTY)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getSearchLocations(CONFIG_LOCATION_PROPERTY);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 然后扫描 spring.config.additional-location 所配置的（这是让谁用的？可能是留给三方jar包的接口？）</span></span><br><span class=\"line\">    Set&lt;String&gt; locations = getSearchLocations(</span><br><span class=\"line\">            CONFIG_ADDITIONAL_LOCATION_PROPERTY);</span><br><span class=\"line\">    <span class=\"comment\">// 最后加上默认的扫描路径。DEFAULT_SEARCH_LOCATIONS = classpath:/,classpath:/config/,file:./,file:./config/</span></span><br><span class=\"line\">    locations.addAll(</span><br><span class=\"line\">            asResolvedSet(ConfigFileApplicationListener.<span class=\"keyword\">this</span>.searchLocations,</span><br><span class=\"line\">                    DEFAULT_SEARCH_LOCATIONS));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> locations;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置文件的名字</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Set&lt;String&gt; <span class=\"title\">getSearchNames</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果配置了 spring.config.name 属性，会返回我们配置的 配置文件名字，</span></span><br><span class=\"line\">    <span class=\"comment\">// 注意，这里可以配置多个 试用,分割</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.environment.containsProperty(CONFIG_NAME_PROPERTY)) &#123;</span><br><span class=\"line\">        String property = <span class=\"keyword\">this</span>.environment.getProperty(CONFIG_NAME_PROPERTY);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> asResolvedSet(property, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果没有配置返回默认的 DEFAULT_NAMES=application</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> asResolvedSet(ConfigFileApplicationListener.<span class=\"keyword\">this</span>.names, DEFAULT_NAMES);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 真正的load方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">load</span><span class=\"params\">(String location, String name, Profile profile,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        DocumentFilterFactory filterFactory, DocumentConsumer consumer)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这块代码不知道 何时 运行，因为 name 一般不会为空啊</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!StringUtils.hasText(name)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (PropertySourceLoader loader : <span class=\"keyword\">this</span>.propertySourceLoaders) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (canLoadFileExtension(loader, location)) &#123;</span><br><span class=\"line\">                load(loader, location, profile,</span><br><span class=\"line\">                        filterFactory.getDocumentFilter(profile), consumer);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// loader 有两种，PropertiesPropertySourceLoader和YamlPropertySourceLoader </span></span><br><span class=\"line\">    <span class=\"comment\">// 每个loader支持的文件后缀也有两种，分别便利，尝试去加载 </span></span><br><span class=\"line\">    Set&lt;String&gt; processed = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (PropertySourceLoader loader : <span class=\"keyword\">this</span>.propertySourceLoaders) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String fileExtension : loader.getFileExtensions()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (processed.add(fileExtension)) &#123;</span><br><span class=\"line\">                loadForFileExtension(loader, location + name, <span class=\"string\">\".\"</span> + fileExtension,</span><br><span class=\"line\">                        profile, filterFactory, consumer);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">loadForFileExtension</span><span class=\"params\">(PropertySourceLoader loader, String prefix,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        String fileExtension, Profile profile,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        DocumentFilterFactory filterFactory, DocumentConsumer consumer)</span> </span>&#123;</span><br><span class=\"line\">    DocumentFilter defaultFilter = filterFactory.getDocumentFilter(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    DocumentFilter profileFilter = filterFactory.getDocumentFilter(profile);</span><br><span class=\"line\">    <span class=\"comment\">// 不为空 组织成 prefix-profile.fileExtension的文件，去加载</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (profile != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Try profile-specific file &amp; profile section in profile file (gh-340)</span></span><br><span class=\"line\">        String profileSpecificFile = prefix + <span class=\"string\">\"-\"</span> + profile + fileExtension;</span><br><span class=\"line\">        load(loader, profileSpecificFile, profile, defaultFilter, consumer);</span><br><span class=\"line\">        load(loader, profileSpecificFile, profile, profileFilter, consumer);</span><br><span class=\"line\">        <span class=\"comment\">// Try profile specific sections in files we've already processed</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Profile processedProfile : <span class=\"keyword\">this</span>.processedProfiles) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (processedProfile != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                String previouslyLoaded = prefix + <span class=\"string\">\"-\"</span> + processedProfile</span><br><span class=\"line\">                        + fileExtension;</span><br><span class=\"line\">                load(loader, previouslyLoaded, profile, profileFilter, consumer);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Also try the profile-specific section (if any) of the normal file</span></span><br><span class=\"line\">    <span class=\"comment\">// 为null，组织成 prefix.fileExtension的文件，去加载</span></span><br><span class=\"line\">    <span class=\"comment\">// 所以在一开始的profiles中 要加入一个null，来加载 application.yml</span></span><br><span class=\"line\">    load(loader, prefix + fileExtension, profile, profileFilter, consumer);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">load</span><span class=\"params\">(PropertySourceLoader loader, String location, Profile profile,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        DocumentFilter filter, DocumentConsumer consumer)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Resource resource = <span class=\"keyword\">this</span>.resourceLoader.getResource(location);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (resource == <span class=\"keyword\">null</span> || !resource.exists()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">                StringBuilder description = getDescription(</span><br><span class=\"line\">                        <span class=\"string\">\"Skipped missing config \"</span>, location, resource, profile);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.logger.trace(description);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.hasText(</span><br><span class=\"line\">                StringUtils.getFilenameExtension(resource.getFilename()))) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">                StringBuilder description = getDescription(</span><br><span class=\"line\">                        <span class=\"string\">\"Skipped empty config extension \"</span>, location, resource,</span><br><span class=\"line\">                        profile);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.logger.trace(description);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 之前两步都是在判断 有没有这个文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//如果存在这个文件 name=applicationConfig: [classpath:/application.yml]</span></span><br><span class=\"line\">        String name = <span class=\"string\">\"applicationConfig: [\"</span> + location + <span class=\"string\">\"]\"</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 加载配置文件中的属性</span></span><br><span class=\"line\">        List&lt;Document&gt; documents = loadDocuments(loader, name, resource);</span><br><span class=\"line\">        <span class=\"comment\">// 为空，就是 里面没配置啥属性，还是返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (CollectionUtils.isEmpty(documents)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">                StringBuilder description = getDescription(</span><br><span class=\"line\">                        <span class=\"string\">\"Skipped unloaded config \"</span>, location, resource, profile);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.logger.trace(description);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 不知道 大家是否还记得 filter，在第一个load方法传入的参数，分析过了，是用来过滤属性的</span></span><br><span class=\"line\">        List&lt;Document&gt; loaded = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Document document : documents) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (filter.match(document)) &#123;</span><br><span class=\"line\">                addActiveProfiles(document.getActiveProfiles());</span><br><span class=\"line\">                addIncludedProfiles(document.getIncludeProfiles());</span><br><span class=\"line\">                loaded.add(document);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Collections.reverse(loaded);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// consume 也是一个 lambda，也是第一个load方法传入的参数，是用来添加到Environment</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!loaded.isEmpty()) &#123;</span><br><span class=\"line\">            loaded.forEach((document) -&gt; consumer.accept(profile, document));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">                StringBuilder description = getDescription(<span class=\"string\">\"Loaded config file \"</span>,</span><br><span class=\"line\">                        location, resource, profile);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.logger.debug(description);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Failed to load property \"</span></span><br><span class=\"line\">                + <span class=\"string\">\"source from location '\"</span> + location + <span class=\"string\">\"'\"</span>, ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>读源码的时候，一开始这里还是读的比较难受的，难受在使用了很多的lambda表达式，并且循环很多。但是 当理解了整个逻辑之后，还是非常清晰的。</p>\n<p>以我们当前环境，传入了参数 <code>--spring.profiles.active=wyj</code></p>\n<ol>\n<li>第一层循环：profiles=[null, wyj]</li>\n<li>第二层循环：searchLocation=[classpath:/, classpath:/config/, file:./, file:./config/]</li>\n<li>第三层循环：searchName=[application]</li>\n<li>第四层循环：propertySourceLoaders=[PropertiesPropertySourceLoader, YamlPropertySourceLoader]</li>\n<li>第五层循环：loader.getFileExtensions=[.xml, .properties] or [.yaml, .yml]</li>\n</ol>\n<p><strong>最后组织成<code>filename = searchLocation+searchName+&quot;-&quot;+profiles+fileExtension</code>，如果最后解析出来了，就以<code>&quot;applicationConfig: [&quot; + location + &quot;]&quot;</code>为propertySource的名字将他保存在Environment中。</strong> </p>\n<p><br></p>\n<p><strong><code>3.3. loadAfter</code></strong></p>\n<p>最后全部配置文件都加载了之后，返回到一开始的load方法。</p>\n<p>执行 <code>addLoadedPropertySources()</code> 把刚刚加载出来的属性配置文件添加到envrioment 中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addLoadedPropertySources</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    MutablePropertySources destination = <span class=\"keyword\">this</span>.environment.getPropertySources();</span><br><span class=\"line\">    <span class=\"comment\">// 刚刚解析出来的放在 loaded中</span></span><br><span class=\"line\">    List&lt;MutablePropertySources&gt; loaded = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"keyword\">this</span>.loaded.values());</span><br><span class=\"line\">    <span class=\"comment\">// 上面也说过了，解析的顺序是 [null, wyj]，所以 需要反转，这样在遍历读取某个属性的时候，就可以使 application-wyj 的优先级比 application 高 </span></span><br><span class=\"line\">    Collections.reverse(loaded);</span><br><span class=\"line\">    String lastAdded = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    Set&lt;String&gt; added = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (MutablePropertySources sources : loaded) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (PropertySource&lt;?&gt; source : sources) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (added.add(source.getName())) &#123;</span><br><span class=\"line\">                addLoadedPropertySource(destination, lastAdded, source);</span><br><span class=\"line\">                lastAdded = source.getName();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从 <code>ConfigFileApplicationListener</code> 中出来，回到 SpringApplication中，就是一个bind，其他的也没什么了。</p>\n<p>到此结束。</p>\n<p><br></p>\n<ul>\n<li><a href=\"https://www.jb51.net/article/145192.htm\" target=\"_blank\" rel=\"noopener\">Environment 和 PropertySource 讲解</a></li>\n<li><a href=\"https://blog.csdn.net/liaokailin/article/details/48878447\" target=\"_blank\" rel=\"noopener\">spring boot实战(第六篇)加载application资源文件源码分析</a></li>\n<li><a href=\"http://jinnianshilongnian.iteye.com/blog/2000183\" target=\"_blank\" rel=\"noopener\">Spring3.1新属性管理API：PropertySource、Environment、Profile</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringBoot-Environment\"><a href=\"#SpringBoot-Environment\" class=\"headerlink\" title=\"SpringBoot Environment\"></a>SpringBoot Environment</h1><p><br></p>\n<ul>\n<li><a href=\"#springboot-environment\">SpringBoot Environment</a><ul>\n<li><a href=\"#背景类介绍\">背景类介绍</a></li>\n<li><a href=\"#源码分析-environment-的初始化过程\">源码分析 Environment 的初始化过程</a></li>\n</ul>\n</li>\n</ul>\n<p><br></p>\n<p>在SpringBoot中，每个<code>ApplicationContext</code>都有相应的环境信息，比如<code>AbstractApplicationContext</code>中就有<code>private ConfigurableEnvironment environment;</code> <strong>Environment 可以理解为一些环境上下文，也就是存储了当前运行环境的各种属性。</strong></p>\n<p>下面就看看Environment到底是什么，以及在初始化的时候，他做了哪些相关工作。</p>\n<p><br></p>\n<hr>\n<h2 id=\"背景类介绍\"><a href=\"#背景类介绍\" class=\"headerlink\" title=\"背景类介绍\"></a>背景类介绍</h2><p><br></p>\n<p><strong><code>Environment &amp;&amp; PropertyResolver</code></strong></p>\n<p><br></p>\n<p>我们常使用的Environment就是<code>StandardServletEnvironment</code> ，那么首先我们就看看该类的体系结构。</p>\n<p><img src=\"/images/springboot-environment-1.png\" alt=\"|center\"></p>\n<p>可以看到，<code>StandardServletEnvironment</code> 继承自 <code>StandardEnvironment</code>，实现了<code>ConfigurableWebEnvironment</code>接口。而再往下还有很多的接口定义和抽象类，下面我们都来看看。</p>\n<ul>\n<li><code>PropertyResolver</code> 提供了访问属性的接口定义，忽略底层resource的实现。</li>\n<li><code>Environment</code> 继承自<code>PropertyResolver</code>，提供访问和判断profiles的功能。</li>\n<li><code>ConfigurablePropertyResolver</code> 继承自<code>PropertyResolver</code>，主要提供属性类型转换(基于<code>org.springframework.core.convert.ConversionService</code>)功能。定义了<code>get|setConversionService,setValueSeparator,setPlaceholderPrefix|Suffix</code>等方法，就是丰富了解析的功能。</li>\n<li><code>ConfigurableEnvironment</code> 继承自<code>ConfigurablePropertyResolver</code>和Environment，并且提供设置激活的profile和默认的profile的功能。</li>\n<li><code>ConfigurableWebEnvironment</code> 继承自<code>ConfigurableEnvironment</code>，并且提供配置Servlet上下文和Servlet参数的功能。</li>\n<li><code>AbstractEnvironment</code> 实现了<code>ConfigurableEnvironment</code>接口，提供默认属性和存储容器的定义，并且为子类预留可覆盖了扩展方法。</li>\n<li><code>StandardEnvironment</code> 继承自<code>AbstractEnvironment</code>，非Servlet(Web)环境下的标准Environment实现。</li>\n<li><code>StandardServletEnvironment</code> 继承自<code>StandardEnvironment</code>，Servlet(Web)环境下的标准Environment实现。</li>\n</ul>\n<p><br></p>\n<p>如果有不是特别清楚的，可以结合代码看看每个类中方法的定义，就可以理解上面各个类的功能了。</p>\n<p><br></p>\n<p><strong><code>PropertyResource</code></strong></p>\n<p><br></p>\n<p>在<code>AbstractEnvironment</code>中，用来保存环境中各种属性的就是<code>MutablePropertySources</code>。下面从<code>MutablePropertySources</code>入手，了解整个<code>PropertyResource</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 该类提供了PropertySources的具体实现（也是唯一的），里面保存的是一个CopyOnWriteArrayList&lt;PropertySource&lt;?&gt;&gt;的数组。</span></span><br><span class=\"line\"><span class=\"comment\"> * 而且好提供了各种方法，用来插入、删除 list中的元素 PropertySource</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MutablePropertySources</span> <span class=\"keyword\">implements</span> <span class=\"title\">PropertySources</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这里定义了对多个PropertySource的真正数据结构是 CopyOnWriteArrayList&lt;ropertySource&lt;?&gt;&gt;</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;PropertySource&lt;?&gt;&gt; propertySourceList = <span class=\"keyword\">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面再看看 <code>PropertySources</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 就是定义了多个PropertySource，和containers 和 PropertySource get这种操作</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PropertySources</span> <span class=\"keyword\">extends</span> <span class=\"title\">Iterable</span>&lt;<span class=\"title\">PropertySource</span>&lt;?&gt;&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return a sequential &#123;<span class=\"doctag\">@link</span> Stream&#125; containing the property sources.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@since</span> 5.1</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">default</span> Stream&lt;PropertySource&lt;?&gt;&gt; stream() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> StreamSupport.stream(spliterator(), <span class=\"keyword\">false</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return whether a property source with the given name is contained.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> name the &#123;<span class=\"doctag\">@linkplain</span> PropertySource#getName() name of the property source&#125; to find</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(String name)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return the property source with the given name, &#123;<span class=\"doctag\">@code</span> null&#125; if not found.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> name the &#123;<span class=\"doctag\">@linkplain</span> PropertySource#getName() name of the property source&#125; to find</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\tPropertySource&lt;?&gt; get(String name);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p>最后看看<code>PropertySource</code>，这里面还是有点东西的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PropertySource</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> T source;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PropertySource</span><span class=\"params\">(String name, T source)</span> </span>&#123;</span><br><span class=\"line\">\t\tAssert.hasText(name, <span class=\"string\">\"Property source name must contain at least one character\"</span>);</span><br><span class=\"line\">\t\tAssert.notNull(source, <span class=\"string\">\"Property source must not be null\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.source = source;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PropertySource</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>(name, (T) <span class=\"keyword\">new</span> Object());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.source;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return whether this &#123;<span class=\"doctag\">@code</span> PropertySource&#125; contains the given name.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;This implementation simply checks for a &#123;<span class=\"doctag\">@code</span> null&#125; return value</span></span><br><span class=\"line\"><span class=\"comment\">\t * from &#123;<span class=\"doctag\">@link</span> #getProperty(String)&#125;. Subclasses may wish to implement</span></span><br><span class=\"line\"><span class=\"comment\">\t * a more efficient algorithm if possible.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> name the property name to find</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">containsProperty</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (getProperty(name) != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return the value associated with the given name,</span></span><br><span class=\"line\"><span class=\"comment\">\t * or &#123;<span class=\"doctag\">@code</span> null&#125; if not found.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> name the property to find</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@see</span> PropertyResolver#getRequiredProperty(String)</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Object <span class=\"title\">getProperty</span><span class=\"params\">(String name)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// equals 和 hashCode 都只和 name 属性相关</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object other)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (<span class=\"keyword\">this</span> == other || (other <span class=\"keyword\">instanceof</span> PropertySource &amp;&amp;</span><br><span class=\"line\">\t\t\t\tObjectUtils.nullSafeEquals(<span class=\"keyword\">this</span>.name, ((PropertySource&lt;?&gt;) other).name)));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ObjectUtils.nullSafeHashCode(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 把String类型的name转换为一个可以判断存在与否的 ComparisonPropertySource</span></span><br><span class=\"line\">    <span class=\"comment\">// 正好 判断 equals 只根据name，所以这里也是妥妥的</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return a &#123;<span class=\"doctag\">@code</span> PropertySource&#125; implementation intended for collection comparison purposes only.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;Primarily for internal use, but given a collection of &#123;<span class=\"doctag\">@code</span> PropertySource&#125; objects, may be</span></span><br><span class=\"line\"><span class=\"comment\">\t * used as follows:</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;pre class=\"code\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@code</span> List&lt;PropertySource&lt;?&gt;&gt; sources = new ArrayList&lt;PropertySource&lt;?&gt;&gt;();</span></span><br><span class=\"line\"><span class=\"comment\">\t * sources.add(new MapPropertySource(\"sourceA\", mapA));</span></span><br><span class=\"line\"><span class=\"comment\">\t * sources.add(new MapPropertySource(\"sourceB\", mapB));</span></span><br><span class=\"line\"><span class=\"comment\">\t * assert sources.contains(PropertySource.named(\"sourceA\"));</span></span><br><span class=\"line\"><span class=\"comment\">\t * assert sources.contains(PropertySource.named(\"sourceB\"));</span></span><br><span class=\"line\"><span class=\"comment\">\t * assert !sources.contains(PropertySource.named(\"sourceC\"));</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#125;&lt;/pre&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t * The returned &#123;<span class=\"doctag\">@code</span> PropertySource&#125; will throw &#123;<span class=\"doctag\">@code</span> UnsupportedOperationException&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t * if any methods other than &#123;<span class=\"doctag\">@code</span> equals(Object)&#125;, &#123;<span class=\"doctag\">@code</span> hashCode()&#125;, and &#123;<span class=\"doctag\">@code</span> toString()&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t * are called.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> name the name of the comparison &#123;<span class=\"doctag\">@code</span> PropertySource&#125; to be created and returned.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> PropertySource&lt;?&gt; named(String name) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ComparisonPropertySource(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@code</span> PropertySource&#125; to be used as a placeholder in cases where an actual</span></span><br><span class=\"line\"><span class=\"comment\">\t * property source cannot be eagerly initialized at application context</span></span><br><span class=\"line\"><span class=\"comment\">\t * creation time.  For example, a &#123;<span class=\"doctag\">@code</span> ServletContext&#125;-based property source</span></span><br><span class=\"line\"><span class=\"comment\">\t * must wait until the &#123;<span class=\"doctag\">@code</span> ServletContext&#125; object is available to its enclosing</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@code</span> ApplicationContext&#125;.  In such cases, a stub should be used to hold the</span></span><br><span class=\"line\"><span class=\"comment\">\t * intended default position/order of the property source, then be replaced</span></span><br><span class=\"line\"><span class=\"comment\">\t * during context refresh.</span></span><br><span class=\"line\"><span class=\"comment\">     * 上面的注释也写的很清楚了，就是用来占位的，因为有一些PropertySource的初始化较晚，比如说 ServletContext相关的环境，在</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化的时候是没有的，可以用改对象来占位。</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@see</span> org.springframework.context.support.AbstractApplicationContext#initPropertySources()</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@see</span> org.springframework.web.context.support.StandardServletEnvironment</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@see</span> org.springframework.web.context.support.ServletContextPropertySource</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StubPropertySource</span> <span class=\"keyword\">extends</span> <span class=\"title\">PropertySource</span>&lt;<span class=\"title\">Object</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StubPropertySource</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">super</span>(name, <span class=\"keyword\">new</span> Object());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * Always returns &#123;<span class=\"doctag\">@code</span> null&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getProperty</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * PropertySource.named(String) 返回的就是该类型的对象。</span></span><br><span class=\"line\"><span class=\"comment\">     * 该子类是专门用来封装String类型的name，做比较的，而且他的所有getSource等相关方法，全都是抛出异常</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComparisonPropertySource</span> <span class=\"keyword\">extends</span> <span class=\"title\">StubPropertySource</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String USAGE_ERROR =</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">\"ComparisonPropertySource instances are for use with collection comparison only\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ComparisonPropertySource</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(USAGE_ERROR);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">containsProperty</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(USAGE_ERROR);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getProperty</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(USAGE_ERROR);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个<code>PropertySource</code>类和map这种的用来存储键值对的类稍微有一点不一样，PropertySource中的source是随意类型的，而且key-value都是存在source里面的。可以简单的看一下常用的两个实现<code>MapPropertySource</code>,<code></code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MapPropertySource</span> <span class=\"keyword\">extends</span> <span class=\"title\">EnumerablePropertySource</span>&lt;<span class=\"title\">Map</span>&lt;<span class=\"title\">String</span>, <span class=\"title\">Object</span>&gt;&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MapPropertySource</span><span class=\"params\">(String name, Map&lt;String, Object&gt; source)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(name, source);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getProperty</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.source.get(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">containsProperty</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.source.containsKey(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String[] getPropertyNames() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> StringUtils.toStringArray(<span class=\"keyword\">this</span>.source.keySet());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PropertiesPropertySource</span> <span class=\"keyword\">extends</span> <span class=\"title\">MapPropertySource</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(&#123;<span class=\"string\">\"unchecked\"</span>, <span class=\"string\">\"rawtypes\"</span>&#125;)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PropertiesPropertySource</span><span class=\"params\">(String name, Properties source)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(name, (Map) source);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">PropertiesPropertySource</span><span class=\"params\">(String name, Map&lt;String, Object&gt; source)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(name, source);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p>最后，我们知道<code>AbstractEnvironment</code>中存储的是<code>MutablePropertySources</code>, 是一个数组，那么在<code>Environment</code>中怎么getProperty的呢？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractEnvironment</span> <span class=\"keyword\">implements</span> <span class=\"title\">ConfigurableEnvironment</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ConfigurablePropertyResolver propertyResolver =</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> PropertySourcesPropertyResolver(<span class=\"keyword\">this</span>.propertySources);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 是代理给了 PropertySourcesPropertyResolver propertyResolver</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getProperty</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.propertyResolver.getProperty(key);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PropertySourcesPropertyResolver</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractPropertyResolver</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> PropertySources propertySources;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getProperty</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> getProperty(key, String.class, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 其实就是扫描 PropertySources 中 所有的 PropertySource 查每个PropertySource中是否存在</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">getProperty</span><span class=\"params\">(String key, Class&lt;T&gt; targetValueType, <span class=\"keyword\">boolean</span> resolveNestedPlaceholders)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.propertySources != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (PropertySource&lt;?&gt; propertySource : <span class=\"keyword\">this</span>.propertySources) &#123;</span><br><span class=\"line\">\t\t\t\tObject value = propertySource.getProperty(key);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (value != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (resolveNestedPlaceholders &amp;&amp; value <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tvalue = resolveNestedPlaceholders((String) value);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tlogKeyFound(key, propertySource, value);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> convertValueIfNecessary(value, targetValueType);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<hr>\n<h2 id=\"源码分析-Environment-的初始化过程\"><a href=\"#源码分析-Environment-的初始化过程\" class=\"headerlink\" title=\"源码分析 Environment 的初始化过程\"></a>源码分析 Environment 的初始化过程</h2><p>入口点在<code>SpringApplication.run</code>方法的<code>ConfigurableEnvironment environment = prepareEnvironment(listeners,applicationArguments);</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// environment 在该方法中完成整个初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ConfigurableEnvironment <span class=\"title\">prepareEnvironment</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        SpringApplicationRunListeners listeners,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        ApplicationArguments applicationArguments)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 根据不同的环境创建不同的 Environment 实例</span></span><br><span class=\"line\">    ConfigurableEnvironment environment = getOrCreateEnvironment();</span><br><span class=\"line\">    <span class=\"comment\">// configEnvironment 为初始化 Environment 准备好数据</span></span><br><span class=\"line\">    configureEnvironment(environment, applicationArguments.getSourceArgs());</span><br><span class=\"line\">    listeners.environmentPrepared(environment);</span><br><span class=\"line\">    bindToSpringApplication(environment);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.isCustomEnvironment) &#123;</span><br><span class=\"line\">        environment = <span class=\"keyword\">new</span> EnvironmentConverter(getClassLoader())</span><br><span class=\"line\">                .convertEnvironmentIfNecessary(environment, deduceEnvironmentClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ConfigurationPropertySources.attach(environment);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> environment;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><strong><code>1. createEnvironment</code></strong></p>\n<p><br></p>\n<p>首先根据不同的 applicationType 创建不同的Environment，这里创建的是 <code>StandardServletEnvironment</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ConfigurableEnvironment <span class=\"title\">getOrCreateEnvironment</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.environment != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.environment;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (<span class=\"keyword\">this</span>.webApplicationType) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> SERVLET:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> StandardServletEnvironment();</span><br><span class=\"line\">    <span class=\"keyword\">case</span> REACTIVE:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> StandardReactiveWebEnvironment();</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> StandardEnvironment();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>之前说过，<code>StandardServletEnvironment extends StandardEnvironment</code>, <code>StandardEnvironment extends AbstractEnvironment</code>。所以创建<code>StandardServletEnvironment</code>实例，首先会执行父类<code>AbstractEnvironment</code>的构造方法（因为这里子类没有实现构造方法），它里面又调用了<code>customizePropertySources</code>方法，<code>StandardServletEnvironment</code>实现了该方法，所以又会回来调用这个方法。</p>\n<p>创建<code>StandardServletEnvironment</code>实例的代码会按照代码实际的执行顺序，在下面罗列出来。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AbstractEnvironment</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AbstractEnvironment</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 留给子类实现 方法添加propertySource</span></span><br><span class=\"line\">    customizePropertySources(<span class=\"keyword\">this</span>.propertySources);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//StandardServletEnvironment</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">customizePropertySources</span><span class=\"params\">(MutablePropertySources propertySources)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//name=servletConfigInitParams, 给 Servlet configInitParams 占位 </span></span><br><span class=\"line\">    propertySources.addLast(<span class=\"keyword\">new</span> StubPropertySource(SERVLET_CONFIG_PROPERTY_SOURCE_NAME));</span><br><span class=\"line\">    <span class=\"comment\">// servletContextInitParams 给 Servlet contextInitParams 占位</span></span><br><span class=\"line\">    propertySources.addLast(<span class=\"keyword\">new</span> StubPropertySource(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (JndiLocatorDelegate.isDefaultJndiEnvironmentAvailable()) &#123;</span><br><span class=\"line\">        propertySources.addLast(<span class=\"keyword\">new</span> JndiPropertySource(JNDI_PROPERTY_SOURCE_NAME));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.customizePropertySources(propertySources);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// StandardEnvironment</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">customizePropertySources</span><span class=\"params\">(MutablePropertySources propertySources)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// systemProperties 放入系统环境 键值对</span></span><br><span class=\"line\">    propertySources.addLast(<span class=\"keyword\">new</span> MapPropertySource(SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME, getSystemProperties()));</span><br><span class=\"line\">    propertySources.addLast(<span class=\"keyword\">new</span> SystemEnvironmentPropertySource(SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME, getSystemEnvironment()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为什么要用<code>SubPropertySource</code>占位，而且还要注意顺序呢？</p>\n<p>会想一下，<code>Environment.getProperty</code> 的过程，是扫描数组中的每一个<code>PropertySource</code>看是否有该property，所以也会涉及到这几个环境优先级的问题。</p>\n<p><br></p>\n<p><strong><code>2. configEnvironment</code></strong></p>\n<p><br></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configureEnvironment</span><span class=\"params\">(ConfigurableEnvironment environment,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.addConversionService) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建并 返回 ConversionService，这是一个相当庞大的转换Service，用来在读取配置文件的时候，将各种数据类型转换为合适的数据类型</span></span><br><span class=\"line\">        ConversionService conversionService = ApplicationConversionService</span><br><span class=\"line\">                .getSharedInstance();</span><br><span class=\"line\">        environment.setConversionService(</span><br><span class=\"line\">                (ConfigurableConversionService) conversionService);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    configurePropertySources(environment, args);</span><br><span class=\"line\">    configureProfiles(environment, args);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果 运行的时候传入了参数，那么会将它保存在 name=springApplicationCommandLineArgs 的propertySource中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configurePropertySources</span><span class=\"params\">(ConfigurableEnvironment environment,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        String[] args)</span> </span>&#123;</span><br><span class=\"line\">    MutablePropertySources sources = environment.getPropertySources();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.defaultProperties != <span class=\"keyword\">null</span> &amp;&amp; !<span class=\"keyword\">this</span>.defaultProperties.isEmpty()) &#123;</span><br><span class=\"line\">        sources.addLast(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> MapPropertySource(<span class=\"string\">\"defaultProperties\"</span>, <span class=\"keyword\">this</span>.defaultProperties));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.addCommandLineProperties &amp;&amp; args.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        String name = CommandLinePropertySource.COMMAND_LINE_PROPERTY_SOURCE_NAME;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sources.contains(name)) &#123;</span><br><span class=\"line\">            PropertySource&lt;?&gt; source = sources.get(name);</span><br><span class=\"line\">            CompositePropertySource composite = <span class=\"keyword\">new</span> CompositePropertySource(name);</span><br><span class=\"line\">            composite.addPropertySource(<span class=\"keyword\">new</span> SimpleCommandLinePropertySource(</span><br><span class=\"line\">                    <span class=\"string\">\"springApplicationCommandLineArgs\"</span>, args));</span><br><span class=\"line\">            composite.addPropertySource(source);</span><br><span class=\"line\">            sources.replace(name, composite);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果有的话，默认会将用户传入的配置 放到第一位。</span></span><br><span class=\"line\">            <span class=\"comment\">// 所以我们的配置 优先级总是最高的。</span></span><br><span class=\"line\">            <span class=\"comment\">// 我们传入的 参数 spring.profiles.active=wyj 就会在这里放入 MutablPropertySources 中</span></span><br><span class=\"line\">            sources.addFirst(<span class=\"keyword\">new</span> SimpleCommandLinePropertySource(args));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configureProfiles</span><span class=\"params\">(ConfigurableEnvironment environment, String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化 environment 中的 activeProfiles</span></span><br><span class=\"line\">    environment.getActiveProfiles(); <span class=\"comment\">// ensure they are initialized</span></span><br><span class=\"line\">    <span class=\"comment\">// But these ones should go first (last wins in a property key clash)</span></span><br><span class=\"line\">    <span class=\"comment\">// activePrifiles中加入 ApplicationContext中 额外 用户配置的 additionalProfiles</span></span><br><span class=\"line\">    Set&lt;String&gt; profiles = <span class=\"keyword\">new</span> LinkedHashSet&lt;&gt;(<span class=\"keyword\">this</span>.additionalProfiles);</span><br><span class=\"line\">    profiles.addAll(Arrays.asList(environment.getActiveProfiles()));</span><br><span class=\"line\">    environment.setActiveProfiles(StringUtils.toStringArray(profiles));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Set&lt;String&gt; <span class=\"title\">doGetActiveProfiles</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.activeProfiles) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.activeProfiles.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 会读取到 已经放入到 PropertySources 中，运行程序时 我们传入的参数。</span></span><br><span class=\"line\">            String profiles = getProperty(ACTIVE_PROFILES_PROPERTY_NAME);   <span class=\"comment\">// spring.profiles.active</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (StringUtils.hasText(profiles)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 这里还可以发现，我们可以传入多个 active profiles，用,分割</span></span><br><span class=\"line\">                setActiveProfiles(StringUtils.commaDelimitedListToStringArray(</span><br><span class=\"line\">                        StringUtils.trimAllWhitespace(profiles)));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.activeProfiles;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以他一共干了三件事：</p>\n<ol>\n<li>初始化<code>ConvertService</code></li>\n<li>读取用户运行程序时传入的配置，并保存在Envrionment</li>\n<li>找到active profiles</li>\n</ol>\n<p>下面看看 <code>ConvertService</code> 中 都是什么：</p>\n<p><img src=\"/images/springboot-environment-2.png\" alt=\"|center\"></p>\n<p><img src=\"/images/springboot-environment-3.png\" alt=\"|center\"></p>\n<p><br></p>\n<p><strong><code>3.1 preLoadProperties</code></strong></p>\n<p><br></p>\n<p>下面就是发出<code>ApplicationEnvironmentPreparedEvent</code>事件。</p>\n<p>会有好几个listener，我们关心的是<code>ConfigFileApplicationListener</code>，下面是几个关心的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConfigFileApplicationListener</span></span></span><br><span class=\"line\"><span class=\"class\">\t\t<span class=\"keyword\">implements</span> <span class=\"title\">EnvironmentPostProcessor</span>, <span class=\"title\">SmartApplicationListener</span>, <span class=\"title\">Ordered</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// ApplicationEnvironmentPreparedEvent 事件最终会调用该方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">onApplicationEnvironmentPreparedEvent</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\tApplicationEnvironmentPreparedEvent event)</span> </span>&#123;</span><br><span class=\"line\">\t\tList&lt;EnvironmentPostProcessor&gt; postProcessors = loadPostProcessors();</span><br><span class=\"line\">\t\tpostProcessors.add(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t\tAnnotationAwareOrderComparator.sort(postProcessors);</span><br><span class=\"line\">        <span class=\"comment\">// 调用 EnvironmentPostProcessor 后处理器</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (EnvironmentPostProcessor postProcessor : postProcessors) &#123;</span><br><span class=\"line\">\t\t\tpostProcessor.postProcessEnvironment(event.getEnvironment(),</span><br><span class=\"line\">\t\t\t\t\tevent.getSpringApplication());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用 FactiriesLoader 加载 EnvironmentPostProcessor</span></span><br><span class=\"line\">\t<span class=\"function\">List&lt;EnvironmentPostProcessor&gt; <span class=\"title\">loadPostProcessors</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> SpringFactoriesLoader.loadFactories(EnvironmentPostProcessor.class,</span><br><span class=\"line\">\t\t\t\tgetClass().getClassLoader());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 注意 他也是 实现了 EnvironmentPostProcessor 接口的</span></span><br><span class=\"line\">    <span class=\"comment\">// 而且，也定义在了 spring.factories 中，所以 也会会掉这个方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postProcessEnvironment</span><span class=\"params\">(ConfigurableEnvironment environment,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\tSpringApplication application)</span> </span>&#123;</span><br><span class=\"line\">\t\taddPropertySources(environment, application.getResourceLoader());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">addPropertySources</span><span class=\"params\">(ConfigurableEnvironment environment,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\tResourceLoader resourceLoader)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在 systemEnvironment 后面 添加 name=random,value=new Random(); 的PropertySource</span></span><br><span class=\"line\">\t\tRandomValuePropertySource.addToEnvironment(environment);</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Loader(environment, resourceLoader).load();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><strong><code>3.2 loadProperties</code></strong></p>\n<p><br></p>\n<p><code>Loader</code> 是 <code>ConfigFileApplicationListener</code> 的内部类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Loader</span> </span>&#123;</span><br><span class=\"line\">    Loader(ConfigurableEnvironment environment, ResourceLoader resourceLoader) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.environment = environment;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.placeholdersResolver = <span class=\"keyword\">new</span> PropertySourcesPlaceholdersResolver(</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.environment);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.resourceLoader = (resourceLoader != <span class=\"keyword\">null</span>) ? resourceLoader</span><br><span class=\"line\">                : <span class=\"keyword\">new</span> DefaultResourceLoader();</span><br><span class=\"line\">        <span class=\"comment\">// 找到的 PropertySourceLoader 有两个，分别是 PropertiesPropertySourceLoader和YamlPropertySourceLoader </span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.propertySourceLoaders = SpringFactoriesLoader.loadFactories(</span><br><span class=\"line\">                PropertySourceLoader.class, getClass().getClassLoader());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">load</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.profiles = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.processedProfiles = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.activatedProfiles = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.loaded = <span class=\"keyword\">new</span> LinkedHashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 初始化 profiles</span></span><br><span class=\"line\">        <span class=\"comment\">// 首先会加入一个 null</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果 activeProfiles 不为null，加入到list中</span></span><br><span class=\"line\">        <span class=\"comment\">// 为null，吧defaultProfiles 加入到list中</span></span><br><span class=\"line\">        <span class=\"comment\">// 这里 我们配置了了 activeProfiles=wyj，所里里面有两个 一个null，一个 wyj</span></span><br><span class=\"line\">        initializeProfiles();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!<span class=\"keyword\">this</span>.profiles.isEmpty()) &#123;</span><br><span class=\"line\">            Profile profile = <span class=\"keyword\">this</span>.profiles.poll();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (profile != <span class=\"keyword\">null</span> &amp;&amp; !profile.isDefaultProfile()) &#123;</span><br><span class=\"line\">                addProfileToEnvironment(profile.getName());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 第二个参数 this::getPositiveProfileFilter 返回的是一个lambda 表达式的filter ，</span></span><br><span class=\"line\">            <span class=\"comment\">// 第三个参数 addToLoaded(MutablePropertySources::addLast, false)，addToLoaded 返回的还是一个lambda表达式，整个的作用大概就是将解析出来的数据添加到 propertySources 的最后。</span></span><br><span class=\"line\">            load(profile, <span class=\"keyword\">this</span>::getPositiveProfileFilter,</span><br><span class=\"line\">                    addToLoaded(MutablePropertySources::addLast, <span class=\"keyword\">false</span>));</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.processedProfiles.add(profile);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        resetEnvironmentProfiles(<span class=\"keyword\">this</span>.processedProfiles);</span><br><span class=\"line\">        load(<span class=\"keyword\">null</span>, <span class=\"keyword\">this</span>::getNegativeProfileFilter,</span><br><span class=\"line\">                addToLoaded(MutablePropertySources::addFirst, <span class=\"keyword\">true</span>));</span><br><span class=\"line\">        addLoadedPropertySources();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><code>load</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 整个代码逻辑 就是：</span></span><br><span class=\"line\"><span class=\"comment\">// 获取所有扫描路径 和 扫描的文件名，然后便利load</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">load</span><span class=\"params\">(Profile profile, DocumentFilterFactory filterFactory,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        DocumentConsumer consumer)</span> </span>&#123;</span><br><span class=\"line\">    getSearchLocations().forEach((location) -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> isFolder = location.endsWith(<span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">        Set&lt;String&gt; names = isFolder ? getSearchNames() : NO_SEARCH_NAMES;</span><br><span class=\"line\">        names.forEach(</span><br><span class=\"line\">                (name) -&gt; load(location, name, profile, filterFactory, consumer));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置文件的路径</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Set&lt;String&gt; <span class=\"title\">getSearchLocations</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 首先如果配置了 spring.config.location ，就返回我们配置的路径</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.environment.containsProperty(CONFIG_LOCATION_PROPERTY)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getSearchLocations(CONFIG_LOCATION_PROPERTY);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 然后扫描 spring.config.additional-location 所配置的（这是让谁用的？可能是留给三方jar包的接口？）</span></span><br><span class=\"line\">    Set&lt;String&gt; locations = getSearchLocations(</span><br><span class=\"line\">            CONFIG_ADDITIONAL_LOCATION_PROPERTY);</span><br><span class=\"line\">    <span class=\"comment\">// 最后加上默认的扫描路径。DEFAULT_SEARCH_LOCATIONS = classpath:/,classpath:/config/,file:./,file:./config/</span></span><br><span class=\"line\">    locations.addAll(</span><br><span class=\"line\">            asResolvedSet(ConfigFileApplicationListener.<span class=\"keyword\">this</span>.searchLocations,</span><br><span class=\"line\">                    DEFAULT_SEARCH_LOCATIONS));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> locations;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置文件的名字</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Set&lt;String&gt; <span class=\"title\">getSearchNames</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果配置了 spring.config.name 属性，会返回我们配置的 配置文件名字，</span></span><br><span class=\"line\">    <span class=\"comment\">// 注意，这里可以配置多个 试用,分割</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.environment.containsProperty(CONFIG_NAME_PROPERTY)) &#123;</span><br><span class=\"line\">        String property = <span class=\"keyword\">this</span>.environment.getProperty(CONFIG_NAME_PROPERTY);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> asResolvedSet(property, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果没有配置返回默认的 DEFAULT_NAMES=application</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> asResolvedSet(ConfigFileApplicationListener.<span class=\"keyword\">this</span>.names, DEFAULT_NAMES);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 真正的load方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">load</span><span class=\"params\">(String location, String name, Profile profile,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        DocumentFilterFactory filterFactory, DocumentConsumer consumer)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这块代码不知道 何时 运行，因为 name 一般不会为空啊</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!StringUtils.hasText(name)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (PropertySourceLoader loader : <span class=\"keyword\">this</span>.propertySourceLoaders) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (canLoadFileExtension(loader, location)) &#123;</span><br><span class=\"line\">                load(loader, location, profile,</span><br><span class=\"line\">                        filterFactory.getDocumentFilter(profile), consumer);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// loader 有两种，PropertiesPropertySourceLoader和YamlPropertySourceLoader </span></span><br><span class=\"line\">    <span class=\"comment\">// 每个loader支持的文件后缀也有两种，分别便利，尝试去加载 </span></span><br><span class=\"line\">    Set&lt;String&gt; processed = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (PropertySourceLoader loader : <span class=\"keyword\">this</span>.propertySourceLoaders) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String fileExtension : loader.getFileExtensions()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (processed.add(fileExtension)) &#123;</span><br><span class=\"line\">                loadForFileExtension(loader, location + name, <span class=\"string\">\".\"</span> + fileExtension,</span><br><span class=\"line\">                        profile, filterFactory, consumer);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">loadForFileExtension</span><span class=\"params\">(PropertySourceLoader loader, String prefix,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        String fileExtension, Profile profile,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        DocumentFilterFactory filterFactory, DocumentConsumer consumer)</span> </span>&#123;</span><br><span class=\"line\">    DocumentFilter defaultFilter = filterFactory.getDocumentFilter(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    DocumentFilter profileFilter = filterFactory.getDocumentFilter(profile);</span><br><span class=\"line\">    <span class=\"comment\">// 不为空 组织成 prefix-profile.fileExtension的文件，去加载</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (profile != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Try profile-specific file &amp; profile section in profile file (gh-340)</span></span><br><span class=\"line\">        String profileSpecificFile = prefix + <span class=\"string\">\"-\"</span> + profile + fileExtension;</span><br><span class=\"line\">        load(loader, profileSpecificFile, profile, defaultFilter, consumer);</span><br><span class=\"line\">        load(loader, profileSpecificFile, profile, profileFilter, consumer);</span><br><span class=\"line\">        <span class=\"comment\">// Try profile specific sections in files we've already processed</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Profile processedProfile : <span class=\"keyword\">this</span>.processedProfiles) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (processedProfile != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                String previouslyLoaded = prefix + <span class=\"string\">\"-\"</span> + processedProfile</span><br><span class=\"line\">                        + fileExtension;</span><br><span class=\"line\">                load(loader, previouslyLoaded, profile, profileFilter, consumer);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Also try the profile-specific section (if any) of the normal file</span></span><br><span class=\"line\">    <span class=\"comment\">// 为null，组织成 prefix.fileExtension的文件，去加载</span></span><br><span class=\"line\">    <span class=\"comment\">// 所以在一开始的profiles中 要加入一个null，来加载 application.yml</span></span><br><span class=\"line\">    load(loader, prefix + fileExtension, profile, profileFilter, consumer);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">load</span><span class=\"params\">(PropertySourceLoader loader, String location, Profile profile,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        DocumentFilter filter, DocumentConsumer consumer)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Resource resource = <span class=\"keyword\">this</span>.resourceLoader.getResource(location);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (resource == <span class=\"keyword\">null</span> || !resource.exists()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">                StringBuilder description = getDescription(</span><br><span class=\"line\">                        <span class=\"string\">\"Skipped missing config \"</span>, location, resource, profile);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.logger.trace(description);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.hasText(</span><br><span class=\"line\">                StringUtils.getFilenameExtension(resource.getFilename()))) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">                StringBuilder description = getDescription(</span><br><span class=\"line\">                        <span class=\"string\">\"Skipped empty config extension \"</span>, location, resource,</span><br><span class=\"line\">                        profile);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.logger.trace(description);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 之前两步都是在判断 有没有这个文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//如果存在这个文件 name=applicationConfig: [classpath:/application.yml]</span></span><br><span class=\"line\">        String name = <span class=\"string\">\"applicationConfig: [\"</span> + location + <span class=\"string\">\"]\"</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 加载配置文件中的属性</span></span><br><span class=\"line\">        List&lt;Document&gt; documents = loadDocuments(loader, name, resource);</span><br><span class=\"line\">        <span class=\"comment\">// 为空，就是 里面没配置啥属性，还是返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (CollectionUtils.isEmpty(documents)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">                StringBuilder description = getDescription(</span><br><span class=\"line\">                        <span class=\"string\">\"Skipped unloaded config \"</span>, location, resource, profile);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.logger.trace(description);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 不知道 大家是否还记得 filter，在第一个load方法传入的参数，分析过了，是用来过滤属性的</span></span><br><span class=\"line\">        List&lt;Document&gt; loaded = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Document document : documents) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (filter.match(document)) &#123;</span><br><span class=\"line\">                addActiveProfiles(document.getActiveProfiles());</span><br><span class=\"line\">                addIncludedProfiles(document.getIncludeProfiles());</span><br><span class=\"line\">                loaded.add(document);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Collections.reverse(loaded);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// consume 也是一个 lambda，也是第一个load方法传入的参数，是用来添加到Environment</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!loaded.isEmpty()) &#123;</span><br><span class=\"line\">            loaded.forEach((document) -&gt; consumer.accept(profile, document));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">                StringBuilder description = getDescription(<span class=\"string\">\"Loaded config file \"</span>,</span><br><span class=\"line\">                        location, resource, profile);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.logger.debug(description);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Failed to load property \"</span></span><br><span class=\"line\">                + <span class=\"string\">\"source from location '\"</span> + location + <span class=\"string\">\"'\"</span>, ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>读源码的时候，一开始这里还是读的比较难受的，难受在使用了很多的lambda表达式，并且循环很多。但是 当理解了整个逻辑之后，还是非常清晰的。</p>\n<p>以我们当前环境，传入了参数 <code>--spring.profiles.active=wyj</code></p>\n<ol>\n<li>第一层循环：profiles=[null, wyj]</li>\n<li>第二层循环：searchLocation=[classpath:/, classpath:/config/, file:./, file:./config/]</li>\n<li>第三层循环：searchName=[application]</li>\n<li>第四层循环：propertySourceLoaders=[PropertiesPropertySourceLoader, YamlPropertySourceLoader]</li>\n<li>第五层循环：loader.getFileExtensions=[.xml, .properties] or [.yaml, .yml]</li>\n</ol>\n<p><strong>最后组织成<code>filename = searchLocation+searchName+&quot;-&quot;+profiles+fileExtension</code>，如果最后解析出来了，就以<code>&quot;applicationConfig: [&quot; + location + &quot;]&quot;</code>为propertySource的名字将他保存在Environment中。</strong> </p>\n<p><br></p>\n<p><strong><code>3.3. loadAfter</code></strong></p>\n<p>最后全部配置文件都加载了之后，返回到一开始的load方法。</p>\n<p>执行 <code>addLoadedPropertySources()</code> 把刚刚加载出来的属性配置文件添加到envrioment 中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addLoadedPropertySources</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    MutablePropertySources destination = <span class=\"keyword\">this</span>.environment.getPropertySources();</span><br><span class=\"line\">    <span class=\"comment\">// 刚刚解析出来的放在 loaded中</span></span><br><span class=\"line\">    List&lt;MutablePropertySources&gt; loaded = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"keyword\">this</span>.loaded.values());</span><br><span class=\"line\">    <span class=\"comment\">// 上面也说过了，解析的顺序是 [null, wyj]，所以 需要反转，这样在遍历读取某个属性的时候，就可以使 application-wyj 的优先级比 application 高 </span></span><br><span class=\"line\">    Collections.reverse(loaded);</span><br><span class=\"line\">    String lastAdded = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    Set&lt;String&gt; added = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (MutablePropertySources sources : loaded) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (PropertySource&lt;?&gt; source : sources) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (added.add(source.getName())) &#123;</span><br><span class=\"line\">                addLoadedPropertySource(destination, lastAdded, source);</span><br><span class=\"line\">                lastAdded = source.getName();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从 <code>ConfigFileApplicationListener</code> 中出来，回到 SpringApplication中，就是一个bind，其他的也没什么了。</p>\n<p>到此结束。</p>\n<p><br></p>\n<ul>\n<li><a href=\"https://www.jb51.net/article/145192.htm\" target=\"_blank\" rel=\"noopener\">Environment 和 PropertySource 讲解</a></li>\n<li><a href=\"https://blog.csdn.net/liaokailin/article/details/48878447\" target=\"_blank\" rel=\"noopener\">spring boot实战(第六篇)加载application资源文件源码分析</a></li>\n<li><a href=\"http://jinnianshilongnian.iteye.com/blog/2000183\" target=\"_blank\" rel=\"noopener\">Spring3.1新属性管理API：PropertySource、Environment、Profile</a></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjs4ehv7q00022b6vkbojz7r6","category_id":"cjs4ehv7u00032b6v5xduwpdp","_id":"cjs4ehv7x00062b6visjwndjx"},{"post_id":"cjs4ehves00082b6vu5ziitzm","category_id":"cjs4ehvet00092b6vga0v3so4","_id":"cjs4ehvev000c2b6v8np4xta4"}],"PostTag":[{"post_id":"cjs4ehv7q00022b6vkbojz7r6","tag_id":"cjs4ehv7v00042b6vhbd9ls2x","_id":"cjs4ehv7w00052b6vw44d79l4"},{"post_id":"cjs4ehves00082b6vu5ziitzm","tag_id":"cjs4ehvet000a2b6vs59p7pn5","_id":"cjs4ehvev000d2b6v2c133kmb"},{"post_id":"cjs4ehves00082b6vu5ziitzm","tag_id":"cjs4ehveu000b2b6vf4kq82j2","_id":"cjs4ehvew000e2b6v9vld8gcs"}],"Tag":[{"name":"test","_id":"cjs4ehv7v00042b6vhbd9ls2x"},{"name":"springboot","_id":"cjs4ehvet000a2b6vs59p7pn5"},{"name":"源码分析","_id":"cjs4ehveu000b2b6vf4kq82j2"}]}}